[
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nTrusted Committer\n\n## Patlet\n\nMany InnerSource projects will find themselves in a situation where\nthey consistently receive feedback, features, and bug-fixes from contributors.\nIn these situations, project maintainers seek ways to recognize and reward the\nwork of the contributor above and beyond single contributions.\n\n## Problem\n\n- Project maintainers want to find ways to scale their ability to support a project\n- Project maintainers want to find ways to lengthen the value delivered by a project\n- Project maintainers want to visibly reward frequent contributors and empower them to amplify their value contribution.\n- Lack of mechanism and language for recognizing contributions across teams within an organization\n\n## Context\n\n- You are the maintainer of a cross-team library, service, or shared resource\n- You receive regular contributions\n- You receive regular feature requests\n- You receive regular bug-fix requests\n- There are motivated contributors looking to build expertise through InnerSource projects\n\n## Forces\n\n- Over the lifecycle of a project, the focus of the maintainers may shift away to accommodate changing business priorities\n- Contributors seek visible recognition of their contributions, demonstrating value\n- Maintaining a project of reasonable complexity is taxing for a small team\n- Developing project features at scale is taxing for a small team\n\n## Solution\n\n### Defining the Trusted Committer Role for a Project\n\nWhat a Trusted Committer handles is up to each project and its maintainers. Ensure you document within the project the scope of your Trusted Committer role. Clear documentation sets expectations for new community members and establishes the role for future candidates.\n\nThe following are a few guidelines for identifying a potential Trusted Committer:\n\n* An active participant in community channels (Slack, JIRA issue triaging, etc.) becomes a Trusted Committer, thereby formalizing their role in community support.\n* Someone who frequently submits code, documentation, or other repository changes.  Start by including this person on pull requests. If they are actively engaging in pull requests, consider approaching them about opportunities for further collaboration on the project.\n\n### Formalizing Trusted Committers\n\nThe first step is to approach candidates about becoming a Trusted Committer.\nMaintainers should educate candidates on the role of a Trusted Committer. There is no expectation that candidates will accept the role of Trusted Committer. Each candidate\nshould assess if they have the available bandwidth to take on the responsibilities.\n\nWhen a candidate accepts the role, it is up to the project maintainers to\npublicly recognize the transition from user to Trusted Committer. It is also a\ngood idea to add their name to a Trusted Committers section in your project's\nREADME.  As an example:\n\n```markdown\n# project-name\n\n... your project's readme ...\n\n## Project Leaders\n\n### Maintainers\n\n  - Your team\n\n### [Trusted Committers]\n\n  - The name of the new trusted committer\n\n[Trusted Committers]: https://example.com/link/to/your/trusted/committer/documentation.md\n```\n\n### Maintaining Trusted Committer Relationships\n\nOnce you formalize a new Trusted Committer, it is a good idea to keep them in the\nloop as you continue to iterate on your project. Keeping them in the loop can be as\nsimple as inviting them to your project channel or as involved as including them in your\nplanning sessions. More opportunities for involvement gives Trusted Committers\na path to Maintainer if they so desire.\n\nBesides keeping Trusted Committers informed, it is good to check in on a\nregular basis. A suggested cadence is to start with every week before gradually\nprogressing to every few weeks. The purpose of these check-ins is to make sure the\nTrusted Committer feels supported in their new role. Analogous to a 1:1 with your\nmanager, if there are any issues, listen and empathize to try and understand\nwhat is preventing the Trusted Committer from being successful. Always\n[thank the Trusted Committer for their continued effort][praise] in making the project successful and set a new date to check-in.\n\n### Sunsetting a Trusted Committer\n\nThere are times which necessitate removing a Trusted Committer, such as if the Trusted\nCommitter is:\n\n* No longer willing to take part\n* No longer able to perform their duties\n* No longer employed by the company\n\nA plan for removing access to project resources should be agreed upon by both parties,\nincluding transitioning their entry in a project's **Trusted Committer** section to a\nlist of past contributors.\n\nUpon removing access, [thank the Trusted Committer for\ntheir participation publicly][praise]. Public acknowledgment ensures clear\ncommunication of transition and continuity within the community.\n\n## Resulting Context\n\n### For Contributors\n\nAchieving Trusted Committer status for a project demonstrates initiative in\ncontributing to the community project. Recognition for these\nefforts can be used during annual reviews with managers.\n\n### For Maintainers\n\nAs a project matures, maintainers can become less familiar with key aspects\nof a project. Trusted Committers fill in these gaps, ensuring that all\naspects of the project are better served over time.\n\nA healthy set of Trusted Committers ensures that if project maintainers move on\nthere is a plan for responsible stewardship.\n\n## Known Instances\n\nThis has been tried and proven successful at:\n\n- Nike\n- PayPal\n- Mercado Libre - adds a section in the `CONTRIBUTING.md` file to inform who the Trusted Committers are.\n- Robert Bosch GmbH - we didn't call the role 'Trusted Committer' but we had this role at the beginning of our InnerSource journey. Trusted Committers would be funded for 100 % of their time to be able to focus on this role.\n\n![Trusted Committer section in CONTRIBUTING.md of Mercado Libre](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/mercadolibre-trusted-committers.png \"Trusted Committer section in CONTRIBUTING.md of Mercado Libre\")\n\n## Status\n\n- Structured\n- Published internally at Nike; drafted via pull-request in June of 2018.\n\n## Authors\n\n- [Fernando Freire]\n\n## Acknowledgements\n\n- [Russell Rutledge]\n- [Loren Sanz]\n- [Noah Cawley]\n- [Jeremy Hicks]\n- [Doron Katz]\n\n[Doron Katz]: https://github.com/doronkatz\n[Russell Rutledge]: https://github.com/rrrutledge\n[Loren Sanz]: https://github.com/mrsanz\n[Jeremy Hicks]: https://github.com/greatestusername\n[Noah Cawley]: https://github.com/utanapishtim\n[praise]: ./praise-participants.md\n[Fernando Freire]: https://github.com/dogonthehorizon\n",
    "title": "Trusted Committer",
    "patlet": "Many InnerSource projects will find themselves in a situation where\nthey consistently receive feedback, features, and bug-fixes from contributors.\nIn these situations, project maintainers seek ways to recognize and reward the\nwork of the contributor above and beyond single contributions.",
    "problem": "- Project maintainers want to find ways to scale their ability to support a project\n- Project maintainers want to find ways to lengthen the value delivered by a project\n- Project maintainers want to visibly reward frequent contributors and empower them to amplify their value contribution.\n- Lack of mechanism and language for recognizing contributions across teams within an organization",
    "context": "- You are the maintainer of a cross-team library, service, or shared resource\n- You receive regular contributions\n- You receive regular feature requests\n- You receive regular bug-fix requests\n- There are motivated contributors looking to build expertise through InnerSource projects",
    "forces": "- Over the lifecycle of a project, the focus of the maintainers may shift away to accommodate changing business priorities\n- Contributors seek visible recognition of their contributions, demonstrating value\n- Maintaining a project of reasonable complexity is taxing for a small team\n- Developing project features at scale is taxing for a small team",
    "solution": "",
    "project_leaders": "",
    "resulting_context": "",
    "known_instances": "This has been tried and proven successful at:\n\n- Nike\n- PayPal\n- Mercado Libre - adds a section in the `CONTRIBUTING.md` file to inform who the Trusted Committers are.\n- Robert Bosch GmbH - we didn't call the role 'Trusted Committer' but we had this role at the beginning of our InnerSource journey. Trusted Committers would be funded for 100 % of their time to be able to focus on this role.\n\n![Trusted Committer section in CONTRIBUTING.md of Mercado Libre](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/mercadolibre-trusted-committers.png \"Trusted Committer section in CONTRIBUTING.md of Mercado Libre\")",
    "status": "- Structured\n- Published internally at Nike; drafted via pull-request in June of 2018.",
    "authors": "- [Fernando Freire]",
    "acknowledgements": "- [Russell Rutledge]\n- [Loren Sanz]\n- [Noah Cawley]\n- [Jeremy Hicks]\n- [Doron Katz]\n\n[Doron Katz]: https://github.com/doronkatz\n[Russell Rutledge]: https://github.com/rrrutledge\n[Loren Sanz]: https://github.com/mrsanz\n[Jeremy Hicks]: https://github.com/greatestusername\n[Noah Cawley]: https://github.com/utanapishtim\n[praise]: ./praise-participants.md\n[Fernando Freire]: https://github.com/dogonthehorizon",
    "slug": "trusted-committer"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/transparent-cross-team-decision-making-using-rfcs.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nTransparent Cross-Team Decision Making using RFCs\n\n## Patlet\n\nInnerSource projects that want to achieve high participation rates and make the best possible decisions for everybody involved need to find ways to create participatory systems throughout the full software lifecycle. Publishing internal Requests for Comments (RFCs) documents allows for discussions early on in the design process, and increases the chances to build solutions with a high degree of commitment from all involved parties.\n\n## Problem\n\nFor an InnerSource project to be healthy, it needs a substantial amount of contributors. These contributors (or teams) maybe have different requirements for the given project. e.g. they may want to add features to the project that are not compatible with one another or lead to an unhealthy bloat in the architecture.\n\nDiscovering such disagreements or misunderstanding late in the process, e.g. once the software has already been built, is very costly. These disagreements may lead to frustrations by all parties involved, and can even be disruptive to the health of the collaboration culture in the project. A common situation where such a disagreement surfaces is a change request (pull request) which is open for a very long time because the author of the change request and the maintainers of the project essentially don’t agree that the proposed change should be made at all.\n\nFor an InnerSource project this situation happens more frequently when the project is maintained by multiple teams in the company i.e. shared ownership.\n\n## Story\n\nA project, or application made up of multiple projects, is maintained by a number of different teams, with each team owning different areas of the project or application. These teams do make InnerSource contributions to each other's areas, but larger, cross-cutting changes are only ever driven by the teams' technical leads working together, or don't happen at all. This results in most engineers unable to effect large scale, cross-cutting change, reducing innovation and opportunities for collaboration.\n\nBy implementing a process and template for RFCs, teams and individuals are empowered to propose large, cross-cutting changes via a transparent decision making process, with consultation across teams done asynchronously. This results in greater innovation, closer collaboration, and more knowledge spread. This is dependent on buy-in from all disciplines at all levels, and an environment of psychological safety so that people can openly propose and debate ideas.\n\nLike with any process, this must be continually improved upon. There may need to be changes to the RFC template or process to ensure it is inclusive, collaborative, and effective.\n\n## Context\n\n- shared ownership by many teams of an InnerSource project\n- overarching design decisions cannot be made from a central body all the time (e.g. a group of architects) as they have neither enough time, nor sufficient domain-specific knowledge to make good decisions in all the cases\n- various types of users have input on the direction that a certain project is taking. Such user may be: Developers, Product Owners, Product Managers, etc\n- decisions need to be made in a asynchronous fashion, at least partly, as it isn’t feasible to call frequent synchronous meetings with all participants\n- there is a desire to document the decisions made, i.e. making sure that they are made in writing, rather than just verbally\n\n## Forces\n\n- most of the times, the involved parties want to make a decision fairly quickly (e.g. the up-front design time is fairly limited)\n- writing things down (without already implementing things) is often a new skill for many of the people involved\n\n## Sketch\n\n![RFC process used at Uber's BaseUI project (open source example)](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/rfc-process-uber-baseui.png)\n\n## Solutions\n\nWe chose an RFC-like process for increasing the transparency of our cross-team decision making process (also see [Requests for Comments][requests-for-comments]).\n\nImportant elements of the solution are:\n\n- a description of when to publish an RFC (and when not to)\n- a template for RFC documents\n    - should provoke RFC author to consider their proposal from multiple angles\n    - should prompt both high level accessible overview, and detailed in-depth explanation\n- a well known, lightweight process surrounding RFCs e.g.\n    - how to publish RFC and share it with all stakeholders (e.g. Slack, mailing list)\n    - how to collect feedback for the RFC\n    - how to work in the feedback\n    - how to move the RFC towards a conclusion or decision (e.g. relevant nominated maintainers to sign off)\n    - appropriate tooling chosen (e.g. non-engineers may not have access to source control tools)\n- a commitment to iterate on the RFC template and process\n\n### Examples/Templates\n\n- [Rust][rust] is a good Open Source example of RFC template and process, and has been the basis for many other RFC processes.\n- [Genericised BBC iPlayer & Sounds RFC template](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/templates/rfc.md), originally based on the [Rust][rust] template\n\n## Resulting Context\n\nImplementing an RFC-like process has proven to be valuable, as it makes the cross-team decision making process more transparent for everybody, allowing for all voices to be heard.\n\nObservable positive effects:\n\n- **democratization of the decision making process** for decisions that impact many teams (also offloading team leads from that burden)\n- **a open asynchronous communication method** that works well across multiple teams and geos\n- **empowers individuals and teams** to effect large scale change\n- **record of decisions made** for people to refer back to for context\n- **scales impact of experienced engineers** as they can contribute to solutions asynchronously and remotely, rather than needing to be present in a meeting\n- **terminology alignment** e.g. by spelling out our testing terminology such as “what is a system test?”\n- **process alignment** e.g. by spelling out the out-of-hours support process\n- **greater clarity of thought**, as writing an RFC makes the author challenge herself more than they would normally\n\nThe RFC approach also has risk that we want to call out:\n\n- It doesn’t always work! e.g. some people might still argue against a decision that was already made via an RFC. However having the decision making process in writing is still beneficial in these scenarios, as you can point people to when and why a certain decision was made.\n- Writing up design proposals (architecture, protocols, etc) upfront has an element of waterfall-like design that does not fit the iterative development approach that many development teams favor. Remember: “Working software over comprehensive documentation” ([Agile Manifesto](https://agilemanifesto.org/)). The RFC process should be as lightweight as possible.\n- An RFC may become big and too unwieldy. This often shows in long comment threads and discussions surrounding it. In those situations we may decide to complement the RFC with synchronous communication such as a working group and in-person meetings. But time is still saved, as people can read the RFC before the meeting rather than having all the information shared during the meeting.\n\n## Rationale\n\nRFCs haven proven themselves in the Open Source world for many years. This is true both for the Internet as a whole where RFCs have been instrumental in developing standards (e.g. see [30 Years of RFCs][30-years-of-rfcs]), as well for other Open Source projects that have adapted this method to promote transparent decision making in their community (e.g. [RUST][rust], [ZeroMQ][zeromq]).\n\nIn the context of InnerSource, other companies have shared their experiences with RFC-like approaches too, such as [Uber][uber] and [Europace][europace].\n\nAlso for decision making outside of pure software design decisions, transparent decision making models can be effective e.g. when working towards an Open Organization. For an example see Red Hat’s [Open Decision Framework][open-decision-framework] (released publicly on June 7, 2016).\n\n## Known Instances\n\n- **BBC iPlayer & Sounds** - As presented at the ISC Fall Summit 2020 [Using Internal RFCs to Enhance Collaboration][bbc].\n- **Europace** - As described in Open Organization: [Setting cross-team standards and best practices in the open][europace].\n- **Uber** - According to this blog post by Gergely Orosz: [Scaling Engineering Teams via RFCs: Writing Things Down][uber].\n- **Google Design Docs** - As described in this blog post by Malte Ubl [Design Docs at Google][google]\n- **DAZN** (10/2021) - One way that DAZN makes technical decisions is via RFCs. RFCs are used for decisions that apply to engineering-wide processes only! The RFCs live in a GitHub repository, and technical standards are then gradually adopted within their tools and by their engineers. An RFC can be raised by any engineer, and voted on by all engineers. If upvotes exceed downvotes, the RFC is adopted. It’s worth noting, that the RFC voting process hasn’t yet been “stress-tested” by any contentious decisions. - As described in this blog post by Lou Bichard: [Building A DX Team: Lessons Learned][dazn]\n\n## Status\n\nStructured\n\n## Author(s)\n\n- Tom Sadler\n- Sebastian Spier\n\n## Aliases\n\n- [Design Docs][google]\n- Architecture Decision Record (ADRs) - Not necessarily a direct alias, as they can sometimes be used very differently e.g. RFCs for seeking input and building consensus, ADRs for recording decisions and implementation detail\n\n[requests-for-comments]: https://en.wikipedia.org/wiki/Request_for_Comments\n[30-years-of-rfcs]: https://www.rfc-editor.org/rfc/rfc2555.txt\n[rust]: https://github.com/rust-lang/rfcs\n[zeromq]: https://rfc.zeromq.org\n[uber]: https://blog.pragmaticengineer.com/scaling-engineering-teams-via-writing-things-down-rfcs/\n[europace]: https://github.com/open-organization/open-org-distributed-work-guide/blob/master/drostfromm-remote-first-through-openess.md#setting-cross-team-standards-and-best-practices-in-the-open\n[open-decision-framework]: https://www.redhat.com/en/about/press-releases/red-hat-releases-open-decision-framework-spur-transparent-and-inclusive-leadership\n[bbc]: https://www.youtube.com/watch?v=U6zlghE0HcE\n[google]: https://www.industrialempathy.com/posts/design-docs-at-google/\n[dazn]: https://medium.com/dazn-tech/building-a-dx-team-lessons-learned-4a66446088bc\n",
    "title": "Transparent Cross-Team Decision Making using RFCs",
    "patlet": "InnerSource projects that want to achieve high participation rates and make the best possible decisions for everybody involved need to find ways to create participatory systems throughout the full software lifecycle. Publishing internal Requests for Comments (RFCs) documents allows for discussions early on in the design process, and increases the chances to build solutions with a high degree of commitment from all involved parties.",
    "problem": "For an InnerSource project to be healthy, it needs a substantial amount of contributors. These contributors (or teams) maybe have different requirements for the given project. e.g. they may want to add features to the project that are not compatible with one another or lead to an unhealthy bloat in the architecture.\n\nDiscovering such disagreements or misunderstanding late in the process, e.g. once the software has already been built, is very costly. These disagreements may lead to frustrations by all parties involved, and can even be disruptive to the health of the collaboration culture in the project. A common situation where such a disagreement surfaces is a change request (pull request) which is open for a very long time because the author of the change request and the maintainers of the project essentially don’t agree that the proposed change should be made at all.\n\nFor an InnerSource project this situation happens more frequently when the project is maintained by multiple teams in the company i.e. shared ownership.",
    "story": "A project, or application made up of multiple projects, is maintained by a number of different teams, with each team owning different areas of the project or application. These teams do make InnerSource contributions to each other's areas, but larger, cross-cutting changes are only ever driven by the teams' technical leads working together, or don't happen at all. This results in most engineers unable to effect large scale, cross-cutting change, reducing innovation and opportunities for collaboration.\n\nBy implementing a process and template for RFCs, teams and individuals are empowered to propose large, cross-cutting changes via a transparent decision making process, with consultation across teams done asynchronously. This results in greater innovation, closer collaboration, and more knowledge spread. This is dependent on buy-in from all disciplines at all levels, and an environment of psychological safety so that people can openly propose and debate ideas.\n\nLike with any process, this must be continually improved upon. There may need to be changes to the RFC template or process to ensure it is inclusive, collaborative, and effective.",
    "context": "- shared ownership by many teams of an InnerSource project\n- overarching design decisions cannot be made from a central body all the time (e.g. a group of architects) as they have neither enough time, nor sufficient domain-specific knowledge to make good decisions in all the cases\n- various types of users have input on the direction that a certain project is taking. Such user may be: Developers, Product Owners, Product Managers, etc\n- decisions need to be made in a asynchronous fashion, at least partly, as it isn’t feasible to call frequent synchronous meetings with all participants\n- there is a desire to document the decisions made, i.e. making sure that they are made in writing, rather than just verbally",
    "forces": "- most of the times, the involved parties want to make a decision fairly quickly (e.g. the up-front design time is fairly limited)\n- writing things down (without already implementing things) is often a new skill for many of the people involved",
    "sketch": "![RFC process used at Uber's BaseUI project (open source example)](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/rfc-process-uber-baseui.png)",
    "solutions": "We chose an RFC-like process for increasing the transparency of our cross-team decision making process (also see [Requests for Comments][requests-for-comments]).\n\nImportant elements of the solution are:\n\n- a description of when to publish an RFC (and when not to)\n- a template for RFC documents\n    - should provoke RFC author to consider their proposal from multiple angles\n    - should prompt both high level accessible overview, and detailed in-depth explanation\n- a well known, lightweight process surrounding RFCs e.g.\n    - how to publish RFC and share it with all stakeholders (e.g. Slack, mailing list)\n    - how to collect feedback for the RFC\n    - how to work in the feedback\n    - how to move the RFC towards a conclusion or decision (e.g. relevant nominated maintainers to sign off)\n    - appropriate tooling chosen (e.g. non-engineers may not have access to source control tools)\n- a commitment to iterate on the RFC template and process",
    "resulting_context": "Implementing an RFC-like process has proven to be valuable, as it makes the cross-team decision making process more transparent for everybody, allowing for all voices to be heard.\n\nObservable positive effects:\n\n- **democratization of the decision making process** for decisions that impact many teams (also offloading team leads from that burden)\n- **a open asynchronous communication method** that works well across multiple teams and geos\n- **empowers individuals and teams** to effect large scale change\n- **record of decisions made** for people to refer back to for context\n- **scales impact of experienced engineers** as they can contribute to solutions asynchronously and remotely, rather than needing to be present in a meeting\n- **terminology alignment** e.g. by spelling out our testing terminology such as “what is a system test?”\n- **process alignment** e.g. by spelling out the out-of-hours support process\n- **greater clarity of thought**, as writing an RFC makes the author challenge herself more than they would normally\n\nThe RFC approach also has risk that we want to call out:\n\n- It doesn’t always work! e.g. some people might still argue against a decision that was already made via an RFC. However having the decision making process in writing is still beneficial in these scenarios, as you can point people to when and why a certain decision was made.\n- Writing up design proposals (architecture, protocols, etc) upfront has an element of waterfall-like design that does not fit the iterative development approach that many development teams favor. Remember: “Working software over comprehensive documentation” ([Agile Manifesto](https://agilemanifesto.org/)). The RFC process should be as lightweight as possible.\n- An RFC may become big and too unwieldy. This often shows in long comment threads and discussions surrounding it. In those situations we may decide to complement the RFC with synchronous communication such as a working group and in-person meetings. But time is still saved, as people can read the RFC before the meeting rather than having all the information shared during the meeting.",
    "rationale": "RFCs haven proven themselves in the Open Source world for many years. This is true both for the Internet as a whole where RFCs have been instrumental in developing standards (e.g. see [30 Years of RFCs][30-years-of-rfcs]), as well for other Open Source projects that have adapted this method to promote transparent decision making in their community (e.g. [RUST][rust], [ZeroMQ][zeromq]).\n\nIn the context of InnerSource, other companies have shared their experiences with RFC-like approaches too, such as [Uber][uber] and [Europace][europace].\n\nAlso for decision making outside of pure software design decisions, transparent decision making models can be effective e.g. when working towards an Open Organization. For an example see Red Hat’s [Open Decision Framework][open-decision-framework] (released publicly on June 7, 2016).",
    "known_instances": "- **BBC iPlayer & Sounds** - As presented at the ISC Fall Summit 2020 [Using Internal RFCs to Enhance Collaboration][bbc].\n- **Europace** - As described in Open Organization: [Setting cross-team standards and best practices in the open][europace].\n- **Uber** - According to this blog post by Gergely Orosz: [Scaling Engineering Teams via RFCs: Writing Things Down][uber].\n- **Google Design Docs** - As described in this blog post by Malte Ubl [Design Docs at Google][google]\n- **DAZN** (10/2021) - One way that DAZN makes technical decisions is via RFCs. RFCs are used for decisions that apply to engineering-wide processes only! The RFCs live in a GitHub repository, and technical standards are then gradually adopted within their tools and by their engineers. An RFC can be raised by any engineer, and voted on by all engineers. If upvotes exceed downvotes, the RFC is adopted. It’s worth noting, that the RFC voting process hasn’t yet been “stress-tested” by any contentious decisions. - As described in this blog post by Lou Bichard: [Building A DX Team: Lessons Learned][dazn]",
    "status": "Structured",
    "author(s)": "- Tom Sadler\n- Sebastian Spier",
    "aliases": "- [Design Docs][google]\n- Architecture Decision Record (ADRs) - Not necessarily a direct alias, as they can sometimes be used very differently e.g. RFCs for seeking input and building consensus, ADRs for recording decisions and implementation detail\n\n[requests-for-comments]: https://en.wikipedia.org/wiki/Request_for_Comments\n[30-years-of-rfcs]: https://www.rfc-editor.org/rfc/rfc2555.txt\n[rust]: https://github.com/rust-lang/rfcs\n[zeromq]: https://rfc.zeromq.org\n[uber]: https://blog.pragmaticengineer.com/scaling-engineering-teams-via-writing-things-down-rfcs/\n[europace]: https://github.com/open-organization/open-org-distributed-work-guide/blob/master/drostfromm-remote-first-through-openess.md#setting-cross-team-standards-and-best-practices-in-the-open\n[open-decision-framework]: https://www.redhat.com/en/about/press-releases/red-hat-releases-open-decision-framework-spur-transparent-and-inclusive-leadership\n[bbc]: https://www.youtube.com/watch?v=U6zlghE0HcE\n[google]: https://www.industrialempathy.com/posts/design-docs-at-google/\n[dazn]: https://medium.com/dazn-tech/building-a-dx-team-lessons-learned-4a66446088bc",
    "slug": "transparent-cross-team-decision-making-using-rfcs"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/start-as-experiment.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nStart as an Experiment\n\n## Patlet\n\nStart your InnerSource initiative as a time limited experiment to make it easier for managers unfamiliar with InnerSource to endorse and support the initiative.\n\n## Problem\n\nAn InnerSource initiative is considered but not started because management is unsure about its outcome and, as a result, is not willing to commit to an investment.\n\n## Context\n\nThe company is considering InnerSource to increase the efficiency of collaboration on software projects. However, most managers are not familiar with the Open Source working model and are instead accustomed to hierarchical, top-down control style management. The idea of InnerSource is very popular with software developers in the company, not the least because many developers use or are actively developing Open Source software.\n\n## Forces\n\n- Managers will want to validate the claims of improved collaboration through InnerSource before making a long term investment. This usually involves measuring the improvements.\n- If the InnerSource initiative will likely have a huge uptake among developers and if many projects are likely to rely on it, a decision to shut it down will be very unpopular and therefore hard to make. The perceived resulting loss of control might deter some managers to even start with InnerSource.\n- Implementing InnerSource style working models are often a radical departure from previously practiced working models. It is therefore likely, that existing, mandatory processes are no longer applicable and that appropriate governing processes are missing. The result might be that one has to operate in a regulatory, sometimes legal no-mans land. Examples are tax and export control related regulations in large corporations with multiple legal entities in multiple countries.\n\n## Solution\n\nDeclare the InnerSource initiative as a time limited experiment. Define and communicate the criteria for projects to join the InnerSource experiment. Choose criteria that will maximize the chances of building a healthy community. A set of criteria is a good one if the insights generated from it within the context of the experiment can intuitively be applied to contexts involving other potential InnerSource projects.\n\nExamples for such criteria are:\n\n- Sufficient geographical distribution of developers\n- Sufficient departmental mix of developers\n- Openness of communication within community\n- Career path based on merit within community\n- Democratic decision making within community\n\nConsider designating the end of the experiment a _pivot_, _change_ or _pause_ point to re-evaluate. Also consider establishing a [Review Committee](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/review-committee.md) to increase the chances of management buy-in through participation. Depending on company culture, it might be helpful to accompany the experiment with appropriate metrics [First Steps With Metrics](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/introducing-metrics-in-innersource.md). If the projects in the experiment don't provide a direct impact on the companies revenue, consider introducing [Cross-Team Project Valuation](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/crossteam-project-valuation.md) to highlight their value contributions.\n\n## Resulting Context\n\nManagers are able to kick start InnerSource for the following reasons:\n\n- The experimental setup eases the need for managers to scrutinize the InnerSource program numbers in the same way that they would for typical projects.\n- The possibility of failure of the experiment is understood and accepted. The personal risk for the supporting managers is minimized.\n- Even in case of a failure, the setup ensures that the company will learn from the experiment.\n- In case of success, the data gathered during the experiment will allow managers to make a longer lasting commitment to InnerSource.\n\nParticipants in the InnerSource experiment are now conscious that they have to prove to management that InnerSource yields the promised benefits. It will therefore help to focus work on those activities which provide the most demonstrable value thus increasing the chances of success.\n\nFinally, starting as an experiment makes it much easier to sidestep regulations and forces such as tool and process policies which could decrease the chances of success.\n\n## Related Patterns\n\n- _Trial Run_ (from the book [Fearless Change](https://fearlesschangepatterns.com/))\n\n## Known Instances\n\n- Robert Bosch GmbH (globally distributed software development)\n\n## Status\n\n* Structured\n\n## Author\n\n- Georg Grütter (Robert Bosch GmbH)\n\n## Acknowledgements\n\n- Jason Zink (Robert Bosch GmbH)\n- Diogo Fregonese (Robert Bosch GmbH)\n- Robert Hansel (Robert Bosch GmbH)\n- Hans Malte Kern (Robert Bosch GmbH)\n- Russ Rutledge (Nike)\n- Tim Yao (Nokia)\n- Clint Cain (Optum)\n",
    "title": "Start as an Experiment",
    "patlet": "Start your InnerSource initiative as a time limited experiment to make it easier for managers unfamiliar with InnerSource to endorse and support the initiative.",
    "problem": "An InnerSource initiative is considered but not started because management is unsure about its outcome and, as a result, is not willing to commit to an investment.",
    "context": "The company is considering InnerSource to increase the efficiency of collaboration on software projects. However, most managers are not familiar with the Open Source working model and are instead accustomed to hierarchical, top-down control style management. The idea of InnerSource is very popular with software developers in the company, not the least because many developers use or are actively developing Open Source software.",
    "forces": "- Managers will want to validate the claims of improved collaboration through InnerSource before making a long term investment. This usually involves measuring the improvements.\n- If the InnerSource initiative will likely have a huge uptake among developers and if many projects are likely to rely on it, a decision to shut it down will be very unpopular and therefore hard to make. The perceived resulting loss of control might deter some managers to even start with InnerSource.\n- Implementing InnerSource style working models are often a radical departure from previously practiced working models. It is therefore likely, that existing, mandatory processes are no longer applicable and that appropriate governing processes are missing. The result might be that one has to operate in a regulatory, sometimes legal no-mans land. Examples are tax and export control related regulations in large corporations with multiple legal entities in multiple countries.",
    "solution": "Declare the InnerSource initiative as a time limited experiment. Define and communicate the criteria for projects to join the InnerSource experiment. Choose criteria that will maximize the chances of building a healthy community. A set of criteria is a good one if the insights generated from it within the context of the experiment can intuitively be applied to contexts involving other potential InnerSource projects.\n\nExamples for such criteria are:\n\n- Sufficient geographical distribution of developers\n- Sufficient departmental mix of developers\n- Openness of communication within community\n- Career path based on merit within community\n- Democratic decision making within community\n\nConsider designating the end of the experiment a _pivot_, _change_ or _pause_ point to re-evaluate. Also consider establishing a [Review Committee](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/review-committee.md) to increase the chances of management buy-in through participation. Depending on company culture, it might be helpful to accompany the experiment with appropriate metrics [First Steps With Metrics](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/introducing-metrics-in-innersource.md). If the projects in the experiment don't provide a direct impact on the companies revenue, consider introducing [Cross-Team Project Valuation](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/crossteam-project-valuation.md) to highlight their value contributions.",
    "resulting_context": "Managers are able to kick start InnerSource for the following reasons:\n\n- The experimental setup eases the need for managers to scrutinize the InnerSource program numbers in the same way that they would for typical projects.\n- The possibility of failure of the experiment is understood and accepted. The personal risk for the supporting managers is minimized.\n- Even in case of a failure, the setup ensures that the company will learn from the experiment.\n- In case of success, the data gathered during the experiment will allow managers to make a longer lasting commitment to InnerSource.\n\nParticipants in the InnerSource experiment are now conscious that they have to prove to management that InnerSource yields the promised benefits. It will therefore help to focus work on those activities which provide the most demonstrable value thus increasing the chances of success.\n\nFinally, starting as an experiment makes it much easier to sidestep regulations and forces such as tool and process policies which could decrease the chances of success.",
    "related_patterns": "- _Trial Run_ (from the book [Fearless Change](https://fearlesschangepatterns.com/))",
    "known_instances": "- Robert Bosch GmbH (globally distributed software development)",
    "status": "* Structured",
    "author": "- Georg Grütter (Robert Bosch GmbH)",
    "acknowledgements": "- Jason Zink (Robert Bosch GmbH)\n- Diogo Fregonese (Robert Bosch GmbH)\n- Robert Hansel (Robert Bosch GmbH)\n- Hans Malte Kern (Robert Bosch GmbH)\n- Russ Rutledge (Nike)\n- Tim Yao (Nokia)\n- Clint Cain (Optum)",
    "slug": "start-as-experiment"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/service-vs-library.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nService vs. Library\n\n## Patlet\n\nTeams in a DevOps environment may be reluctant to work across team boundaries on\ncommon code bases due to ambiguity over who will be responsible for\nresponding to service downtime. The solution is to realize that often it's\npossible to either deploy the same service in independent environments with\nseparate escalation chains in the event of service downtime or factor a lot of\nshared code out into one library and collaborate on that.\n\n## Problem\n\nWhen teams are working in a DevOps environment developers are responsible for a\nfeature end-to-end: From the customer down to deployment, maintenance and\nsupport. This poses a challenge when working across team boundaries: Escalation\nchains may not be the same for errors happening in either team. Coupling\nsource code and deployment leaves the teams with the question of who is\nresponsible for on-call support in the event of errors. As a result teams are\nreluctant to join forces even if there is significant overlap in requirements.\n\n## Context\n\n* Teams are working in a micro-services environment.\n* They are organised in fully functional DevOps teams: Each team is responsible for their contributions end-to-end, including maintenance, on-call and customer support.\n* A team is tasked with providing a service to their downstream customers that is fairly similar to an existing service built by another team.\n\n## Forces\n\n* Organisational escalation paths may be different for each of the teams.\n* Members of each team may be unwilling to answer on-call support for errors that do not affect their own downstream customers.\n* Severity levels for the same types of errors may be different across team boundaries due to different SLA definitions per team/customer relationship.\n* Teams may have different security or regulatory constraints governing their deployments.\n\n## Solutions\n\nDecouple responsibility for source code from deployment: Both teams work to\nidentify exactly where there is overlap and synergies.\n\nOnly shared source code is kept as part of the InnerSource project with shared responsibility. The shared source should be coherent in that it includes all testing code (including integration tests if available) and as much of the CI pipeline as is possible to make contribution validation easier.\n\nDecouple configuration and deployment pipelines from actual business logic.\nEstablish a second deployment of the service for the second team.\n\nTreat the common base as a library that is used by both teams with shared code\nownership.\n\nDeployment configurations can be included as separate projects in your InnerSource portfolio to allow teams to discuss/collaborate or a new team to copy them.\n\n## Resulting Context\n\nTeams are willing to collaborate, benefitting from sharing the work of\nimplementing the business logic.\n\nA service that originally was built specifically to work in one environment is\nconverted into a more general solution based on a specific business requirement.\n\nBoth teams get to know their respective escalation policy and deployment setup,\npotentially identifying improvements for their own setup.\n\nThe likelihood that changes are needed and made in the shared source code\nincreases, leading to more frequent opportunities to refine, improve and optimise\nthe implementation.\n\nEncourages incremental operational standardisation in release packaging, telemetry, health/readiness endpoints and so on as the teams realise they can more efficiently maintain this in the shared code if they agree on standard conventions.\n\n## See also\n\nRelated to this pattern is the [30 Day Warranty](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/30-day-warranty.md) pattern that takes a different approach to solving the forces described above.\n\n## Known Instances\n\n* Europace AG\n* Flutter Entertainment: A [Flutter InnerSource application](https://innersource.flutter.com/sdlc/) has a shared code \"service\" repository with cross-team contribution and CI pipeline to build and publish a shared release artefact. Each adopting team has a \"deployment config\" repository defining their own deployment. This is driven by varying regulatory requirements, service and incident management practices and infrastructure skill sets in different areas of the business.\n\n## Status\n\n* Structured\n\n## Author(s)\n\n* Isabel Drost-Fromm\n* Rob Tuley\n\n## Acknowledgements\n\nThank you Tobias Gesellchen for review internal to Europace AG.\n\n## Alias\n\nService vs. library: It's inner source, not inner deployment\n",
    "title": "Service vs. Library",
    "patlet": "Teams in a DevOps environment may be reluctant to work across team boundaries on\ncommon code bases due to ambiguity over who will be responsible for\nresponding to service downtime. The solution is to realize that often it's\npossible to either deploy the same service in independent environments with\nseparate escalation chains in the event of service downtime or factor a lot of\nshared code out into one library and collaborate on that.",
    "problem": "When teams are working in a DevOps environment developers are responsible for a\nfeature end-to-end: From the customer down to deployment, maintenance and\nsupport. This poses a challenge when working across team boundaries: Escalation\nchains may not be the same for errors happening in either team. Coupling\nsource code and deployment leaves the teams with the question of who is\nresponsible for on-call support in the event of errors. As a result teams are\nreluctant to join forces even if there is significant overlap in requirements.",
    "context": "* Teams are working in a micro-services environment.\n* They are organised in fully functional DevOps teams: Each team is responsible for their contributions end-to-end, including maintenance, on-call and customer support.\n* A team is tasked with providing a service to their downstream customers that is fairly similar to an existing service built by another team.",
    "forces": "* Organisational escalation paths may be different for each of the teams.\n* Members of each team may be unwilling to answer on-call support for errors that do not affect their own downstream customers.\n* Severity levels for the same types of errors may be different across team boundaries due to different SLA definitions per team/customer relationship.\n* Teams may have different security or regulatory constraints governing their deployments.",
    "solutions": "Decouple responsibility for source code from deployment: Both teams work to\nidentify exactly where there is overlap and synergies.\n\nOnly shared source code is kept as part of the InnerSource project with shared responsibility. The shared source should be coherent in that it includes all testing code (including integration tests if available) and as much of the CI pipeline as is possible to make contribution validation easier.\n\nDecouple configuration and deployment pipelines from actual business logic.\nEstablish a second deployment of the service for the second team.\n\nTreat the common base as a library that is used by both teams with shared code\nownership.\n\nDeployment configurations can be included as separate projects in your InnerSource portfolio to allow teams to discuss/collaborate or a new team to copy them.",
    "resulting_context": "Teams are willing to collaborate, benefitting from sharing the work of\nimplementing the business logic.\n\nA service that originally was built specifically to work in one environment is\nconverted into a more general solution based on a specific business requirement.\n\nBoth teams get to know their respective escalation policy and deployment setup,\npotentially identifying improvements for their own setup.\n\nThe likelihood that changes are needed and made in the shared source code\nincreases, leading to more frequent opportunities to refine, improve and optimise\nthe implementation.\n\nEncourages incremental operational standardisation in release packaging, telemetry, health/readiness endpoints and so on as the teams realise they can more efficiently maintain this in the shared code if they agree on standard conventions.",
    "see_also": "Related to this pattern is the [30 Day Warranty](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/30-day-warranty.md) pattern that takes a different approach to solving the forces described above.",
    "known_instances": "* Europace AG\n* Flutter Entertainment: A [Flutter InnerSource application](https://innersource.flutter.com/sdlc/) has a shared code \"service\" repository with cross-team contribution and CI pipeline to build and publish a shared release artefact. Each adopting team has a \"deployment config\" repository defining their own deployment. This is driven by varying regulatory requirements, service and incident management practices and infrastructure skill sets in different areas of the business.",
    "status": "* Structured",
    "author(s)": "* Isabel Drost-Fromm\n* Rob Tuley",
    "acknowledgements": "Thank you Tobias Gesellchen for review internal to Europace AG.",
    "alias": "Service vs. library: It's inner source, not inner deployment",
    "slug": "service-vs-library"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/review-committee.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nReview Committee\n\n## Patlet\n\nThe InnerSource working model is a radical departure from more traditional approaches, for developers and managers alike. By establishing a review committee as an interface between the InnerSource initiative and all senior managers of business units participating in it, the latter are more likely to familiarise themselves with the initiative and support it, as it affords them a certain level of oversight and control without fostering micromanagement.\n\n## Problem\n\nManagers will perceive the InnerSource working model as a radical departure from the working models they are accustomed to and have experience with. As a consequence, it is likely that they will either reject or micro manage the InnerSource initiative in order to try to minimize the perceived risk of this change. In both cases, the benefits of InnerSource can not be realized. As a result, InnerSource is subsequently discredited.\n\n## Context\n\nCompany A wants to introduce its first InnerSource initiative. Most managers in company A are not familiar with the Open Source working model and are instead accustomed to hierarchical, top-down control style management.\n\n## Forces\n\n - The more perceived control a manager has over the work in the InnerSource initiative, the more likely it is that she or he will support the initiative without prior experience.\n - The less experience a manager has with the open source working model the more likely it is that she or he will want to control the risk of the initiative.\n - The more heavy handed and micro managerial InnerSource initiatives are managed, the less likely it is that the open source working model can be adopted to the required extent. As a result, the benefits of InnerSource will not be realized.\n\n## Solution\n\n- Establish a review committee comprised of senior managers of all business units which participate in the InnerSource initiative.\n- The review committee members are given the authority to decide as a group which InnerSource projects will receive support in general and funding in particular.\n- Applicants can be elected by review committee members before meetings to present their proposed InnerSource project during review committee meetings for consideration.\n- Leaders of InnerSource projects currently funded by the review committee are obliged to report on the status of their project during every review committee meeting.\n- Review committee members are obliged to provide constructive feedback to both new applicants and current project leaders during review committee meetings.\n- Every InnerSource project is to be given the chance to react to feedback received on one session of the review committee until the next session in order to avoid shutting down the project prematurely.\n- An InnerSource project leader can also present the motion to be shut down on its own initiative on a review committee. The review committee then has to decide whether or not the business units using the software need to be given time to put measures in place to ensure that development and/or maintenance of the codebase continues until an alternative solution to development by the InnerSource community is found (if business relevant or mission critical).\n- The review committee should convene regularly. A cadence of two meetings per year has proven successful.\n\n![Review Committee Sketch](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/review-committee-sketch.jpg)\n\n## Resulting Context\n\n- Managers apply a tool they are comfortable with to InnerSource in order to get the required amount of information about and control over the inner workings of the InnerSource initiative. This familiarity will make it more likely for them to sign off on the InnerSource initiative and grant the required degree of freedom for InnerSource projects.\n- Developers can still self organize to a sufficient degree. Micro management does not happen because the review committee convenes rather infrequently.\n\n## Known Instances\n\n* BIOS at Robert Bosch GmbH\n\n## Status\n\n* Structured\n* _Finalized and Reviewed_ as of 8/31/17.\n\n## Authors\n\n- Georg Grütter, Robert Bosch GmbH\n- Diogo Fregonese, Robert Bosch GmbH\n\n## Alias\n\nCheese Interface\n",
    "title": "Review Committee",
    "patlet": "The InnerSource working model is a radical departure from more traditional approaches, for developers and managers alike. By establishing a review committee as an interface between the InnerSource initiative and all senior managers of business units participating in it, the latter are more likely to familiarise themselves with the initiative and support it, as it affords them a certain level of oversight and control without fostering micromanagement.",
    "problem": "Managers will perceive the InnerSource working model as a radical departure from the working models they are accustomed to and have experience with. As a consequence, it is likely that they will either reject or micro manage the InnerSource initiative in order to try to minimize the perceived risk of this change. In both cases, the benefits of InnerSource can not be realized. As a result, InnerSource is subsequently discredited.",
    "context": "Company A wants to introduce its first InnerSource initiative. Most managers in company A are not familiar with the Open Source working model and are instead accustomed to hierarchical, top-down control style management.",
    "forces": "- The more perceived control a manager has over the work in the InnerSource initiative, the more likely it is that she or he will support the initiative without prior experience.\n - The less experience a manager has with the open source working model the more likely it is that she or he will want to control the risk of the initiative.\n - The more heavy handed and micro managerial InnerSource initiatives are managed, the less likely it is that the open source working model can be adopted to the required extent. As a result, the benefits of InnerSource will not be realized.",
    "solution": "- Establish a review committee comprised of senior managers of all business units which participate in the InnerSource initiative.\n- The review committee members are given the authority to decide as a group which InnerSource projects will receive support in general and funding in particular.\n- Applicants can be elected by review committee members before meetings to present their proposed InnerSource project during review committee meetings for consideration.\n- Leaders of InnerSource projects currently funded by the review committee are obliged to report on the status of their project during every review committee meeting.\n- Review committee members are obliged to provide constructive feedback to both new applicants and current project leaders during review committee meetings.\n- Every InnerSource project is to be given the chance to react to feedback received on one session of the review committee until the next session in order to avoid shutting down the project prematurely.\n- An InnerSource project leader can also present the motion to be shut down on its own initiative on a review committee. The review committee then has to decide whether or not the business units using the software need to be given time to put measures in place to ensure that development and/or maintenance of the codebase continues until an alternative solution to development by the InnerSource community is found (if business relevant or mission critical).\n- The review committee should convene regularly. A cadence of two meetings per year has proven successful.\n\n![Review Committee Sketch](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/review-committee-sketch.jpg)",
    "resulting_context": "- Managers apply a tool they are comfortable with to InnerSource in order to get the required amount of information about and control over the inner workings of the InnerSource initiative. This familiarity will make it more likely for them to sign off on the InnerSource initiative and grant the required degree of freedom for InnerSource projects.\n- Developers can still self organize to a sufficient degree. Micro management does not happen because the review committee convenes rather infrequently.",
    "known_instances": "* BIOS at Robert Bosch GmbH",
    "status": "* Structured\n* _Finalized and Reviewed_ as of 8/31/17.",
    "authors": "- Georg Grütter, Robert Bosch GmbH\n- Diogo Fregonese, Robert Bosch GmbH",
    "alias": "Cheese Interface",
    "slug": "review-committee"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/repository-activity-score.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nRepository Activity Score\n\n## Patlet\n\nPotential contributors want to find active InnerSource projects in need of their help. By calculating a repository activity score for each project, a ranked list of projects can be created (e.g. on the [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md)), so that potential contributors can more easily determine which project they want to contribute to.\n\n## Problem\n\n**In which order** shall InnerSource projects be presented? Typical ranking KPIs like *GitHub Stars*, *Number of Forks*, *Number of Commits*, *Lines of Code*,  *Last Update* aren't sufficient to concisely indicate the activity of a project.\n\nActive projects with a lot of traction, but also fairly new and enthusiastic projects that are in need of new contributors should be ranked higher than matured projects with little activity or in maintenance mode.\n\nA new metric derived from several KPIs is needed to define a reliable and versatile score for a project's activity level.\nIt can be used to sort projects according to their activity level.\n\n## Story\n\nWhen InnerSource is practiced for a long time or scales beyond a certain number of projects (let's say 50 to give a meaningful threshold) it is hard to find the currently most popular and active InnerSource projects. Projects that exist for a long time are well-known but may no longer be very active. Fairly new projects on the other hand don't have a reputation or an active community yet.\n\nA list of InnerSource projects should not be considered a static resource, but an exciting place to discover and explore new and active projects, just like a news page listing the most interesting topics of the day first. Thus it is beneficial when the order of the projects is regularly updated and changes according to the project's popularity and activity.\n\nThese considerations led to a first prototype to calculate a repository activity score, which worked surprisingly well and determines an ever-changing order of projects according to their activity.\n\n## Context\n\nDiscovering InnerSource projects can be facilitated with the [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md) and the [Gig Marketplace](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/gig-marketplace.md) pattern, or by promoting projects on other communication channels and platforms. The activity score defines a default order in which projects are presented to the community.\n\n## Forces\n\nAutomated KPIs that can be fetched by querying the GitHub API are only part of the truth. What about code quality, the availability of good documentation, or an active and helping community that makes the project a fun place to contribute?\n\nSuch \"soft\" KPIs would have to be manually or semi-automatically added to the calculation and the resulting score. If tools exist that provide more context for the repository, like a code coverage reporting, they can easily be worked in.\n\n## Sketch\n\n![Ecosystem for the Repository Activity Score](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/repository_activity_score.png)\n\nA centralized approach for calculating and applying the repository activity score. For more details, see [Resulting Context](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/repository-activity-score.md#resulting-context)\n\n## Solutions\n\nThe repository activity score is a numeric value that represents the (GitHub) activity of an InnerSource project. It is derived automatically from repository statistics like GitHub stars, watches, and forks and may be enriched with KPIs from other tools or manual evaluations.\n\nIn addition, it considers activity parameters like last update and creation date of the repo to give young projects with a lot of traction a boost.\nProjects with contributing guidelines, active participation stats, and issues (public backlog) receive a higher ranking as well.\n\nAll of this can be fetched and calculated automatically using the result set of the [GitHub search API](https://docs.github.com/en/rest/search#search-repositories) and [GitHub statistics API](https://docs.github.com/en/rest/metrics/statistics). Other code versioning systems like BitBucket, Gitlab, Gerrit can be integrated as well if a similar API is available.\n\nThe code below assumes the variable `repo` contains an entity fetched from the GitHub `search` API and the `participation` object contains an entity from the GitHub `stats/participation` API.\n\nManual adjustments according to soft KPIs (see [Forces](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/repository-activity-score.md#forces)) can be made on top if needed.\n\n``` javascript\n// calculate a virtual InnerSource score from stars, watches, commits, and issues\nfunction calculateScore(repo) {\n    // initial score is 50 to give active repos with low GitHub KPIs (forks, watchers, stars) a better starting point\n    let iScore = 50;\n    // weighting: forks and watches count most, then stars, add some little score for open issues, too\n    iScore += repo.forks_count * 5;\n    iScore += (repo.subscribers_count ? repo.subscribers_count : 0);\n    iScore += repo.stargazers_count / 3;\n    iScore += repo.open_issues_count / 5;\n\n    // updated in last 3 months: adds a bonus multiplier between 0..1 to overall score (1 = updated today, 0 = updated more than 100 days ago)\n    let iDaysSinceLastUpdate = (new Date().getTime() - new Date(repo.updated_at).getTime()) / 1000 / 86400;\n    iScore = iScore * ((1 + (100 - Math.min(iDaysSinceLastUpdate, 100))) / 100);\n\n    // evaluate participation stats for the previous  3 months\n    repo._InnerSourceMetadata = repo._InnerSourceMetadata || {};\n    if (repo._InnerSourceMetadata.participation) {\n        // average commits: adds a bonus multiplier between 0..1 to overall score (1 = >10 commits per week, 0 = less than 3 commits per week)\n        let iAverageCommitsPerWeek = repo._InnerSourceMetadata.participation.slice(-13).reduce((a, b) => a + b) / 13;\n        iScore = iScore * ((1 + (Math.min(Math.max(iAverageCommitsPerWeek - 3, 0), 7))) / 7);\n    }\n\n    // boost calculation:\n    // all repositories updated in the previous year will receive a boost of maximum 1000 declining by days since last update\n    let iBoost = (1000 - Math.min(iDaysSinceLastUpdate, 365) * 2.74);\n    // gradually scale down boost according to repository creation date to mix with \"real\" engagement stats\n    let iDaysSinceCreation = (new Date().getTime() - new Date(repo.created_at).getTime()) / 1000 / 86400;\n    iBoost *= (365 - Math.min(iDaysSinceCreation, 365)) / 365;\n    // add boost to score\n    iScore += iBoost;\n    // give projects with a meaningful description a static boost of 50\n    iScore += (repo.description?.length > 30 || repo._InnerSourceMetadata.motivation?.length > 30 ? 50 : 0);\n    // give projects with contribution guidelines (CONTRIBUTING.md) file a static boost of 100\n    iScore += (repo._InnerSourceMetadata.guidelines ? 100 : 0);\n    // build in a logarithmic scale for very active projects (open ended but stabilizing around 5000)\n    if (iScore > 3000) {\n        iScore = 3000 + Math.log(iScore) * 100;\n    }\n    // final score is a rounded value starting from 0 (subtract the initial value)\n    iScore = Math.round(iScore - 50);\n    // add score to metadata on the fly\n    repo._InnerSourceMetadata.score = iScore;\n\n    return iScore;\n}\n```\n\n## Resulting Context\n\nContributors are free to commit a part of their time to InnerSource project. They may choose to contribute to a project that they depend on for the work in their regular team anyways. However they may also choose to contribute to something completely different, based on their interests and personal development goals.\n\nProjects can be sorted and presented by repository activity score to give a meaningful order in a portal presenting projects to potential new contributors. The score can be calculated on the fly or in a background job that evaluates all projects on a regular basis and stores a list of results.\n\nA crawler that regularly searches all InnerSource repositories (e.g. tagged with a certain [topic](https://github.com/topics) in GitHub) can be a helpful addition as well. It provides a ranked list of projects that can be used as an input for tools like the [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md), a search engine, or an interactive chat bot.\n\n## Rationale\n\nThe repository activity score is a simple calculation based on the GitHub API. It can be fully automated and easily adapted to new requirements.\n\n## Known Instances\n\n* Used in SAP's InnerSource project portal to define the default order of the InnerSource projects. It was first created in July 2020 and is fine-tuned and updated frequently ever since. When proposed to InnerSourceCommons in July 2020, this pattern emerged. Also see [Michael Graf & Harish B (SAP) at ISC.S11 - The Unexpected Path of Applying InnerSource Patterns](https://www.youtube.com/watch?v=6r9QOw9dcQo&list=PLCH-i0B0otNQZQt_QzGR9Il_kE4C6cQRy&index=6).\n\n## Status\n\n* Structured\n\n## Author(s)\n\n[Michael Graf (SAP)](mailto:mi.graf@sap.com)\n\n## Acknowledgements\n\nThank you to the InnerSource Commons Community for lightning-fast advice, and a lot of helpful input to feed this pattern! Especially:\n\n* Johannes Tigges\n* Sebastian Spier\n* Maximilian Capraro\n* Tim Yao\n",
    "title": "Repository Activity Score",
    "patlet": "Potential contributors want to find active InnerSource projects in need of their help. By calculating a repository activity score for each project, a ranked list of projects can be created (e.g. on the [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md)), so that potential contributors can more easily determine which project they want to contribute to.",
    "problem": "**In which order** shall InnerSource projects be presented? Typical ranking KPIs like *GitHub Stars*, *Number of Forks*, *Number of Commits*, *Lines of Code*,  *Last Update* aren't sufficient to concisely indicate the activity of a project.\n\nActive projects with a lot of traction, but also fairly new and enthusiastic projects that are in need of new contributors should be ranked higher than matured projects with little activity or in maintenance mode.\n\nA new metric derived from several KPIs is needed to define a reliable and versatile score for a project's activity level.\nIt can be used to sort projects according to their activity level.",
    "story": "When InnerSource is practiced for a long time or scales beyond a certain number of projects (let's say 50 to give a meaningful threshold) it is hard to find the currently most popular and active InnerSource projects. Projects that exist for a long time are well-known but may no longer be very active. Fairly new projects on the other hand don't have a reputation or an active community yet.\n\nA list of InnerSource projects should not be considered a static resource, but an exciting place to discover and explore new and active projects, just like a news page listing the most interesting topics of the day first. Thus it is beneficial when the order of the projects is regularly updated and changes according to the project's popularity and activity.\n\nThese considerations led to a first prototype to calculate a repository activity score, which worked surprisingly well and determines an ever-changing order of projects according to their activity.",
    "context": "Discovering InnerSource projects can be facilitated with the [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md) and the [Gig Marketplace](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/gig-marketplace.md) pattern, or by promoting projects on other communication channels and platforms. The activity score defines a default order in which projects are presented to the community.",
    "forces": "Automated KPIs that can be fetched by querying the GitHub API are only part of the truth. What about code quality, the availability of good documentation, or an active and helping community that makes the project a fun place to contribute?\n\nSuch \"soft\" KPIs would have to be manually or semi-automatically added to the calculation and the resulting score. If tools exist that provide more context for the repository, like a code coverage reporting, they can easily be worked in.",
    "sketch": "![Ecosystem for the Repository Activity Score](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/repository_activity_score.png)\n\nA centralized approach for calculating and applying the repository activity score. For more details, see [Resulting Context](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/repository-activity-score.md#resulting-context)",
    "solutions": "The repository activity score is a numeric value that represents the (GitHub) activity of an InnerSource project. It is derived automatically from repository statistics like GitHub stars, watches, and forks and may be enriched with KPIs from other tools or manual evaluations.\n\nIn addition, it considers activity parameters like last update and creation date of the repo to give young projects with a lot of traction a boost.\nProjects with contributing guidelines, active participation stats, and issues (public backlog) receive a higher ranking as well.\n\nAll of this can be fetched and calculated automatically using the result set of the [GitHub search API](https://docs.github.com/en/rest/search#search-repositories) and [GitHub statistics API](https://docs.github.com/en/rest/metrics/statistics). Other code versioning systems like BitBucket, Gitlab, Gerrit can be integrated as well if a similar API is available.\n\nThe code below assumes the variable `repo` contains an entity fetched from the GitHub `search` API and the `participation` object contains an entity from the GitHub `stats/participation` API.\n\nManual adjustments according to soft KPIs (see [Forces](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/repository-activity-score.md#forces)) can be made on top if needed.\n\n``` javascript\n// calculate a virtual InnerSource score from stars, watches, commits, and issues\nfunction calculateScore(repo) {\n    // initial score is 50 to give active repos with low GitHub KPIs (forks, watchers, stars) a better starting point\n    let iScore = 50;\n    // weighting: forks and watches count most, then stars, add some little score for open issues, too\n    iScore += repo.forks_count * 5;\n    iScore += (repo.subscribers_count ? repo.subscribers_count : 0);\n    iScore += repo.stargazers_count / 3;\n    iScore += repo.open_issues_count / 5;\n\n    // updated in last 3 months: adds a bonus multiplier between 0..1 to overall score (1 = updated today, 0 = updated more than 100 days ago)\n    let iDaysSinceLastUpdate = (new Date().getTime() - new Date(repo.updated_at).getTime()) / 1000 / 86400;\n    iScore = iScore * ((1 + (100 - Math.min(iDaysSinceLastUpdate, 100))) / 100);\n\n    // evaluate participation stats for the previous  3 months\n    repo._InnerSourceMetadata = repo._InnerSourceMetadata || {};\n    if (repo._InnerSourceMetadata.participation) {\n        // average commits: adds a bonus multiplier between 0..1 to overall score (1 = >10 commits per week, 0 = less than 3 commits per week)\n        let iAverageCommitsPerWeek = repo._InnerSourceMetadata.participation.slice(-13).reduce((a, b) => a + b) / 13;\n        iScore = iScore * ((1 + (Math.min(Math.max(iAverageCommitsPerWeek - 3, 0), 7))) / 7);\n    }\n\n    // boost calculation:\n    // all repositories updated in the previous year will receive a boost of maximum 1000 declining by days since last update\n    let iBoost = (1000 - Math.min(iDaysSinceLastUpdate, 365) * 2.74);\n    // gradually scale down boost according to repository creation date to mix with \"real\" engagement stats\n    let iDaysSinceCreation = (new Date().getTime() - new Date(repo.created_at).getTime()) / 1000 / 86400;\n    iBoost *= (365 - Math.min(iDaysSinceCreation, 365)) / 365;\n    // add boost to score\n    iScore += iBoost;\n    // give projects with a meaningful description a static boost of 50\n    iScore += (repo.description?.length > 30 || repo._InnerSourceMetadata.motivation?.length > 30 ? 50 : 0);\n    // give projects with contribution guidelines (CONTRIBUTING.md) file a static boost of 100\n    iScore += (repo._InnerSourceMetadata.guidelines ? 100 : 0);\n    // build in a logarithmic scale for very active projects (open ended but stabilizing around 5000)\n    if (iScore > 3000) {\n        iScore = 3000 + Math.log(iScore) * 100;\n    }\n    // final score is a rounded value starting from 0 (subtract the initial value)\n    iScore = Math.round(iScore - 50);\n    // add score to metadata on the fly\n    repo._InnerSourceMetadata.score = iScore;\n\n    return iScore;\n}\n```",
    "resulting_context": "Contributors are free to commit a part of their time to InnerSource project. They may choose to contribute to a project that they depend on for the work in their regular team anyways. However they may also choose to contribute to something completely different, based on their interests and personal development goals.\n\nProjects can be sorted and presented by repository activity score to give a meaningful order in a portal presenting projects to potential new contributors. The score can be calculated on the fly or in a background job that evaluates all projects on a regular basis and stores a list of results.\n\nA crawler that regularly searches all InnerSource repositories (e.g. tagged with a certain [topic](https://github.com/topics) in GitHub) can be a helpful addition as well. It provides a ranked list of projects that can be used as an input for tools like the [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md), a search engine, or an interactive chat bot.",
    "rationale": "The repository activity score is a simple calculation based on the GitHub API. It can be fully automated and easily adapted to new requirements.",
    "known_instances": "* Used in SAP's InnerSource project portal to define the default order of the InnerSource projects. It was first created in July 2020 and is fine-tuned and updated frequently ever since. When proposed to InnerSourceCommons in July 2020, this pattern emerged. Also see [Michael Graf & Harish B (SAP) at ISC.S11 - The Unexpected Path of Applying InnerSource Patterns](https://www.youtube.com/watch?v=6r9QOw9dcQo&list=PLCH-i0B0otNQZQt_QzGR9Il_kE4C6cQRy&index=6).",
    "status": "* Structured",
    "author(s)": "[Michael Graf (SAP)](mailto:mi.graf@sap.com)",
    "acknowledgements": "Thank you to the InnerSource Commons Community for lightning-fast advice, and a lot of helpful input to feed this pattern! Especially:\n\n* Johannes Tigges\n* Sebastian Spier\n* Maximilian Capraro\n* Tim Yao",
    "slug": "repository-activity-score"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/praise-participants.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nPraise Participants\n\n## Patlet\n\nAfter an inner source contribution, it's important to thank the contributor for their time and effort.\nThis pattern gives guidance that not only effectively acknowledges the contribution but also engenders further engagement from the contributor and others.\n\n## Problem\n\nHow can we properly express our gratitude to a contributor for their inner source contribution to a project?\nIt can be easy to forget to do so or not know the words or medium to use for adequate effect and sincerity.\nPraise and thanks are easy, affordable ways to keep contributors and their managers motivated and excited to continue.\nA pattern in this area makes it easy to do and ensures that the message comes across clearly and sincerely.\n\n## Context\n\n* You are the [Trusted Committer](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) or maintainer on an inner source project.\n* You value the community of contributors and want to maintain and grow it.\n\n## Forces\n\n* You are busy, which makes it easy to forget some soft touches like praise and thanks.\n* You may not be someone that is comfortable in social situations or good with words.\n* Peer recognition is very important to job satisfaction and career development.\n\n## Solutions\n\nIt feels good to anyone to be recognized by others.\nIn a professional setting, increased recognition is also an avenue to increased influence and growth.\nAny time someone gives to your inner source project, recognize them with a sincere and qualified \"thank you\".\n\nFor non-trivial contributions (all code contributions and significant time contributions), say thank you via the following mechanisms:\n\n(1) Call out the person by name in any chat location (e.g. _Slack_) where you organize your project activity.  Let everyone know what they did and thank them publicly.  \n\nExample:\n\n> Everyone @here give a high-five to @andrew.clegg for updating the _rcs-viewer_ to the latest version of the _hebo-client_ (https://github.com/rcs/rcs-viewer/pull/81).\nThanks for helping keep this library up-to-date, Andy!\n\n(2) Email them and their manager (cc'd) privately thanking them for the contribution.\nFor code contributions often-times you can just forward the merge notification mail.\n\nExample:\n\n> Hi, Andy, I want to thank you again for making this update.\nIt may have been a small amount of time, but it's attention like this from each person that make the RCS project work for all of us.\nThanks for solving your own problem in a way that also makes the _rcs-viewer_ better for everyone.\n\n## Resulting Context\n\nFeedback like this leaves the contributor with a fantastic feeling and ready to come back for more.\nCombining **both** forms of thanks gives them recognition in front of their peers (breadth) and in front of their direct manager (depth).\nThere's a subtle encouragement for those peers in chat to consider contributing themselves and for that manager to look for appropriate circumstances to encourage their other direct reports to do the same.\nAdditionally, awareness of the inner source project spreads to the manager, who may have previously not known of the team's use and involvement with it.\n\nOne caveat - keep it real.\nMake sure that your words stem from the sincere thanks that you feel inside for what they've done.\nKeep the level and verbosity of praise appropriate to their level of involvement.\nOverdoing it may feel insincere and mechanical and defeat your purpose in reaching out.\n\n## Related Patterns\n\n* _Just Say Thanks_ (from the book [_Fearless Change_](https://fearlesschangepatterns.com/))\n\n## Known Instances\n\n* Nike (multiple projects)\n\n## Status\n\n* Structured\n\n## Author(s)\n\n* Russ Rutledge\n\n## Acknowledgements\n\n* [Todd Lisonbee](https://github.com/tlisonbee) for encouraging to \"keep it real\".\n* [Isabel Drost-Fromm](https://github.com/MaineC) for [this extra explanation](https://youtu.be/h3MPewsk5PU?t=357) of a \"qualified\" thank you.\n",
    "title": "Praise Participants",
    "patlet": "After an inner source contribution, it's important to thank the contributor for their time and effort.\nThis pattern gives guidance that not only effectively acknowledges the contribution but also engenders further engagement from the contributor and others.",
    "problem": "How can we properly express our gratitude to a contributor for their inner source contribution to a project?\nIt can be easy to forget to do so or not know the words or medium to use for adequate effect and sincerity.\nPraise and thanks are easy, affordable ways to keep contributors and their managers motivated and excited to continue.\nA pattern in this area makes it easy to do and ensures that the message comes across clearly and sincerely.",
    "context": "* You are the [Trusted Committer](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) or maintainer on an inner source project.\n* You value the community of contributors and want to maintain and grow it.",
    "forces": "* You are busy, which makes it easy to forget some soft touches like praise and thanks.\n* You may not be someone that is comfortable in social situations or good with words.\n* Peer recognition is very important to job satisfaction and career development.",
    "solutions": "It feels good to anyone to be recognized by others.\nIn a professional setting, increased recognition is also an avenue to increased influence and growth.\nAny time someone gives to your inner source project, recognize them with a sincere and qualified \"thank you\".\n\nFor non-trivial contributions (all code contributions and significant time contributions), say thank you via the following mechanisms:\n\n(1) Call out the person by name in any chat location (e.g. _Slack_) where you organize your project activity.  Let everyone know what they did and thank them publicly.  \n\nExample:\n\n> Everyone @here give a high-five to @andrew.clegg for updating the _rcs-viewer_ to the latest version of the _hebo-client_ (https://github.com/rcs/rcs-viewer/pull/81).\nThanks for helping keep this library up-to-date, Andy!\n\n(2) Email them and their manager (cc'd) privately thanking them for the contribution.\nFor code contributions often-times you can just forward the merge notification mail.\n\nExample:\n\n> Hi, Andy, I want to thank you again for making this update.\nIt may have been a small amount of time, but it's attention like this from each person that make the RCS project work for all of us.\nThanks for solving your own problem in a way that also makes the _rcs-viewer_ better for everyone.",
    "resulting_context": "Feedback like this leaves the contributor with a fantastic feeling and ready to come back for more.\nCombining **both** forms of thanks gives them recognition in front of their peers (breadth) and in front of their direct manager (depth).\nThere's a subtle encouragement for those peers in chat to consider contributing themselves and for that manager to look for appropriate circumstances to encourage their other direct reports to do the same.\nAdditionally, awareness of the inner source project spreads to the manager, who may have previously not known of the team's use and involvement with it.\n\nOne caveat - keep it real.\nMake sure that your words stem from the sincere thanks that you feel inside for what they've done.\nKeep the level and verbosity of praise appropriate to their level of involvement.\nOverdoing it may feel insincere and mechanical and defeat your purpose in reaching out.",
    "related_patterns": "* _Just Say Thanks_ (from the book [_Fearless Change_](https://fearlesschangepatterns.com/))",
    "known_instances": "* Nike (multiple projects)",
    "status": "* Structured",
    "author(s)": "* Russ Rutledge",
    "acknowledgements": "* [Todd Lisonbee](https://github.com/tlisonbee) for encouraging to \"keep it real\".\n* [Isabel Drost-Fromm](https://github.com/MaineC) for [this extra explanation](https://youtu.be/h3MPewsk5PU?t=357) of a \"qualified\" thank you.",
    "slug": "praise-participants"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/maturity-model.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nMaturity Model\n\n## Patlet\n\nTeams have started adopting InnerSource. The practice is spreading to multiple\ndepartments. However, the understanding of what constitutes an InnerSource\nproject varies. The solution is to provide a maturity model to allow for teams\nto go through a self check and discover patterns and practices that they are not\nyet aware of.\n\n## Problem\n\nWhen InnerSource adoption in an enterprise starts to increase, individual\nmentoring of each project through one evangelist becomes unfeasible. Also, more\nand more people are gaining at least a basic understanding of what it means to\nwork in an InnerSource project. Looking at all InnerSource projects though the\ndepth of understanding for the concept will diverge. Teams may not be aware of\nproven patterns that would help them move to the next level and solve issues and\npain points that they are dealing with.\n\n## Context\n\nSeveral teams have started adopting InnerSource practices. The exact level of\nunderstanding of the practice diverges between teams. The exact problems teams\nrun into diverge depending on the context and working environment of each team.\nAs a result the definition of what are important best practices in an\nInnerSource project differs depending on each team.\n\n## Forces\n\nTeams sharing InnerSource learnings run into misunderstandings as they are not\naware of their respective level of InnerSource adoption.\n\nTeams believe that \"it's all about migrating to a shared software development\n[forge](https://en.wikipedia.org/wiki/Forge_%28software%29)\" (GitLab, GitHub, or Bitbucket being well known examples of such forges).\n\nTeams are not aware of best practices that would help them solve issues that\nthey run into in their daily doing.\n\n## Solution\n\nAsk teams to self assess against the proposed maturity model.\n\n### Transparency\n\n**Plans & Products**\n\nInnerSource project benefit from planning being transparent across the organization by enabling stakeholders to better understand decisions and influence them in a way that can be followed by others.\n\n* PP-0: Individuals and teams do not regularly disclose their plans or products to multiple stakeholders. No formal actions exists at the organization.\n* PP-1: Individuals and teams give visibility to their plans or products to multiple stakeholders, before they are started. Shared roadmap.\n* PP-2: There are already shared roadmaps with clear guidelines and contribution rules where stakeholders can provide feedback. However, this is not standardized across the organization and not all of the projects provide this info.\n* PP-3: Roadmaps are shared by default and there is a standard process and homogeneous way to do this across the organization at the level of each InnerSource project. This contains clear rules to contribute and influence in the roadmap.\n\n**Development Process & Tools**\n\nInnerSource projects thrive when contributors become active and participate. As a result, making contribution easier should be balanced with pure technical goals.\n\n* DP-0: Each team follows its own development process and tools. They are not defined to share knowledge and artifacts outside development team. Siloed development teams.\n* DP-1: Development teams use shared code repositories, internally. Some teams develop their own CI process, using non corporate or standard CI tools. There is no code review process defined, although some projects teams do it internally.\n* DP-2: The organization sponsors and promotes a shared repository for collective knowledge. Some teams develop their own CI process, using corporate CI tools. There are CI environments. Code review process defined, and used by some projects. Sometimes code review is done by outside team members.\n* DP-3: Most teams develop their own CI process, using corporate CI tools. There are CI environments. Code review process defined, and used. Code review is done by both, internal and external team members.\n\n**Decisions**\n\nIn order to motivate colleagues to contribute work outside of their core team they need visibility into the decision-making process of the host project - but also feel that their voices are being heard and valued.\n\n* DC-0: Decision-makers often intentionally or accidentally withhold data and resources related to project decisions.\n* DC-1: Materials that are part of decision-making practices become available for review after decisions are finalized.\n* DC-2: People feel like they know about—and are helping to shape—most (but not all) important decisions as those decisions are unfolding. Materials that are part of decision-making practices are available at defined project milestones.\n* DC-3: People feel like they are a part of a shared, standard process for collective decision-making that the organization endorses. Materials that are part of decision-making practices are continuously accessible during work processes.\n\n**Helpful Resources**\n\nIn order to attract contributors helpful supporting material needs to be easily accessible.\n\n* RS-0: Individuals and teams neither contribute to nor draw upon a shared repository of knowledge.\n* RS-1: Individuals and teams release project materials for review internally, after they've finished their work. Individuals and teams share resources, but in disconnected, fragmented, or individualized/siloed systems or repositories. Individuals and teams share resources, but there is no commonly expressed or shared understanding of the criteria used to determine whether information is sensitive or not. Do not \"share thinking on others\".\n* RS-2: Individuals and teams make project-related materials accessible to some members of project teams according to clearly defined and shared formats and/or protocols. Individuals and teams withhold sensitive data and resources, provide limited details, context, and scope.\n* RS-3: Individuals and teams make project-related materials broadly accessible to the organization—and possibly outside the organization as well—according to clearly defined and shared formats and/or protocols. Individuals and teams who must withhold sensitive data and resources are clear about what they're not sharing, and others understand why those materials are not available to them.\n\n**Stories**\n\nWhen working in host teams mistakes will automatically be widely visible. In order keep contribution levels up, corporate culture needs to celebrate failure as an opportunity for growth and learning.\n\n* ST-0: Individuals and teams do not share successes or failures for others to learn.\n* ST-1: Individuals and teams are comfortable sharing stories about successes, but not about failures.\n* ST-2: Individuals and teams are comfortable sharing stories of successes and failures during retrospectives and reviews.\n* ST-3: Individuals and teams are comfortable sharing stories of successes and failures, and learn from failures according to formal protocols.\n\n### Collaboration\n\n**Channels for Providing Feedback**\n\nFor silos to be reduced colleagues need to be comfortable sharing feedback openly. One easy way to support that is to use the same communication principles across hierarchies.\n\nIdeally you will end up with proper communication channels that are known by anyone in the organization - with channels focussed on different goals (announcements, user support, development channels, infra discussions, etc.). Some of the best practices you will establish as your InnerSource projects mature: Adoption of netiquette guidelines, opening a proven set of standard channels (which are being archived, publicly accessible, searchable) for each new InnerSource project.\n\n* CF-0: There are no processes nor established channels. Some members of the organization share materials via private channels or discussions.\n* CF-1: The organization is in the process of establishing internal guidelines and channels for encouraging diverse points of view about company/departmental decisions, so that anyone belonging to the organization can use them. Some members of the organization share decision-making materials informally using unofficial platforms. Leaders maintain at least one clear and direct channel for organization members to share opinions constructively on some matters relevant to their work.\n* CF-2: The organization has established internal guidelines and channels, and provides specific resources (training programs, access to content, etc.), for encouraging and soliciting diverse points of view on team or decisions.\n* CF-3: Members of the organization share decision-making materials on officially sanctioned platforms Members of the organization share materials openly via multiple channels and methods for feedback.\nLeaders use those channels themselves, openly encourage others to use them, and maintain team-facing or public-facing records of the feedback they've received and/or the actions they've taken to address this feedback.\n\n**Leadership**\n\nInnerSource projects encourage employees to contribute to projects outside of the direct influence of their direct line manager. This needs a culture of trust.\n\n* LS-0: Command & control culture, within a highly hierarchical organization.\n* LS-1: Some leaders are open to receiving feedback and creating an environment where people feel safe providing it.\n* LS-2: Most leaders in the organization are open to receiving feedback and creating an environment where people feel safe providing it. Leaders show passivity about understanding whether all members feel empowered and enabled to share. Organization encourages leaders to actively seek voices not present in dialog out for inclusion.\n* LS-3: Members feel empowered and enabled to share opinions constructively on any matter relevant to their work or about which they feel passionate.\n\n**Organizational and Functional Structure**\n\nWhen InnerSource leaves the pure coding level and enters the community and working group level, there is potential for reducing silos even where direct code collaboration is not possible.\n\n* OF-0: Working groups tend to be static in terms of membership and skill sets.\n* OF-1: Cross-functional teams exist, but team roles are often unclear and governance structures are vague.\n* OF-2: Cross-functional teams are common, and teams post their roles and goals publicly.\n* OF-3: Cross-functional teams are common and make their activities known broadly to the organization; in turn, the organization promotes best practices for working together.\n\n**Contribution**\n\nThe goal with designing contributions patterns needs to keep collaboration in mind if it's to reduce silos.\n\n* CB-0: Completely siloed, no collaboration outside the teams. Just some collaborations due to cross-functional teams.\n* CB-1: Members of the organization and teams collaborate but frequently say it's \"too difficult\". Teams infrequently revisit the outcomes of their collaborations.\n* CB-2: Members of the organization and teams actively seek opportunities to collaborate. Teams routinely discuss, revisit and debate the outcomes of their collaborative efforts, and make these outcomes available by default.\n* CB-3: Members of the organization collaborate both internally and externally in ways that benefit all involved. Teams routinely discuss, revisit and debate the outcomes of their collaborative efforts, and share their learnings outside the organization, and make these outcomes externally available by default.\n\n### Community\n\n**Sharing Policies**\n\nHaving a baseline of shared values makes it easier to work across team boundaries. Crossing boundaries becomes easier if a limited set of baseline rules and guidelines apply everywhere and can easily be referenced.\n\n* SP-0: No sharing culture nor written policies.\n* SP-1: Some members of the organization unite to define values and principles, but are not clearly supported when they do.\n* SP-2: Members of the organization collectively document shared visions and agreements like mission statements and codes of conduct, make them easily accessible, and reference them often. Onboarding materials and orientation rituals provide adequate context for helping new members understand how the organization will benefit from their contributions.\n* SP-3: Shared values and principles inform decision-making, conflict resolution, and assessment processes among members of the organization, who reference these values and principles consistently in both verbal and written formats.\n\n**Feel part of the Organization**\n\nOne of the possible reasons for introducing InnerSource into organisations can be increased engagement. This point tracks how engagement is changing while adopting InnerSource.\n\n* PA-0: Low engagement, no collaboration and people do not feel comfortable sharing with others.\n* PA-1: Members of the organization feel comfortable sharing their thoughts and opinions without fear of retribution, but only in familiar domains. People understand that the best ideas win, and leadership responsibilities accrue to people with histories of contribution and commitment.\n* PA-2: Members of the organization feel comfortable sharing their thoughts and opinions without fear of retribution. Leaders demonstrate dedication to the organization's shared values.\n* PA-3: The organization is proactive in telling members that it benefits from their contributions; as such, members demonstrate shared consciousness and empowered execution, and feel a sense of responsibility to the community. Leaders understand that they grow by helping others grow, and they mentor junior members of the organization.\n\n### Governance\n\n**Rewards**\n\nIn order to drive adoption, extrinsic motivators can be used to increase cross team collaboration.\n\n* RW-0: No rewards.\n* RW-1: Leaders are encouraged to reward exceptional collaborations, but there are no policies or processes established.\n* RW-2: Standard processes are established to reward collaborations outside the developers' teams. Team leaders or boards decide who has to be rewarded.\n* RW-3: Rewards are not only proposed by the organization, but the communities are able to define their more valuable rewards. The community is responsible to decide who has to be rewarded.\n\n**Monitoring Policies**\n\nInnerSource projects need a means for self assessment. Metrics can be one aspect to facilitate this assessment. Also, in organisations with a mature InnerSource adoption level we expect adoption of the method to be tracked based on clear, agreed upon metrics.\n\n* MP-0: No existing monitoring policies at any level in the organization.\n* MP-1: Metrics are important for certain teams, and they start using them in an isolated way.\n* MP-2: There is a strategy at the organizational level with respect to metrics that help to validate specific policies across the organization. This monitoring policy exists at the level of some InnerSource projects.\n* MP-3: There are clear guidelines, recommendations, and trainings about the use of metrics with certain infrastructure provided by the organization. This works at both levels: InnerSource program to understand the general InnerSource adoption within the organization, and at the level of InnerSource projects.\n\n**Support and Maintenance**\n\nNot only should feature development be owned by InnerSource teams - support and maintenance is also part of the teams core tasks.\n\n* SM-0: Support given by the core dev or support team. A business contract guaranties the support. There is no knowledge about the product outside the team.\n* SM-1: There are rules and regulations to formalize the support on the product, given by a dedicated supporting team.\n* SM-2: Support for InnerSource contributions is formalized through InnerSource patterns like [30 Day Warranty](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/30-day-warranty.md) or [Service vs. Library](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/service-vs-library.md).\n* SM-3: There are rules and regulations to formalize the support on the product, given by a mature community.\n\n**Culture**\n\nThere are multiple levels moving towards a collaborative culture.\n\n* CL-0: Silos - teams work independently but also in isolation.\n* CL-1: Reactive - teams work independently, but know how to react to flaws in dependencies.\n* CL-2: Contributive - teams actively help improve their dependencies by contributing.\n* CL-3: Activist - teams actively seek help, mentor and recruit new contributors.\n\n**InnerSource Roles**\n\nInnerSource comes with explicit roles. While in early stages some patterns may be useable without adopting those roles, communicating within projects using explicit role titles becomes easier.\n\n* RO-0: There are no specific roles helping InnerSource adoption. Only common development roles are present: developer, analyst, tester, etc.\n* RO-1: Occasionally some individuals and teams contribute to other projects. These are technical contributions, where the user/contributor role is seen. For some teams, it can be identified at least one member being a technical reference, who explains the development process to other development team members. He/she could be a candidate for covering the trusted committer role.\n* RO-2: An InnerSource Officer role is in charge of governance and support, including processes, etc. Identifies the education needs and ensures it is provided to the organization. Leads and mentors the organization in the engagement in IS projects. Is the first formal step in the way, defining the IS vision and roadmap. The organization has defined a trusted committer role, being a point of contact/reference not only for dev team members but also for external contributors. There is a standard process describing how to contribute to the community, contributor role is present. Data Scientist role is in charge of managing the traces of activity left by the InnerSource initiative, needed to measure the IS evolution. Trusted committer role will evolve to a more technical profile, and a community manager will be in charge of \"energizing\" the community, being his main responsibility to attract and retain new developers/users (contributors/community members).\n* RO-3: Evangelists are moving inside organization, to let others know about the current work, what InnerSource does and how to do it, and help others to understand and become part of the initiative. Non technical contributors appear.\n\n## Resulting Context\n\nAll teams are aware of available best practices.\n\nTeams understand their level of InnerSource adoption.\n\nPrior to adopting InnerSource as a working model, teams are aware of the\npractices that are expected of them - both in the short term and in the\nlong term.\n\n## Known Instances\n\n* Entelgy\n* Zylk\n* Bitergia\n\n## Authors\n\n* Daniel Izquierdo Cortazar\n* Isabel Drost-Fromm\n* Jorge\n* Nerea\n\n## Acknowledgements\n\n* Alexander Andrade (special thanks for the spelling fixes)\n\n## Alias\n\nMaturity model: Learn about InnerSource best practices\n\n## Status\n\n* Structured\n* Drafted in September 2019\n",
    "title": "Maturity Model",
    "patlet": "Teams have started adopting InnerSource. The practice is spreading to multiple\ndepartments. However, the understanding of what constitutes an InnerSource\nproject varies. The solution is to provide a maturity model to allow for teams\nto go through a self check and discover patterns and practices that they are not\nyet aware of.",
    "problem": "When InnerSource adoption in an enterprise starts to increase, individual\nmentoring of each project through one evangelist becomes unfeasible. Also, more\nand more people are gaining at least a basic understanding of what it means to\nwork in an InnerSource project. Looking at all InnerSource projects though the\ndepth of understanding for the concept will diverge. Teams may not be aware of\nproven patterns that would help them move to the next level and solve issues and\npain points that they are dealing with.",
    "context": "Several teams have started adopting InnerSource practices. The exact level of\nunderstanding of the practice diverges between teams. The exact problems teams\nrun into diverge depending on the context and working environment of each team.\nAs a result the definition of what are important best practices in an\nInnerSource project differs depending on each team.",
    "forces": "Teams sharing InnerSource learnings run into misunderstandings as they are not\naware of their respective level of InnerSource adoption.\n\nTeams believe that \"it's all about migrating to a shared software development\n[forge](https://en.wikipedia.org/wiki/Forge_%28software%29)\" (GitLab, GitHub, or Bitbucket being well known examples of such forges).\n\nTeams are not aware of best practices that would help them solve issues that\nthey run into in their daily doing.",
    "solution": "Ask teams to self assess against the proposed maturity model.",
    "resulting_context": "All teams are aware of available best practices.\n\nTeams understand their level of InnerSource adoption.\n\nPrior to adopting InnerSource as a working model, teams are aware of the\npractices that are expected of them - both in the short term and in the\nlong term.",
    "known_instances": "* Entelgy\n* Zylk\n* Bitergia",
    "authors": "* Daniel Izquierdo Cortazar\n* Isabel Drost-Fromm\n* Jorge\n* Nerea",
    "acknowledgements": "* Alexander Andrade (special thanks for the spelling fixes)",
    "alias": "Maturity model: Learn about InnerSource best practices",
    "status": "* Structured\n* Drafted in September 2019",
    "slug": "maturity-model"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nInnerSource Portal\n\n## Patlet\n\nPotential contributors cannot easily discover InnerSource projects that they are interested in. By creating an intranet website that indexes all available InnerSource project information you enable contributors to learn about projects that might interest them and InnerSource project owners to attract an outside audience.\n\n## Problem\n\nInnerSource project teams are finding it difficult to attract outside contributions.\n\nInnerSource projects at your organization are increasing but potential contributors have no easy way of discovering them.\n\n## Story\n\nYou are attempting to establish an InnerSource practice within your organization.  You are aware of some projects being run using an InnerSource model but their existence is only being communicated via word of mouth, email or sidebar conversations with other employees.  As a result InnerSource project owners are finding it difficult to attract contributors.  \n\nThere is no single, shared resource for employees across the organization to access which will allow them to easily discover all ongoing InnerSource projects.  This is severely limiting the growth potential of every InnerSource project.  \n\nWhat can be done to help all InnerSource projects raise their visibility to as large an audience as possible and attract contributors organization-wide?\n\n## Context\n\n* Your organization is interested in adopting an InnerSource work style.\n* InnerSource project owners are seeking a way to attract audiences to their projects. However, they are limited by the communication channels available to them through which they could advertise to potential contributors.\n* InnerSource projects at your organization are increasing.\n* Compounding this problem is the fact that the shared source control management application in use has such limited search capabilities that even developers in search of InnerSource projects find it frustrating to locate them.\n\n### Prerequisites\n\n* Managers have given tacit acceptance that their employees should take part in InnerSource projects\n* A shared source control management system is in use which provides programmatic access to the contents of the repositories it hosts\n* There is a department within your organization with the responsibility of promoting InnerSource collaboration\n\n## Forces\n\n* The full potential for separate engineering teams to partner on shared challenges is not being realized\n* It is difficult for individuals to discover what InnerSource projects exist\n* It is difficult for InnerSource project owners to attract an audience of external contributors\n\n## Solutions\n\nCreate an InnerSource Portal intranet website where InnerSource project owners can easily advertise the availability of their projects.\n\nKey properties of the portal are:\n\n* Visitors to the InnerSource Portal should be able to see all available projects as well as search for specific projects based on various criteria such as project name, technologies in use, contributor names, sponsoring business unit etc.  \n* The information displayed via the InnerSource Portal should be under the full control of the InnerSource project owners at all times.  Preferably, by sourcing this information directly from a specific data file or meta-data stored in the project repository itself.  \n* Project owners should include all relevant information concerning their projects within those data files including the project name, trusted contributors' names, a brief description and links to the code repository or any supporting documentation.  \n* (optional) While most organizations will choose to make their portal only available on their intranet, some organizations have opted to make their portal available on the public internet. The latter can be interesting for organizations that want to show additional information about their InnerSource approach in their portal e.g. for branding and recruitment purposes.\n\nWhen launching the portal, a communications campaign promoting the addition of InnerSource data files or meta-data to code repositories should be considered, to bolster the number of projects displayed within the portal.\n\nA [reference implementation](https://github.com/SAP/project-portal-for-innersource) of an InnerSource portal is available on GitHub and open for contributions. It lists all InnerSource projects of an organization in an interactive and easy to use way. Projects can self-register using a dedicated GitHub topic and provide additional metadata.\n\n![Example of an InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/portal-overview.png \"Example of an InnerSource Portal\")\n\n## Resulting Context\n\n* The InnerSource Portal has enabled InnerSource project owners to advertise their projects to an organization-wide audience.  Due to this increased visibility they are attracting much larger communities of contributors than ever before.\n* For those looking to get involved in InnerSource projects, the InnerSource Portal has allowed them to discover exactly the kind of opportunities they are interested in by searching across all available InnerSource projects simultaneously based on their specific criteria.\n* Satisfying the needs of both of these audiences has helped establish InnerSource as a viable and attractive option for all areas of the organization to leverage to accomplish things together they could not have separately.\n\n## Known Instances\n\n* **A large financial services organization** has used the creation of an InnerSource Portal to provide a mechanism of advertising and discovering InnerSource projects in existence across different business units\n* **SAP** promotes InnerSource projects in the InnerSource Portal - projects can self-register using GitHub topics. The [Repository Activity Score](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/repository-activity-score.md) defines the default order of the InnerSource projects in the portal. Also see [Michael Graf & Harish B (SAP) at ISC.S11 - The Unexpected Path of Applying InnerSource Patterns](https://www.youtube.com/watch?v=6r9QOw9dcQo&list=PLCH-i0B0otNQZQt_QzGR9Il_kE4C6cQRy&index=6). Its codebase is published as a [reference implementation](https://github.com/SAP/project-portal-for-innersource) and open for contributions.\n* **Elbit Systems** has used this pattern and added gamification on top.\n  * [Gamification As Means of Cultural Change and InnerSource Engagement Booster](https://www.oreilly.com/library/view/oscon-2018-/9781492026075/video321579.html) | Shelly Nizri | OSCON 2018 - Portland, Oregon\n  * Of Islands, Monsters & InnerSource [(slides)](https://docs.google.com/presentation/d/1P1OCEK9B6eSrVRUclVWY6meSI-qHOBjM_UAPNvCZamU/edit#slide=id.p15), [(video)](https://drive.google.com/file/d/1pM89uHMn0vhE3ayFJDGYcCO8R0tAXXZD/view?usp=drivesdk) | InnerSource Spring Summit 2019 (Galway, Ireland)\n  * The code realizing this platform has been open sourced and is available at [gitlab.com/gilda2](https://gitlab.com/gilda2)\n* **American Airlines** promotes InnerSource projects via an [internal InnerSource Marketplace](https://tech.aa.com/2020-10-30-innersource/). Similarly to SAP, projects self-register by adding `innersource` as a GitHub topic. Projects are searchable and filterable by language, topics, number of open issues, etc.\n* **Banco Santander** has created a public portal called \"Santander ONE Europe InnerSource Community\" to support and increase InnerSource adoption. In addition to the catalog of projects the portal includes relevant content such as documentation, way of working, news, and events.\n\n![Santander InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/santander_portal.png \"Banco Santander InnerSource Portal\")\n\n* **Airbus** deployed the [SAP portal](https://github.com/SAP/project-portal-for-innersource) with minor modifications to match Airbus graphical identity. In addition, the [Python crawler](https://github.com/zkoppert/innersource-crawler) was patched to work with GitHub Enterprise instances.\n\n* **Mercado Libre** use an instance of the [SAP portal](https://github.com/SAP/project-portal-for-innersource) to discover existing InnerSource projects within the organization.\n\n## References\n\n* The InnerSource Portal pattern has been proven to work extremely well with the associated InnerSource [Gig Marketplace](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/gig-marketplace.md) pattern in this context\n\n## Status\n\n* Structured\n\n## Author(s)\n\n* Stephen McCall\n\n## Acknowledgements\n\n* Shelly Nizri\n* Melinda Malmgren\n* Michael Graf\n* Jesús Alonso Gutierrez\n",
    "title": "InnerSource Portal",
    "patlet": "Potential contributors cannot easily discover InnerSource projects that they are interested in. By creating an intranet website that indexes all available InnerSource project information you enable contributors to learn about projects that might interest them and InnerSource project owners to attract an outside audience.",
    "problem": "InnerSource project teams are finding it difficult to attract outside contributions.\n\nInnerSource projects at your organization are increasing but potential contributors have no easy way of discovering them.",
    "story": "You are attempting to establish an InnerSource practice within your organization.  You are aware of some projects being run using an InnerSource model but their existence is only being communicated via word of mouth, email or sidebar conversations with other employees.  As a result InnerSource project owners are finding it difficult to attract contributors.  \n\nThere is no single, shared resource for employees across the organization to access which will allow them to easily discover all ongoing InnerSource projects.  This is severely limiting the growth potential of every InnerSource project.  \n\nWhat can be done to help all InnerSource projects raise their visibility to as large an audience as possible and attract contributors organization-wide?",
    "context": "* Your organization is interested in adopting an InnerSource work style.\n* InnerSource project owners are seeking a way to attract audiences to their projects. However, they are limited by the communication channels available to them through which they could advertise to potential contributors.\n* InnerSource projects at your organization are increasing.\n* Compounding this problem is the fact that the shared source control management application in use has such limited search capabilities that even developers in search of InnerSource projects find it frustrating to locate them.",
    "forces": "* The full potential for separate engineering teams to partner on shared challenges is not being realized\n* It is difficult for individuals to discover what InnerSource projects exist\n* It is difficult for InnerSource project owners to attract an audience of external contributors",
    "solutions": "Create an InnerSource Portal intranet website where InnerSource project owners can easily advertise the availability of their projects.\n\nKey properties of the portal are:\n\n* Visitors to the InnerSource Portal should be able to see all available projects as well as search for specific projects based on various criteria such as project name, technologies in use, contributor names, sponsoring business unit etc.  \n* The information displayed via the InnerSource Portal should be under the full control of the InnerSource project owners at all times.  Preferably, by sourcing this information directly from a specific data file or meta-data stored in the project repository itself.  \n* Project owners should include all relevant information concerning their projects within those data files including the project name, trusted contributors' names, a brief description and links to the code repository or any supporting documentation.  \n* (optional) While most organizations will choose to make their portal only available on their intranet, some organizations have opted to make their portal available on the public internet. The latter can be interesting for organizations that want to show additional information about their InnerSource approach in their portal e.g. for branding and recruitment purposes.\n\nWhen launching the portal, a communications campaign promoting the addition of InnerSource data files or meta-data to code repositories should be considered, to bolster the number of projects displayed within the portal.\n\nA [reference implementation](https://github.com/SAP/project-portal-for-innersource) of an InnerSource portal is available on GitHub and open for contributions. It lists all InnerSource projects of an organization in an interactive and easy to use way. Projects can self-register using a dedicated GitHub topic and provide additional metadata.\n\n![Example of an InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/portal-overview.png \"Example of an InnerSource Portal\")",
    "resulting_context": "* The InnerSource Portal has enabled InnerSource project owners to advertise their projects to an organization-wide audience.  Due to this increased visibility they are attracting much larger communities of contributors than ever before.\n* For those looking to get involved in InnerSource projects, the InnerSource Portal has allowed them to discover exactly the kind of opportunities they are interested in by searching across all available InnerSource projects simultaneously based on their specific criteria.\n* Satisfying the needs of both of these audiences has helped establish InnerSource as a viable and attractive option for all areas of the organization to leverage to accomplish things together they could not have separately.",
    "known_instances": "* **A large financial services organization** has used the creation of an InnerSource Portal to provide a mechanism of advertising and discovering InnerSource projects in existence across different business units\n* **SAP** promotes InnerSource projects in the InnerSource Portal - projects can self-register using GitHub topics. The [Repository Activity Score](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/repository-activity-score.md) defines the default order of the InnerSource projects in the portal. Also see [Michael Graf & Harish B (SAP) at ISC.S11 - The Unexpected Path of Applying InnerSource Patterns](https://www.youtube.com/watch?v=6r9QOw9dcQo&list=PLCH-i0B0otNQZQt_QzGR9Il_kE4C6cQRy&index=6). Its codebase is published as a [reference implementation](https://github.com/SAP/project-portal-for-innersource) and open for contributions.\n* **Elbit Systems** has used this pattern and added gamification on top.\n  * [Gamification As Means of Cultural Change and InnerSource Engagement Booster](https://www.oreilly.com/library/view/oscon-2018-/9781492026075/video321579.html) | Shelly Nizri | OSCON 2018 - Portland, Oregon\n  * Of Islands, Monsters & InnerSource [(slides)](https://docs.google.com/presentation/d/1P1OCEK9B6eSrVRUclVWY6meSI-qHOBjM_UAPNvCZamU/edit#slide=id.p15), [(video)](https://drive.google.com/file/d/1pM89uHMn0vhE3ayFJDGYcCO8R0tAXXZD/view?usp=drivesdk) | InnerSource Spring Summit 2019 (Galway, Ireland)\n  * The code realizing this platform has been open sourced and is available at [gitlab.com/gilda2](https://gitlab.com/gilda2)\n* **American Airlines** promotes InnerSource projects via an [internal InnerSource Marketplace](https://tech.aa.com/2020-10-30-innersource/). Similarly to SAP, projects self-register by adding `innersource` as a GitHub topic. Projects are searchable and filterable by language, topics, number of open issues, etc.\n* **Banco Santander** has created a public portal called \"Santander ONE Europe InnerSource Community\" to support and increase InnerSource adoption. In addition to the catalog of projects the portal includes relevant content such as documentation, way of working, news, and events.\n\n![Santander InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/santander_portal.png \"Banco Santander InnerSource Portal\")\n\n* **Airbus** deployed the [SAP portal](https://github.com/SAP/project-portal-for-innersource) with minor modifications to match Airbus graphical identity. In addition, the [Python crawler](https://github.com/zkoppert/innersource-crawler) was patched to work with GitHub Enterprise instances.\n\n* **Mercado Libre** use an instance of the [SAP portal](https://github.com/SAP/project-portal-for-innersource) to discover existing InnerSource projects within the organization.",
    "references": "* The InnerSource Portal pattern has been proven to work extremely well with the associated InnerSource [Gig Marketplace](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/gig-marketplace.md) pattern in this context",
    "status": "* Structured",
    "author(s)": "* Stephen McCall",
    "acknowledgements": "* Shelly Nizri\n* Melinda Malmgren\n* Michael Graf\n* Jesús Alonso Gutierrez",
    "slug": "innersource-portal"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-license.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nInnerSource License\n\n## Patlet\n\nTwo legal entities that belong to the same organization want to share software source code with each other but they are concerned about the implications in terms of legal liabilities or cross-company accounting.\n\nAn **InnerSource License** provides a reusable legal framework for the sharing of source code within the organization. This opens up new collaboration options, and makes the rights and obligations of the involved legal entities explicit.\n\n## Problem\n\nWhen two or more legal entities within an organization want to share code with each other, they need an agreement about the terms and often a legal contract. Creating such agreements on a per project basis takes effort and creates a barrier for sharing. i.e. a team within a legal entity might decide not to share their source code with another legal entity in the organization because it seems complicated.\n\nBarriers for sharing can lead to silos and duplication of effort in rebuilding similar solutions in multiple parts of the organization.\n\nAt the time of sharing the source code, it can not be reliably predicted what the value of sharing will be. If the activity of sharing requires significant effort (i.e. negotiating terms for the usage), the legal entities are less likely to do it, as they are concerned about the return on investment.\n\n## Context\n\n- A large organization with many legal entities (subsidiaries) that want to share code. When the organization gets larger, the value of this pattern increases.\n- As per definition, the legal entities have their own legal rights and obligations.\n- Multiple of these legal entities are developing software, and are using services of the other legal entities. They have a motivation to contribute to each other’s source code.\n- A sufficient complexity of the organization and its organizational structure\n\n## Forces\n\n- **Level of effort** required to write formal agreements, especially if they need to take into account technical, legal, and business perspectives.\n- A large organization (consisting of many legal entities) has many **internal regulations**. Any new agreements that are made have to comply with these regulations, e.g. security, privacy, procurement processes, etc. The volume of regulations can make it difficult to assess whether sharing software between two legal entities is compliant with these regulations, especially when there is no standard procedure.\n- If any of the legal entities in the organization has a **business model** that depends on proprietary code and accounting of licensing fees within the organization\n- **Company culture** that isn’t used to InnerSource collaboration and sharing code. This results in uncertainty about the rights and obligations when using shared code.\n- Freedom over using the software leads to competition, and spread of ownership\n- There are legal contracts in place which cover the sharing of source code. These contracts are not standardized, so they create additional effort in negotiating and understanding for every project. The existing contracts may also not allow sharing source code in an open enough sense to support a true InnerSource approach.\n- Alternatively, there are no legal contracts in place but source code is shared informally. That might create uncertainty in cases where clarity about ownership and rights and obligations is needed.\n\n## Solutions\n\nCreating an **InnerSource License** customized to the needs of the organization in question (and their legal entities). This license needs to be generic enough to be applied to the most important inter-company relationships.\n\nIt is important to write the InnerSource License such that it truly allows for OpenSource-like collaborations across the boundaries of the involved legal entities. Therefore the 4 freedoms of free software should be integrated into the license.\n\nThe License is written as a formal legal document, and can be used as part of contracts between the legal entities to govern the code sharing agreements.\n\n## Resulting Context\n\nWith the InnerSource License, we have a tool to share code between legal entities within our organization.\n\nThe license simplifies the conversations within our organization about sharing source code, and is motivating the first legal entities to do so.\n\n**Note:** The experiment described in **Known Instances** is in an early phase. Therefore a firm **Resulting Context** has not formed yet. In a couple of months the effects of the InnerSource License on this problem space will be more clear, and this section can be updated.\n\n## Known Instances\n\nDB Systel created their own InnerSource License, see [DB Inner Source License][db-inner-source-license]. They used the [EUPL][eupl], as that offered an open source like starting point, and then worked out the constraints and additional rules required in their specific organizational context.\n\nThe first legal entities (companies) within the DB AG are using their InnerSource License.\n\nOne positive effect that is already showing is that it simplifies the conversation, especially if some of the involved parties don’t know the InnerSource concept that well yet. Licenses are a well-known concept, therefore having an InnerSource License is a great discussion starter.\n\nThe experiments are also uncovering that there are further collaboration challenges that need to be solved in order to lead to a true InnerSource contribution and collaboration model.\n\nThe mentioned collaboration challenges include:\n\n- making InnerSource licensed projects discoverable\n- building communities for collaboration on projects, just like in Open Source\n\nIt is worth mentioning that so far the software shared under this InnerSource license is mostly tooling, infrastructure, and tools lower in the stack.\n\n## Status\n\n* Structured\n* The experiment listed under **Known Instances** is running since 02/2020. The initial experience shows first positive effects but more experience is needed to fully evaluate the pattern.\n\n## Author(s)\n\n- Cornelius Schumacher (DB Systel GmbH)\n- Schlomo Schapiro (DB Systel GmbH)\n- Sebastian Spier\n\n## References\n\n- FOSSBack 2020 Presentation: [Cornelius Schumacher - Blending Open Source and Corporate Values](https://youtu.be/hikC6U8X_Ec) - watch 27:30 and onwards for details about the InnerSource License\n- [DB Inner Source License][db-inner-source-license]\n\n## Glossary\n\n- **organization** - An umbrella for multiple legal entities. (synonyms: group, enterprise) (e.g. Lufthansa)\n- **legal entity** - An entity that has its own legal rights and obligations (synonyms: company, subsidiary) (e.g. Lufthansa Systems GmbH, Lufthansa Industry Solutions TS GmbH, ...)\n\n[db-inner-source-license]: https://github.com/dbsystel/open-source-policies/blob/master/DB-Inner-Source-License.md\n[eupl]: https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12\n",
    "title": "InnerSource License",
    "patlet": "Two legal entities that belong to the same organization want to share software source code with each other but they are concerned about the implications in terms of legal liabilities or cross-company accounting.\n\nAn **InnerSource License** provides a reusable legal framework for the sharing of source code within the organization. This opens up new collaboration options, and makes the rights and obligations of the involved legal entities explicit.",
    "problem": "When two or more legal entities within an organization want to share code with each other, they need an agreement about the terms and often a legal contract. Creating such agreements on a per project basis takes effort and creates a barrier for sharing. i.e. a team within a legal entity might decide not to share their source code with another legal entity in the organization because it seems complicated.\n\nBarriers for sharing can lead to silos and duplication of effort in rebuilding similar solutions in multiple parts of the organization.\n\nAt the time of sharing the source code, it can not be reliably predicted what the value of sharing will be. If the activity of sharing requires significant effort (i.e. negotiating terms for the usage), the legal entities are less likely to do it, as they are concerned about the return on investment.",
    "context": "- A large organization with many legal entities (subsidiaries) that want to share code. When the organization gets larger, the value of this pattern increases.\n- As per definition, the legal entities have their own legal rights and obligations.\n- Multiple of these legal entities are developing software, and are using services of the other legal entities. They have a motivation to contribute to each other’s source code.\n- A sufficient complexity of the organization and its organizational structure",
    "forces": "- **Level of effort** required to write formal agreements, especially if they need to take into account technical, legal, and business perspectives.\n- A large organization (consisting of many legal entities) has many **internal regulations**. Any new agreements that are made have to comply with these regulations, e.g. security, privacy, procurement processes, etc. The volume of regulations can make it difficult to assess whether sharing software between two legal entities is compliant with these regulations, especially when there is no standard procedure.\n- If any of the legal entities in the organization has a **business model** that depends on proprietary code and accounting of licensing fees within the organization\n- **Company culture** that isn’t used to InnerSource collaboration and sharing code. This results in uncertainty about the rights and obligations when using shared code.\n- Freedom over using the software leads to competition, and spread of ownership\n- There are legal contracts in place which cover the sharing of source code. These contracts are not standardized, so they create additional effort in negotiating and understanding for every project. The existing contracts may also not allow sharing source code in an open enough sense to support a true InnerSource approach.\n- Alternatively, there are no legal contracts in place but source code is shared informally. That might create uncertainty in cases where clarity about ownership and rights and obligations is needed.",
    "solutions": "Creating an **InnerSource License** customized to the needs of the organization in question (and their legal entities). This license needs to be generic enough to be applied to the most important inter-company relationships.\n\nIt is important to write the InnerSource License such that it truly allows for OpenSource-like collaborations across the boundaries of the involved legal entities. Therefore the 4 freedoms of free software should be integrated into the license.\n\nThe License is written as a formal legal document, and can be used as part of contracts between the legal entities to govern the code sharing agreements.",
    "resulting_context": "With the InnerSource License, we have a tool to share code between legal entities within our organization.\n\nThe license simplifies the conversations within our organization about sharing source code, and is motivating the first legal entities to do so.\n\n**Note:** The experiment described in **Known Instances** is in an early phase. Therefore a firm **Resulting Context** has not formed yet. In a couple of months the effects of the InnerSource License on this problem space will be more clear, and this section can be updated.",
    "known_instances": "DB Systel created their own InnerSource License, see [DB Inner Source License][db-inner-source-license]. They used the [EUPL][eupl], as that offered an open source like starting point, and then worked out the constraints and additional rules required in their specific organizational context.\n\nThe first legal entities (companies) within the DB AG are using their InnerSource License.\n\nOne positive effect that is already showing is that it simplifies the conversation, especially if some of the involved parties don’t know the InnerSource concept that well yet. Licenses are a well-known concept, therefore having an InnerSource License is a great discussion starter.\n\nThe experiments are also uncovering that there are further collaboration challenges that need to be solved in order to lead to a true InnerSource contribution and collaboration model.\n\nThe mentioned collaboration challenges include:\n\n- making InnerSource licensed projects discoverable\n- building communities for collaboration on projects, just like in Open Source\n\nIt is worth mentioning that so far the software shared under this InnerSource license is mostly tooling, infrastructure, and tools lower in the stack.",
    "status": "* Structured\n* The experiment listed under **Known Instances** is running since 02/2020. The initial experience shows first positive effects but more experience is needed to fully evaluate the pattern.",
    "author(s)": "- Cornelius Schumacher (DB Systel GmbH)\n- Schlomo Schapiro (DB Systel GmbH)\n- Sebastian Spier",
    "references": "- FOSSBack 2020 Presentation: [Cornelius Schumacher - Blending Open Source and Corporate Values](https://youtu.be/hikC6U8X_Ec) - watch 27:30 and onwards for details about the InnerSource License\n- [DB Inner Source License][db-inner-source-license]",
    "glossary": "- **organization** - An umbrella for multiple legal entities. (synonyms: group, enterprise) (e.g. Lufthansa)\n- **legal entity** - An entity that has its own legal rights and obligations (synonyms: company, subsidiary) (e.g. Lufthansa Systems GmbH, Lufthansa Industry Solutions TS GmbH, ...)\n\n[db-inner-source-license]: https://github.com/dbsystel/open-source-policies/blob/master/DB-Inner-Source-License.md\n[eupl]: https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12",
    "slug": "innersource-license"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/group-support.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nGroup Support\n\n## Patlet\n\nWhat happens if a team or individual no longer supports an InnerSource project?\nKeep the project alive by forming a group of interested individuals.\n\n## Problem\n\n* A popular InnerSource project is orphaned.\n* There isn't an obvious home for it to land.\n\n## Story\n\nA library of UI widgets is used by over 50 projects throughout the company.\nThe funding for the team that owns the library runs out and the team disbands.\nAt first, no one notices, but after a while whenever someone asks \"who owns it\" there isn't an answer.\nWhat will happen next?\nWill new teams shy away from using it?\nWill the project stagnate and linger until its users eventually are forced to move on to something else?\nWhat a shame if that were to happen to a perfectly good and useful project!\n\n## Context\n\n* Popular InnerSource project.\n* Consumed as a build-time dependency (e.g. code module).\n* No one is actively supporting it.\n* The company cannot assign a team to support.\n\n## Forces\n\n* No one is assigned by their day job to work on it.\n* Everyone is busy.\n* High cost to migrate off the project.\n\n## Solutions\n\nCall for interested volunteers from anywhere in the company to form a group of [Trusted Committer][]s to support the project.\nYou may need to reach out to specific individuals based on commit or usage history.\nIt is important that there are enough so that the burden on each can be reasonably small.\n\nWhen forming, this group should identify or create [Standard Base Documentation][] and [Communication Tooling][].\n\nThe group should do its best to manage these aspects of the project:\n\n* **Maintenance**.  If the project is flat-out broken for the standard use case, then fix it.\nKeep the project up-to-date as the dependencies and frameworks it uses continue to evolve.\n* **Onboarding**.  If someone has a question about how to use the project, make sure they get a reasonable answer.\n* **Updates**.  If someone wants to add new feature to the project, give them the design and technical support necessary for them to build it so that it both works for them and is a good addition to the project.\nReview incoming pull requests in a timely manner.\n\nSince this group is comprised of volunteers, it is important to communicate that support is \"best effort\" only.\nAccordingly, this model of support is not well-suited for run-time critical, production projects like live APIs.\nIt is better suited for projects that are consumed at build-time like libraries/packages/modules.\nThe group is not expected to implement any new functionality for others.\n\n## Resulting Context\n\n* There is some fragile support for the InnerSource project.\n* In the long-term the group support is likely to dissolve again at some point. If the project continues in the long run, then use this period of stable group support to find a long-lived way to support it (e.g. [Core Team][]).\n\n## Rationale\n\nPeople generally want to help.\nIf there is personal outreach for someone to join as a [Trusted Committer][], there are generally a number of people that will say \"yes\".\nFeeling part of a group and being given some structure and responsibility generally motivates people to try their best, which many times ends up being enough.\n\n## Known Instances\n\n* WellSky\n\n## Status\n\nStructured\n\n## Author\n\n[Russell R. Rutledge][]\n\n[Russell R. Rutledge]: https://github.com/rrrutledge\n[Standard Base Documentation]: ../2-structured/project-setup/base-documentation.md\n[Communication Tooling]: ../2-structured/project-setup/communication-tooling.md\n[Trusted Committer]: ../2-structured/trusted-committer.md\n[Core Team]: ../2-structured/core-team.md\n",
    "title": "Group Support",
    "patlet": "What happens if a team or individual no longer supports an InnerSource project?\nKeep the project alive by forming a group of interested individuals.",
    "problem": "* A popular InnerSource project is orphaned.\n* There isn't an obvious home for it to land.",
    "story": "A library of UI widgets is used by over 50 projects throughout the company.\nThe funding for the team that owns the library runs out and the team disbands.\nAt first, no one notices, but after a while whenever someone asks \"who owns it\" there isn't an answer.\nWhat will happen next?\nWill new teams shy away from using it?\nWill the project stagnate and linger until its users eventually are forced to move on to something else?\nWhat a shame if that were to happen to a perfectly good and useful project!",
    "context": "* Popular InnerSource project.\n* Consumed as a build-time dependency (e.g. code module).\n* No one is actively supporting it.\n* The company cannot assign a team to support.",
    "forces": "* No one is assigned by their day job to work on it.\n* Everyone is busy.\n* High cost to migrate off the project.",
    "solutions": "Call for interested volunteers from anywhere in the company to form a group of [Trusted Committer][]s to support the project.\nYou may need to reach out to specific individuals based on commit or usage history.\nIt is important that there are enough so that the burden on each can be reasonably small.\n\nWhen forming, this group should identify or create [Standard Base Documentation][] and [Communication Tooling][].\n\nThe group should do its best to manage these aspects of the project:\n\n* **Maintenance**.  If the project is flat-out broken for the standard use case, then fix it.\nKeep the project up-to-date as the dependencies and frameworks it uses continue to evolve.\n* **Onboarding**.  If someone has a question about how to use the project, make sure they get a reasonable answer.\n* **Updates**.  If someone wants to add new feature to the project, give them the design and technical support necessary for them to build it so that it both works for them and is a good addition to the project.\nReview incoming pull requests in a timely manner.\n\nSince this group is comprised of volunteers, it is important to communicate that support is \"best effort\" only.\nAccordingly, this model of support is not well-suited for run-time critical, production projects like live APIs.\nIt is better suited for projects that are consumed at build-time like libraries/packages/modules.\nThe group is not expected to implement any new functionality for others.",
    "resulting_context": "* There is some fragile support for the InnerSource project.\n* In the long-term the group support is likely to dissolve again at some point. If the project continues in the long run, then use this period of stable group support to find a long-lived way to support it (e.g. [Core Team][]).",
    "rationale": "People generally want to help.\nIf there is personal outreach for someone to join as a [Trusted Committer][], there are generally a number of people that will say \"yes\".\nFeeling part of a group and being given some structure and responsibility generally motivates people to try their best, which many times ends up being enough.",
    "known_instances": "* WellSky",
    "status": "Structured",
    "author": "[Russell R. Rutledge][]\n\n[Russell R. Rutledge]: https://github.com/rrrutledge\n[Standard Base Documentation]: ../2-structured/project-setup/base-documentation.md\n[Communication Tooling]: ../2-structured/project-setup/communication-tooling.md\n[Trusted Committer]: ../2-structured/trusted-committer.md\n[Core Team]: ../2-structured/core-team.md",
    "slug": "group-support"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/gig-marketplace.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nGig Marketplace\n\n## Patlet  \n\nEstablish a marketplace by creating an intranet website that lists specific InnerSource project needs as \"Gigs\" with explicit time and skill requirements.  This will enable managers to better understand their employee’s time commitment and professional benefits thereby increasing the likelihood of garnering approval to make InnerSource contributions.\n\n## Problem\n\nNeither managers nor employees understand how they might benefit from getting involved in an InnerSource project.\n\nIt is difficult for employees to communicate to their management what commitment of time they will need to make to an InnerSource project.  \n\nManagers have no uniform way of keeping track of or rewarding their employee’s involvement in InnerSource projects.\n\n## Story\n\nYou’ve successfully created an InnerSource program at your company and have buy-in from senior management, middle-management and developers.  However, after nearly a year there have been few actual contributions made to any InnerSource projects outside of the teams that originally created them.  After interviewing all the parties involved the main sticking point seems to be that it is difficult to know the time commitment developers will be asked to make if they choose to get involved in an InnerSource project and how they will personally benefit. There is also no uniform way of advertising what opportunities for contributors exist, what they’ll be asked to do and approximately how long it might take.  Managers are supportive and want their employees to participate but so far have lacked a way of accounting for or rewarding their employees’ activities within InnerSource projects.  What can be done to improve this situation for all the parties involved (InnerSource project owners, potential contributors and development managers)?\n\n## Context\n\nEmployees wish they could gain exposure to activities going on within other areas of the company without having to leave their current positions. InnerSource projects exist and could provide these experiences but there are two main factors preventing employees from participating. First, is the inability to easily discover what opportunities for contribution exist within ongoing InnerSource projects and to communicate these to their managers.  Second, is the inability of managers to plan and account for their employees' time commitments to these InnerSource project tasks.  As a result InnerSource project owners are finding it difficult to build communities of sufficient size to fulfill their stated goals.\n\n## Forces\n\n* Employees have no easy way to discover what InnerSource opportunities exist\n* Employees don't understand how contributing might benefit them professionally\n* Managers don't understand the time/effort requirements associated with InnerSource project related tasks\n\n### Prerequisites\n\n* Employees have been provided time by their managers to involve themselves in InnerSource projects\n* Managers require a way for InnerSource contributions to be quantified, tracked and recorded so they can be accounted for and rewarded\n\n## Solutions\n\nCreate a “Gig” based intranet site where individuals can advertise their skills and areas of interest and InnerSource project owners can advertise opportunities for collaboration.\n\nEmployees should be able to create a profile within the application in which they can list their skills and areas of interest.  The system should leverage this information by proactively informing individuals (via email or some other means) when a Gig is posted that matches one or more of those criteria.\n\nEach Gig posted by an InnerSource project owner should include the estimated skill and time requirements so those can be easily matched to an available employee and clearly communicated to their direct management. The description should also include a rationale as to how it will benefit the person taking on the task in order to make it as attractive as possible.\n\nA points based system could be created to reward and track an employee’s involvement in a Gig.  For instance, 10 points awarded to the Gig owner for posting a Gig once it is completed and 100 points for a developer who completes a Gig. Points accrued by completing Gigs could then be used as a gamification mechanism and as performance management criteria to garner insight in to the areas of expertise that exist within an organization.\n\nThose wishing to accept a Gig should first be vetted by the Gig owner to determine that the employee has the prerequisite skills and allotted time from their manager to complete the Gig.\n\nThe transparency of contributions made via Gigs can help a contributor build (or detract from) her reputation thereby creating a greater likelihood that the quality of the contribution will be high.  Completion of Gigs can also act as proof of expertise in a particular area.  \n\nThe nature of Gigs posted to the marketplace can include both hard and soft skills such as organizing a group event, writing a report or requests for mentorship etc.\n\nThe creation of the Gig Marketplace should ideally be taken on by a team within an organization with the responsibilities to provide company-wide infrastructure and capabilities.\n\n## Resulting Context\n\nThe InnerSource Gig Marketplace has vastly increased the number of InnerSource projects as well as the number of employees involved in them. The self-directed nature of the Gig Marketplace has enhanced job satisfaction amongst employees by allowing them a level of choice in the work they perform and with whom they can partner across the company.  Employees understand exactly what they are signing up for and what they can expect from the experience. Managers are better able to estimate and track their employee’s time commitments with respect to InnerSource projects, recognize their individual efforts and use the completion of Gigs as a way of validating their specific skillsets.  Managers are also able to leverage any existing downtime their employees may be experiencing by allowing them to pivot to work available in the Gig Marketplace.  The data generated by the interactions within the Gig Marketplace is also helping to drive hiring and training decisions across all departments.\n\nWhen used in combination with the InnerSource Portal pattern, the Gig Marketplace provides a finer level of context and detail in addition to the links to the code repositories and documentation for the project to which the Gig relates.\n\n## Known Instances\n\n* A large financial services organization has used the creation of an InnerSource Gig Marketplace website to foster their InnerSource program.\n* SAP implemented the Gig Marketplace pattern - a new InnerSource program was added to the internal job platform where positions and similar offerings can be posted.\n* The Gig Marketplace pattern has been proven to work extremely well with the associated [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md) pattern in this context.  The InnerSource Portal increases awareness of specific projects currently underway while the Gig Marketplace advertises tasks of a certain type available to be worked on within those projects.\n\n## Status\n\n* Structured\n\n## Author(s)\n\n* Stephen McCall\n* Shreyans Dugar\n",
    "title": "Gig Marketplace",
    "patlet": "Establish a marketplace by creating an intranet website that lists specific InnerSource project needs as \"Gigs\" with explicit time and skill requirements.  This will enable managers to better understand their employee’s time commitment and professional benefits thereby increasing the likelihood of garnering approval to make InnerSource contributions.",
    "problem": "Neither managers nor employees understand how they might benefit from getting involved in an InnerSource project.\n\nIt is difficult for employees to communicate to their management what commitment of time they will need to make to an InnerSource project.  \n\nManagers have no uniform way of keeping track of or rewarding their employee’s involvement in InnerSource projects.",
    "story": "You’ve successfully created an InnerSource program at your company and have buy-in from senior management, middle-management and developers.  However, after nearly a year there have been few actual contributions made to any InnerSource projects outside of the teams that originally created them.  After interviewing all the parties involved the main sticking point seems to be that it is difficult to know the time commitment developers will be asked to make if they choose to get involved in an InnerSource project and how they will personally benefit. There is also no uniform way of advertising what opportunities for contributors exist, what they’ll be asked to do and approximately how long it might take.  Managers are supportive and want their employees to participate but so far have lacked a way of accounting for or rewarding their employees’ activities within InnerSource projects.  What can be done to improve this situation for all the parties involved (InnerSource project owners, potential contributors and development managers)?",
    "context": "Employees wish they could gain exposure to activities going on within other areas of the company without having to leave their current positions. InnerSource projects exist and could provide these experiences but there are two main factors preventing employees from participating. First, is the inability to easily discover what opportunities for contribution exist within ongoing InnerSource projects and to communicate these to their managers.  Second, is the inability of managers to plan and account for their employees' time commitments to these InnerSource project tasks.  As a result InnerSource project owners are finding it difficult to build communities of sufficient size to fulfill their stated goals.",
    "forces": "* Employees have no easy way to discover what InnerSource opportunities exist\n* Employees don't understand how contributing might benefit them professionally\n* Managers don't understand the time/effort requirements associated with InnerSource project related tasks",
    "solutions": "Create a “Gig” based intranet site where individuals can advertise their skills and areas of interest and InnerSource project owners can advertise opportunities for collaboration.\n\nEmployees should be able to create a profile within the application in which they can list their skills and areas of interest.  The system should leverage this information by proactively informing individuals (via email or some other means) when a Gig is posted that matches one or more of those criteria.\n\nEach Gig posted by an InnerSource project owner should include the estimated skill and time requirements so those can be easily matched to an available employee and clearly communicated to their direct management. The description should also include a rationale as to how it will benefit the person taking on the task in order to make it as attractive as possible.\n\nA points based system could be created to reward and track an employee’s involvement in a Gig.  For instance, 10 points awarded to the Gig owner for posting a Gig once it is completed and 100 points for a developer who completes a Gig. Points accrued by completing Gigs could then be used as a gamification mechanism and as performance management criteria to garner insight in to the areas of expertise that exist within an organization.\n\nThose wishing to accept a Gig should first be vetted by the Gig owner to determine that the employee has the prerequisite skills and allotted time from their manager to complete the Gig.\n\nThe transparency of contributions made via Gigs can help a contributor build (or detract from) her reputation thereby creating a greater likelihood that the quality of the contribution will be high.  Completion of Gigs can also act as proof of expertise in a particular area.  \n\nThe nature of Gigs posted to the marketplace can include both hard and soft skills such as organizing a group event, writing a report or requests for mentorship etc.\n\nThe creation of the Gig Marketplace should ideally be taken on by a team within an organization with the responsibilities to provide company-wide infrastructure and capabilities.",
    "resulting_context": "The InnerSource Gig Marketplace has vastly increased the number of InnerSource projects as well as the number of employees involved in them. The self-directed nature of the Gig Marketplace has enhanced job satisfaction amongst employees by allowing them a level of choice in the work they perform and with whom they can partner across the company.  Employees understand exactly what they are signing up for and what they can expect from the experience. Managers are better able to estimate and track their employee’s time commitments with respect to InnerSource projects, recognize their individual efforts and use the completion of Gigs as a way of validating their specific skillsets.  Managers are also able to leverage any existing downtime their employees may be experiencing by allowing them to pivot to work available in the Gig Marketplace.  The data generated by the interactions within the Gig Marketplace is also helping to drive hiring and training decisions across all departments.\n\nWhen used in combination with the InnerSource Portal pattern, the Gig Marketplace provides a finer level of context and detail in addition to the links to the code repositories and documentation for the project to which the Gig relates.",
    "known_instances": "* A large financial services organization has used the creation of an InnerSource Gig Marketplace website to foster their InnerSource program.\n* SAP implemented the Gig Marketplace pattern - a new InnerSource program was added to the internal job platform where positions and similar offerings can be posted.\n* The Gig Marketplace pattern has been proven to work extremely well with the associated [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md) pattern in this context.  The InnerSource Portal increases awareness of specific projects currently underway while the Gig Marketplace advertises tasks of a certain type available to be worked on within those projects.",
    "status": "* Structured",
    "author(s)": "* Stephen McCall\n* Shreyans Dugar",
    "slug": "gig-marketplace"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/extensions-for-sustainable-growth.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nExtensions for Sustainable Growth\n\n## Patlet\n\nAn InnerSource project is receiving too many contributions, making maintenance difficult. By offering an extension mechanism outside of the core project, the maintainers enable scaling of project capabilities with minimal cost and maintenance overhead.\n\n## Problem\n\nAs the number of contributions to a mature InnerSource repository rapidly increases, it adds more burden on code reviews and maintenance. This results in a large code review backlog or premature rejection of new feature contributions.\n\nHow can the host team allow for faster release of new features, encouraging innovation and experimentation; while also keeping the repository well maintained?\n\n## Story\n\nThere is a strategic project that aims to collect the best innovations within a domain space to one common stack, allowing reuse of a common infrastructure and providing a standard user experience. Through InnerSource, various teams in the organization that work within the domain space get an opportunity to collaborate and contribute their innovations to the common codebase.\n\nHowever, a large number of contributions in parallel from several developers is making maintenance of the codebase difficult. This is adding a huge burden on the project maintainers who assume ownership over the code quality standards and enable the community through various forms of communication.\n\nProject maintainers are at risk of burnout due to:\n\n- Everlasting backlog of pull requests from contributors that need to be reviewed.\n- Job dissatisfaction: Majority of maintainers' time spent in community support leaves no room for innovation.\n- Perceived lack of accomplishment: Not all contributed features have adequate user demand and result in consequent adoption.\n- Time consuming releases: More features in the codebase results in long running tests.\n- Increase in maintenance activities: More bugs raised as new capabilities are added.\n\nA lot of time is spent on maturing every new feature contribution, before potential users even get an opportunity to explore the feature for their use cases. If it turns out that new feature isn't fulfilling the use case, then all that time spent on achieving the desired code quality standards are waste.\n\n## Context\n\n- A strategic InnerSource codebase is scaling rapidly with new feature contributions from several employees.\n- The ratio of reviewers to contributions results in a growing backlog of pull requests. This is slowing down release of new features to the community.\n- Quality of the codebase is degrading and user experience is adversely impacted.\n- Maintainers of the codebase are burdened and cannot keep up with the influx of contributions and increased community support.\n- Some of the contributed features are not gaining adoption by users, and might even turn fully dormant. However even though they are unused, these features are still adding to the maintenance overhead.\n- Organization is investing heavily in hardening of new feature contributions to retain quality standards before the ideas are explored by the community.\n- The pattern applies in either scenario:\n   - Maintainers find themselves rejecting new feature ideas to narrow down the scope of the project. This is hampering innovation in the community and restricting further expansion.\n   - To reduce backlog, new features are getting released without thorough documentation, hardening, or testing, creating a poor user experience. This is also bloating the size of the codebase, adding a huge dependency graph and making it difficult to maintain.\n\n## Forces\n\n- Maintainers and product owners want to allow for expansion, encourage innovation and experimentation without being overly restrictive on contributions, while also keeping good code and quality standards for user experience.\n- A large amount of time goes into hardening and thorough testing of features to meet product standards, but product owners may want to allow for faster release of new innovations for adopting products to explore before investing time in maturing the capabilities.\n- Maintainers want to encourage the community to share innovations that combine product capabilities with other use-cases without adding more dependencies to the primary repository.\n\n## Solutions\n\nAllowing [extensions/plugins](https://en.wikipedia.org/wiki/Extensibility) to high-scale InnerSource codebases can relieve the maintenance burden on repository maintainers and allow faster release of new features for adopting products to explore. This shifts maintenance of capabilities to extension owners and allows the primary repository to support capabilities that have been adopted more widely and are more strategic.  \n\nExtensions provide a filter for new capabilities that may eventually move into the core of the project. Extensions also act as an incubation and community hardening environment, allowing for much of that hardening to happen organically rather than in a costly review process.\n\nIn order for the extensions model to be successful, there are few architectural considerations to keep in mind:\n\n1. **Easy to create:** To obtain community participation, extensions need to be easy to create.\n   - Create a repository template that extensions should use as a starting point. This allows the extensions to add their new features in new repositories, separate from the core project. The template should provide the same modular structure as the primary repository, and include the framework to package and release extensions.\n      - Ensure that as the primary repository changes, the template(s) are well-maintained. The primary repository maintainers are responsible for updating the template(s) to ensure it is compatible with the main project. Following good versioning conventions, e.g., [semver](https://semver.org/), makes this easier to follow.\n      - It is further recommended that the primary repository maintainers provide guidance on how to update extensions based on older versions of the template as newer versions are released.\n   - Add example extension(s) developed from the template, which project developers can reference to understand how to write a well-patterned extension.\n   - Loosen the requirements for contributors to create extensions by bypassing reviews to allow for faster release or experimentation.\n2. **Loose coupling:** Having modular components that contain functionality can allow loose coupling, where changes to extensions do not impact the quality of the main codebase or other extensions.\n3. **Dependency management:**  Each extension should be careful to pin the version range of the primary repository that it is built against (the same way it would any other dependency) and should be careful in its use of other dependencies that shadow dependencies of the primary repository such that the versions it chooses for those dependencies are compatible with the primary repository versions selected. Any conflicts with primary repository will be caught in the test framework for the extension.\n4. **Testing strategy:** How to test extensions both individually and in combination?\n   - **Testing extension individually:** Extensions template will provide a test framework to be used by the extension developers to test the capability added. This can include a framework for unit tests, runtime performance and quality tests.\n   - **Testing extension in combination with primary repository:** Extension developers have a well-patterned method for testing their extension against specific versions of the primary repository without involvement from the primary repository's maintainers.\n   - **Testing extension in combination with other extensions:** Providing a test framework for this scenario could result in being excessive especially if there are a large number of extensions that are still being explored by users and unlikely to be all used in combination. If a user runs into conflicts while using extensions in combination (which should be unlikely with sufficient loose coupling), the user can raise an issue to the respective extension owners who will sort it out. As an extension reaches later phases of the lifecycle and gets merged into the primary repository, it would be tested in combination with rest of library and any dependency conflicts will have to be resolved at the time.\n5. **Discoverability and Usability:**\n   - Make extensions easily discoverable with a publishing page showing the extensions that users have created and want to share for product usage.\n   - Allow registration of extensions with the primary project for users to leverage extensions alongside the original project, thus keeping the same user experience.\n6. **Lifecycle of extensions and maintainability:** Establish the lifecycle for extensions from creation to porting into the primary codebase, along with clear ownership guidelines.\n   - Extension creators continue maintaining the extension, providing any support and fixing defects. Any extension left unmaintained will be unlisted from the publishing page.\n   - Create criteria for when an extension can be ported to the primary repository, such as adoption of the extension by internal products and demand for the feature.\n   - Porting process of the extension to the primary repository will follow more stringent code review guidelines as set by library maintainers.\n\n![Software architecture with extensions](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/extensions-for-sustainable-growth/extensions-for-sustainable-growth.png)\n\nFollowing these principles ensures that:\n\n- Developers can add new features to a project's ecosystem without requiring them to write large amounts of [boilerplate](https://en.wikipedia.org/wiki/Boilerplate_code) code.\n- Extensions are discoverable in a repeatable manner by all users of the primary project; just because code doesn't live in the main repository yet does not mean it is not valuable.\n- The maintainer burden is reduced until an extension has demonstrated that it fills an important gap in the primary project.\n- The core project's common code (e.g. base classes and utility functions) can be a starting point for new development that extends project's domain. This avoids the need to port innovative work after-the-fact, thus reducing the overall burden of developing novel features for the project.\n- Developers are more likely to contribute and stay involved in maintenance and building communities for their codebase, which is also good for the health of the overall project ecosystem.\n\n## Resulting Context\n\n- The project is able to scale with the addition of new features, without adding maintenance overhead on the primary project repository.\n- Faster release of new features for the community to explore, encouraging innovation and experimentation.\n- Reduced the costly code review and feature hardening process until the feature is able to prove its utility. This has cost savings benefits for the organization.\n- A post problem that can be introduced - what happens if an extension can not complete the full lifecycle?\n   - If an extension is not adopted over a period of time and could not build a community around it to support maintenance, it would be up to the extension owner to continue maintaining it for however long they want to. If an extension is left unmaintained, it would be unpublished.\n   - If an extension developer is unable to further maintain their project, and other developers in the community want to continue supporting it, they may maintain the extension going forward.\n\n## Known Instances\n\n* **IBM Corporation** has adopted this solution to scale [InnerSource AI libraries](https://youtu.be/Lz-tIc2cyRM). Using extensions, developers are able to extend AI libraries with more algorithms and share their innovations with the company-internal community. The core libraries only contain strategic algorithms that have been adopted and validated, keeping them easier to maintain as we scale contributions.\n\n## Alias\n\nExtensions to Manage Contributions at Scale\n\n## Status\n\nStructured\n\n## Author(s)\n\n- Sukriti Sharma, IBM\n- Alexander Brooks, IBM\n- Gabe Goodhart, IBM\n",
    "title": "Extensions for Sustainable Growth",
    "patlet": "An InnerSource project is receiving too many contributions, making maintenance difficult. By offering an extension mechanism outside of the core project, the maintainers enable scaling of project capabilities with minimal cost and maintenance overhead.",
    "problem": "As the number of contributions to a mature InnerSource repository rapidly increases, it adds more burden on code reviews and maintenance. This results in a large code review backlog or premature rejection of new feature contributions.\n\nHow can the host team allow for faster release of new features, encouraging innovation and experimentation; while also keeping the repository well maintained?",
    "story": "There is a strategic project that aims to collect the best innovations within a domain space to one common stack, allowing reuse of a common infrastructure and providing a standard user experience. Through InnerSource, various teams in the organization that work within the domain space get an opportunity to collaborate and contribute their innovations to the common codebase.\n\nHowever, a large number of contributions in parallel from several developers is making maintenance of the codebase difficult. This is adding a huge burden on the project maintainers who assume ownership over the code quality standards and enable the community through various forms of communication.\n\nProject maintainers are at risk of burnout due to:\n\n- Everlasting backlog of pull requests from contributors that need to be reviewed.\n- Job dissatisfaction: Majority of maintainers' time spent in community support leaves no room for innovation.\n- Perceived lack of accomplishment: Not all contributed features have adequate user demand and result in consequent adoption.\n- Time consuming releases: More features in the codebase results in long running tests.\n- Increase in maintenance activities: More bugs raised as new capabilities are added.\n\nA lot of time is spent on maturing every new feature contribution, before potential users even get an opportunity to explore the feature for their use cases. If it turns out that new feature isn't fulfilling the use case, then all that time spent on achieving the desired code quality standards are waste.",
    "context": "- A strategic InnerSource codebase is scaling rapidly with new feature contributions from several employees.\n- The ratio of reviewers to contributions results in a growing backlog of pull requests. This is slowing down release of new features to the community.\n- Quality of the codebase is degrading and user experience is adversely impacted.\n- Maintainers of the codebase are burdened and cannot keep up with the influx of contributions and increased community support.\n- Some of the contributed features are not gaining adoption by users, and might even turn fully dormant. However even though they are unused, these features are still adding to the maintenance overhead.\n- Organization is investing heavily in hardening of new feature contributions to retain quality standards before the ideas are explored by the community.\n- The pattern applies in either scenario:\n   - Maintainers find themselves rejecting new feature ideas to narrow down the scope of the project. This is hampering innovation in the community and restricting further expansion.\n   - To reduce backlog, new features are getting released without thorough documentation, hardening, or testing, creating a poor user experience. This is also bloating the size of the codebase, adding a huge dependency graph and making it difficult to maintain.",
    "forces": "- Maintainers and product owners want to allow for expansion, encourage innovation and experimentation without being overly restrictive on contributions, while also keeping good code and quality standards for user experience.\n- A large amount of time goes into hardening and thorough testing of features to meet product standards, but product owners may want to allow for faster release of new innovations for adopting products to explore before investing time in maturing the capabilities.\n- Maintainers want to encourage the community to share innovations that combine product capabilities with other use-cases without adding more dependencies to the primary repository.",
    "solutions": "Allowing [extensions/plugins](https://en.wikipedia.org/wiki/Extensibility) to high-scale InnerSource codebases can relieve the maintenance burden on repository maintainers and allow faster release of new features for adopting products to explore. This shifts maintenance of capabilities to extension owners and allows the primary repository to support capabilities that have been adopted more widely and are more strategic.  \n\nExtensions provide a filter for new capabilities that may eventually move into the core of the project. Extensions also act as an incubation and community hardening environment, allowing for much of that hardening to happen organically rather than in a costly review process.\n\nIn order for the extensions model to be successful, there are few architectural considerations to keep in mind:\n\n1. **Easy to create:** To obtain community participation, extensions need to be easy to create.\n   - Create a repository template that extensions should use as a starting point. This allows the extensions to add their new features in new repositories, separate from the core project. The template should provide the same modular structure as the primary repository, and include the framework to package and release extensions.\n      - Ensure that as the primary repository changes, the template(s) are well-maintained. The primary repository maintainers are responsible for updating the template(s) to ensure it is compatible with the main project. Following good versioning conventions, e.g., [semver](https://semver.org/), makes this easier to follow.\n      - It is further recommended that the primary repository maintainers provide guidance on how to update extensions based on older versions of the template as newer versions are released.\n   - Add example extension(s) developed from the template, which project developers can reference to understand how to write a well-patterned extension.\n   - Loosen the requirements for contributors to create extensions by bypassing reviews to allow for faster release or experimentation.\n2. **Loose coupling:** Having modular components that contain functionality can allow loose coupling, where changes to extensions do not impact the quality of the main codebase or other extensions.\n3. **Dependency management:**  Each extension should be careful to pin the version range of the primary repository that it is built against (the same way it would any other dependency) and should be careful in its use of other dependencies that shadow dependencies of the primary repository such that the versions it chooses for those dependencies are compatible with the primary repository versions selected. Any conflicts with primary repository will be caught in the test framework for the extension.\n4. **Testing strategy:** How to test extensions both individually and in combination?\n   - **Testing extension individually:** Extensions template will provide a test framework to be used by the extension developers to test the capability added. This can include a framework for unit tests, runtime performance and quality tests.\n   - **Testing extension in combination with primary repository:** Extension developers have a well-patterned method for testing their extension against specific versions of the primary repository without involvement from the primary repository's maintainers.\n   - **Testing extension in combination with other extensions:** Providing a test framework for this scenario could result in being excessive especially if there are a large number of extensions that are still being explored by users and unlikely to be all used in combination. If a user runs into conflicts while using extensions in combination (which should be unlikely with sufficient loose coupling), the user can raise an issue to the respective extension owners who will sort it out. As an extension reaches later phases of the lifecycle and gets merged into the primary repository, it would be tested in combination with rest of library and any dependency conflicts will have to be resolved at the time.\n5. **Discoverability and Usability:**\n   - Make extensions easily discoverable with a publishing page showing the extensions that users have created and want to share for product usage.\n   - Allow registration of extensions with the primary project for users to leverage extensions alongside the original project, thus keeping the same user experience.\n6. **Lifecycle of extensions and maintainability:** Establish the lifecycle for extensions from creation to porting into the primary codebase, along with clear ownership guidelines.\n   - Extension creators continue maintaining the extension, providing any support and fixing defects. Any extension left unmaintained will be unlisted from the publishing page.\n   - Create criteria for when an extension can be ported to the primary repository, such as adoption of the extension by internal products and demand for the feature.\n   - Porting process of the extension to the primary repository will follow more stringent code review guidelines as set by library maintainers.\n\n![Software architecture with extensions](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/extensions-for-sustainable-growth/extensions-for-sustainable-growth.png)\n\nFollowing these principles ensures that:\n\n- Developers can add new features to a project's ecosystem without requiring them to write large amounts of [boilerplate](https://en.wikipedia.org/wiki/Boilerplate_code) code.\n- Extensions are discoverable in a repeatable manner by all users of the primary project; just because code doesn't live in the main repository yet does not mean it is not valuable.\n- The maintainer burden is reduced until an extension has demonstrated that it fills an important gap in the primary project.\n- The core project's common code (e.g. base classes and utility functions) can be a starting point for new development that extends project's domain. This avoids the need to port innovative work after-the-fact, thus reducing the overall burden of developing novel features for the project.\n- Developers are more likely to contribute and stay involved in maintenance and building communities for their codebase, which is also good for the health of the overall project ecosystem.",
    "resulting_context": "- The project is able to scale with the addition of new features, without adding maintenance overhead on the primary project repository.\n- Faster release of new features for the community to explore, encouraging innovation and experimentation.\n- Reduced the costly code review and feature hardening process until the feature is able to prove its utility. This has cost savings benefits for the organization.\n- A post problem that can be introduced - what happens if an extension can not complete the full lifecycle?\n   - If an extension is not adopted over a period of time and could not build a community around it to support maintenance, it would be up to the extension owner to continue maintaining it for however long they want to. If an extension is left unmaintained, it would be unpublished.\n   - If an extension developer is unable to further maintain their project, and other developers in the community want to continue supporting it, they may maintain the extension going forward.",
    "known_instances": "* **IBM Corporation** has adopted this solution to scale [InnerSource AI libraries](https://youtu.be/Lz-tIc2cyRM). Using extensions, developers are able to extend AI libraries with more algorithms and share their innovations with the company-internal community. The core libraries only contain strategic algorithms that have been adopted and validated, keeping them easier to maintain as we scale contributions.",
    "alias": "Extensions to Manage Contributions at Scale",
    "status": "Structured",
    "author(s)": "- Sukriti Sharma, IBM\n- Alexander Brooks, IBM\n- Gabe Goodhart, IBM",
    "slug": "extensions-for-sustainable-growth"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/document-your-guiding-principles.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nDocument your Guiding Principles\n\n## Patlet\n\nThe usual InnerSource explanation of \"applying open source best practices inside an organisation\" does not work well with people lacking an open source background.\nAs a remedy the most important principles of InnerSource get documented and published widely.\n\n## Problem\n\nThe organisation is trying to roll out InnerSource at a larger scale.\nThe initiative started among open source enthusiasts.\nThe goal is now to get buy-in from people that are lacking open source experience.\nFor that audience the typical slogan of \"applying open source best practices\" is no longer sufficient to transport the message of what InnerSource is, which problems it solves and which tools it uses for solving these issues.\nAs a result InnerSource adoption in the organisation slows down.\nTeams develop diverging ideas of what the goals of InnerSource is about and how to best implement it leading to confusion when contributors are starting to cross team boundaries.\n\n## Story\n\nEarly experiments in an organisation have shown that open source collaboration best practices can be beneficial.\nThe next step now is to move the initiative to teams and individuals lacking a deep background in open source.\n\nThe goal now is to clearly communicate the goals of the InnerSource initiative\nas well as a clear path towards achieving these goals.\n\n## Context\n\n* InnerSource as a term is circulating among employees.\n* The initiative started among open source enthusiasts.\n\n## Forces\n\n* Teams have trouble communicating exactly what the important aspects of InnerSource are.\n* People lacking open source experience fail to understand what it means to bring open source best practices into the organisation.\n* On a daily basis teams trying to follow InnerSource best practices have a hard time deciding if what they are doing is inline with general InnerSource values.\n\n## Solution\n\nThose driving the InnerSource initiative in the organisation need to help the teams and individuals that are lacking a deep background in open source, and therefore have a less intuitive understanding of InnerSource.\n\nClarity should be provided to teams and individuals by documenting these two areas:\n\n1. **Purpose** - Why does the organisation want to adopt InnerSource?\n2. **Principles** - Which InnerSource principles will help to address these challenges?\n\nThe following sections provide more details about both of these, meant as possible starting points to document them for your organization.\n\n### Why does the organisation want to adopt InnerSource?\n\nIn the past InnerSource has proven to be successful to solve several issues commonly found in organisations.\n\nHowever which organizational challenges does your organization hope to improve upon using InnerSource?\n\nInstead of going for generalizations, try to exactly identify the solutions that match the challenges of your organisation - preferably with those affected by the change you want to see.\n\nSome challenges that others have addressed by following InnerSource best practices:\n\n* Reduce development silos caused by excessive ownership culture.\n* Increase innovation speed by reducing time spent solving similar issues by fostering healthy code reuse.\n* Increase development speed by better cross-team collaboration.\n* Solve project/ team dependencies beyond \"wait it out\" and \"build workarounds\", thereby reducing engineering bottlenecks.\n* Increase quality.\n* Increase employee happiness.\n* To increase success of new hires.\n* To build actionable documentation.\n\n### Which InnerSource principles will help to address these challenges?\n\nOnce teams understand which problems InnerSource will help them address, the next step is to explain which principles help address these challenges.\n\nBased on basic open source development principles the following guidelines have been proven successful:\n\n(1) Code must be transparently hosted within the organisation\n\nSource code, documentation, data relevant for project development must be available and easy to find for anyone in the organisation.\n\n(2) Contributions over feature requests\n\nAll stakeholders of a project act as potential contributors and are being treated and supported as such.\nContributions remain suggestions instead of requirements.\nCoordination before a contribution helps avoid wasted effort.\nProjects provide contribution guidelines to avoid friction.\n\n(3) Mistakes are opportunities for learning\n\nWith work visible across the entire organisation any mistake is visible to everyone.\nAs a result a culture must be established in which mistakes are opportunities for learning instead of failure that should be avoided at all cost.\n\n(4) Written over verbal communication\n\nFor projects that span multiple teams, potentially on diverging meeting schedules, it needs to be possible to collaborate asynchronously.\nThe goal for InnerSource projects is to recruit new contributors.\nFor that, potential future contributors need to be able to follow the project progress on a self serve basis with a very low barrier to entry.\nIf project relevant communication happens through synchronous communication, arguments discussed need to be made transparent in the written channel - decisions should be finalized only there.\nAs a side effect this leads to passive base documentation that is very valuable for any newcomer to the project.\n\n(5) Allow written advice to accumulate in a persistent, searchable archive\n\nAll project communication, in particular decisions taken and discussions leading up to those decisions, need to be archived.\nIt must be possible to reference communication via stable URLs.\nPrevious communication needs to be stored in a way that can easily be searched.\n\nTwo caveats though:\n\n1. This does not replace structured documentation. It can serve as a starting point to collect structured documentation though.\n2. There are exceptions to the rule of everything being written and accessible to the entire organisation: People related discussions as well as security related discussions are sensitive and should not be held in public.\n\n(6) Reward Trusted Committership\n\nAll contributions (e.g. source code, documentation, bug reports, input to discussions, user support, marketing) are welcome and are being rewarded.\nThose showing support for the project are being invited as [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md).\nAll Trusted Committers of a project are published.\n\n## Resulting Context\n\n* Organisation members understand which challenges they can address by applying InnerSource best practices.\n* Organisation members lacking prior open source experience understand the basic values and principles of InnerSource projects.\n* Organisation members lacking prior open source experience are able to check their daily activities against a set of common established values.\n* The organisation's development practices become more similar to open source projects thus making it easier for organisation members to participate in open source projects.\n\n## Known Instances\n\n### Europace AG\n\nThe InnerSource principles listed in the Solution above are mostly based on Europace's experience.\nFor more details see [Europace InnerSource Prinzipien](https://tech.europace.de/post/europace-inner-source-prinzipien/) (in German).\n\n### GitHub\n\n#### Purpose\n\nOften at GitHub we work in a model where teams contribute features to areas outside their area of responsibility. Common examples include sales engineering contributing features to unblock a sale, Special Projects contributing urgently needed, high impact features across the product, and a team working across multiple areas to deliver a feature.\n\n#### Principles\n\nOverall the principles outlined in this doc are to avoid increasing tech debt and support burden for the owning team. Oftentimes help is being lent to a team because they are behind due to support and maintenance costs in their area of responsibility and they do not have bandwidth to contribute to the feature. Any new features done by another team that add to that support burden or tech debt means even less time for the owning team to work on new features, so we want to make sure they are done right.\n\nAt the same time, we strive to be a company where engineers freely work across boundaries, and business priorities often require that we contribute to areas outside our core areas of ownership.\n\nA good summary of the principles is to leave the area in as good as or better shape than you found it.\n\nWith that in mind, here are principles we agree on:\n\n- Avoid minimum viable products (MVP) that accrue feature debt. It is ok to ship an MVP to get customer feedback, but the contributing team must be committed to finishing the feature set. Examples include:\n  - Commitment to go beyond MVP to a solution that will satisfy most customers.\n  - Full support for administration of new features (e.g. support in the settings UI vs. just doing a command line).\n  - Surface features in both the UI and API vs. only deliver an API (or vice versa)\n  - Ensuring features work in cloud and local server environments.\n- Support the feature work up to and beyond its deployment to production\n  - Coordinate incremental rollout\n  - Handle support tickets\n  - Plan time to address customer feedback (features and bugs)\n- Build features in the right way (do not accrue tech debt)\n  - Agree on requirements and solution with Product and Engineering teams\n  - Proper architecture and design\n  - Make sure data is stored properly to avoid later data migrations.\n  - Appropriate telemetry is in place\n  - Appropriate test coverage is in place\n  - Supported on cloud and local production environments (including setup, configuration, backup / restore, migrations, etc.)\n  - Bugs fixed\n  - Documentation updated\n\n#### Engagement\n\nWe use an engagement model because we like to lay out what concrete steps can be taken by a team when contributing features to areas outside their area of responsibility.\n\nA typical engagement model at GitHub looks like this:\n\n- Get approval on the feature set and rollout plan from the product owner.\n- Get approval on engineering design, including addressing the non-functional requirements (telemetry, test coverage, multi-environment testing and support) from the engineering owner (typically engineering manager and director).\n- Do code reviews along the way, along with reviewing any new or changed requirements.\n\n### Robert Bosch GmbH\n\n#### Purpose\n\nFostering collaboration, learning and innovation is the main focus of the Bosch InnerSource initiative (BIOS).\n\n#### Principles\n\nTo that end, Bosch applied the following principles:\n\n- **Openness**: We lower the barriers for entry into BIOS communities as much as we can.\n- **Transparency**: We are radically transparent and share our work products, our communication, and our decision making with all associates in the company.\n- **Voluntariness**: The decision to join and contribute to a BIOS community is left to each associate. Associates should work within BIOS because they are intrinsically motivated, not because their manager told them so.\n- **Self-Determination**: BIOS communities are free to choose what to work on, when they work and what tools and processes they use to work.\n- **Meritocracy**: Power is vested in BIOS project members based on their merits, that is, based on the quality and quantity of their contributions.\n\n![BIOS Principles](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/bios-principles.png)\n\nThe principles _Openness_, _Transparency_ and _Voluntariness_ helped grow diverse communities of intrinsically motivated associates.\n_Meritocracy_ has proven to be an effective motivation for making great contributions.\n_Self-Determination_ allowed the communities to use their limited time for contributions in the most effective and efficient way.\n\n## Status\n\nStructured\n\n## Authors\n\n* Isabel Drost-Fromm\n* Georg Grütter\n\n## Acknowledgements\n\n* Zack Koppert - for sharing GitHub's approach in the Known Instances\n\n## Alias\n\nExplicit InnerSource Principles\n",
    "title": "Document your Guiding Principles",
    "patlet": "The usual InnerSource explanation of \"applying open source best practices inside an organisation\" does not work well with people lacking an open source background.\nAs a remedy the most important principles of InnerSource get documented and published widely.",
    "problem": "The organisation is trying to roll out InnerSource at a larger scale.\nThe initiative started among open source enthusiasts.\nThe goal is now to get buy-in from people that are lacking open source experience.\nFor that audience the typical slogan of \"applying open source best practices\" is no longer sufficient to transport the message of what InnerSource is, which problems it solves and which tools it uses for solving these issues.\nAs a result InnerSource adoption in the organisation slows down.\nTeams develop diverging ideas of what the goals of InnerSource is about and how to best implement it leading to confusion when contributors are starting to cross team boundaries.",
    "story": "Early experiments in an organisation have shown that open source collaboration best practices can be beneficial.\nThe next step now is to move the initiative to teams and individuals lacking a deep background in open source.\n\nThe goal now is to clearly communicate the goals of the InnerSource initiative\nas well as a clear path towards achieving these goals.",
    "context": "* InnerSource as a term is circulating among employees.\n* The initiative started among open source enthusiasts.",
    "forces": "* Teams have trouble communicating exactly what the important aspects of InnerSource are.\n* People lacking open source experience fail to understand what it means to bring open source best practices into the organisation.\n* On a daily basis teams trying to follow InnerSource best practices have a hard time deciding if what they are doing is inline with general InnerSource values.",
    "solution": "Those driving the InnerSource initiative in the organisation need to help the teams and individuals that are lacking a deep background in open source, and therefore have a less intuitive understanding of InnerSource.\n\nClarity should be provided to teams and individuals by documenting these two areas:\n\n1. **Purpose** - Why does the organisation want to adopt InnerSource?\n2. **Principles** - Which InnerSource principles will help to address these challenges?\n\nThe following sections provide more details about both of these, meant as possible starting points to document them for your organization.",
    "resulting_context": "* Organisation members understand which challenges they can address by applying InnerSource best practices.\n* Organisation members lacking prior open source experience understand the basic values and principles of InnerSource projects.\n* Organisation members lacking prior open source experience are able to check their daily activities against a set of common established values.\n* The organisation's development practices become more similar to open source projects thus making it easier for organisation members to participate in open source projects.",
    "known_instances": "",
    "status": "Structured",
    "authors": "* Isabel Drost-Fromm\n* Georg Grütter",
    "acknowledgements": "* Zack Koppert - for sharing GitHub's approach in the Known Instances",
    "alias": "Explicit InnerSource Principles",
    "slug": "document-your-guiding-principles"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/dedicated-community-leader.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nDedicated Community Leader\n\n## Patlet\n\nSelect people with both communications and technical skills to lead the communities to ensure success in starting an InnerSource initiative.\n\n## Problem\n\nHow do you ensure that a new InnerSource initiative has the right [community leader](http://www.artofcommunityonline.org/) to grow its impact?\n\nSelecting the wrong persons and/or not providing enough capacity for them risks wasted effort and ultimately the failure of a new InnerSource initiative.\n\n## Story\n\nConsider the following story. A company wants to start an InnerSource initiative in order to foster collaboration across organizational boundaries. They have decided to start with an experimental phase with limited scope. Management has selected a suitable pilot topic for the first InnerSource community and expects contributions from many business units across the organization. The company has nominated a new hire to head the community for 50 % of his work time, because he was not yet 100 % planned for. After 6 months, the community has received only a few contributions, most of which are from a single business unit. The company replaces the community leader with someone who has a longer history in the company, this time for only 30 % of his time. After another 6 months, the number of contributions has picked up only marginally. The company is no longer convinced that InnerSource helps to achieve their goal of increased, cross divisional collaboration and abandons InnerSource.\n\n## Context\n\n- The company is a large and old company. It has no prior experience in Open Source or other, community based working models. The company culture is best characterized as a classical top-down management style - it is generally at odds with community culture.\n- While there are supporters and a sponsor in top level management, middle management in the company is not yet sold on InnerSource.\n- Management was not convinced to provide more than a limited budget to fund a part time community leader, only.\n- The initially selected community leader has little or no prior experience with the Open Source working model.\n- The initially selected developer community leader does not have an extensive network within the company.\n\n## Forces\n\nIf a company does not significantly invest in the initial InnerSource community in terms of budget and capacity for InnerSource, the credibility of its commitment to InnerSource might be perceived as questionable. A common impulse of a company with a traditional management culture to a project or initiative not performing as expected will be to replace its leader. Doing that without involving the community and following meritocratic principles will further undermine the company's commitment to InnerSource by highlighting the friction between the current company culture and the target culture - a community culture.\n\nThe value contribution of InnerSource projects will not be obvious for many managers which are steeped in traditional project management methods. Those managers are less likely to assign one of their top people, who are usually in high demand by non InnerSource-projects, to an InnerSource project for a significant percentage of their work time.\n\nCommunication takes up a significant percentage of a community leader's daily work. At the same time, he or she will likely also have to spearhead the initial development, too. In the face of limited capacity, inexperienced leaders will tend to focus on development and neglect communication. The barrier for potential contributors to make their first contribution and to commit to the community will be much higher if the community leader is hard to reach or is slow to respond to feedback and questions for lack of time. Furthermore, technically inexperienced leaders will most likely have a harder time to attract and retain highly experienced contributors than a top performer with a high degree of visibility within a company would have.\n\nIf a community can not grow fast enough and pick up enough speed, chances are they won't be able to convincingly demonstrate the potential of InnerSource.\n\nIf the company selects an experienced project or line manager steeped in traditional management methods to be the community leader, he or she is likely to focus on traditional management topics such as resource allocation, providing structure and reporting channels rather than leading by example through meritocratic principles. This will undermine the credibility of the InnerSource initiative in the eyes of developers.\n\n## Solution\n\nSelect a community leader who:\n\n- is experienced in the Open Source working model or similar community based working models,\n- has the required soft-skills to act as a natural leader,\n- leads by example and thus justifies his position in the community meritocracy,\n- is an excellent networker,\n- inspires community members,\n- can communicate effectively to both executive management and developers and\n- is able to handle the managerial aspects of community work.\n\nEmpower the community leader to dedicate 100 % of his time to community work including communication and development. Inform management of the need to be sensitive to the views of the community when engendering a change in community management. Ideally, empower the community to nominate a community leader themselves.\n\n## Resulting Context\n\nA community leader with the properties described above will lend a face and embody the company's commitment to InnerSource. It will make it more likely that other associates in his network will follow his lead and contribute to InnerSource. Over time, he or she will be able to build up a stable core team of developers and hence increase the chances of success for the InnerSource project. By convincing a large enough audience within his company of the potential of InnerSource, he or she will make an important contribution to changing the company culture towards a community culture.\n\nHaving excellent and dedicated community leaders is a precondition for the success of InnerSource. It is, however, not a silver bullet. There are many challenges of InnerSource which are above and beyond what a community leader can tackle, such as budgetary, legal, fiscal or other organizational challenges.\n\n## Known Instances\n\n_BIOS at Robert Bosch GmbH_. Note that InnerSource at Bosch was, for the majority, aimed at increasing innovation and to a large degree dealt with internal facing products. This pattern is currently not used at Bosch for lack of funding.\n\n## Alias\n\nDedicated Community Manager\n\n## Status\n\n* Structured\n\n## Authors\n\n- Georg Grütter (Robert Bosch GmbH)\n- Diogo Fregonese (Robert Bosch GmbH)\n\n## Acknowledgements\n\n- Tim Yao\n- Padma Sudarsan\n- Nigel Green\n- Nick Yeates\n- Erin Bank\n- Daniel Izquierdo\n\n## Changelog\n\n- **2016-11-06** - 1st review\n- **2017-04-06** - 2nd review\n",
    "title": "Dedicated Community Leader",
    "patlet": "Select people with both communications and technical skills to lead the communities to ensure success in starting an InnerSource initiative.",
    "problem": "How do you ensure that a new InnerSource initiative has the right [community leader](http://www.artofcommunityonline.org/) to grow its impact?\n\nSelecting the wrong persons and/or not providing enough capacity for them risks wasted effort and ultimately the failure of a new InnerSource initiative.",
    "story": "Consider the following story. A company wants to start an InnerSource initiative in order to foster collaboration across organizational boundaries. They have decided to start with an experimental phase with limited scope. Management has selected a suitable pilot topic for the first InnerSource community and expects contributions from many business units across the organization. The company has nominated a new hire to head the community for 50 % of his work time, because he was not yet 100 % planned for. After 6 months, the community has received only a few contributions, most of which are from a single business unit. The company replaces the community leader with someone who has a longer history in the company, this time for only 30 % of his time. After another 6 months, the number of contributions has picked up only marginally. The company is no longer convinced that InnerSource helps to achieve their goal of increased, cross divisional collaboration and abandons InnerSource.",
    "context": "- The company is a large and old company. It has no prior experience in Open Source or other, community based working models. The company culture is best characterized as a classical top-down management style - it is generally at odds with community culture.\n- While there are supporters and a sponsor in top level management, middle management in the company is not yet sold on InnerSource.\n- Management was not convinced to provide more than a limited budget to fund a part time community leader, only.\n- The initially selected community leader has little or no prior experience with the Open Source working model.\n- The initially selected developer community leader does not have an extensive network within the company.",
    "forces": "If a company does not significantly invest in the initial InnerSource community in terms of budget and capacity for InnerSource, the credibility of its commitment to InnerSource might be perceived as questionable. A common impulse of a company with a traditional management culture to a project or initiative not performing as expected will be to replace its leader. Doing that without involving the community and following meritocratic principles will further undermine the company's commitment to InnerSource by highlighting the friction between the current company culture and the target culture - a community culture.\n\nThe value contribution of InnerSource projects will not be obvious for many managers which are steeped in traditional project management methods. Those managers are less likely to assign one of their top people, who are usually in high demand by non InnerSource-projects, to an InnerSource project for a significant percentage of their work time.\n\nCommunication takes up a significant percentage of a community leader's daily work. At the same time, he or she will likely also have to spearhead the initial development, too. In the face of limited capacity, inexperienced leaders will tend to focus on development and neglect communication. The barrier for potential contributors to make their first contribution and to commit to the community will be much higher if the community leader is hard to reach or is slow to respond to feedback and questions for lack of time. Furthermore, technically inexperienced leaders will most likely have a harder time to attract and retain highly experienced contributors than a top performer with a high degree of visibility within a company would have.\n\nIf a community can not grow fast enough and pick up enough speed, chances are they won't be able to convincingly demonstrate the potential of InnerSource.\n\nIf the company selects an experienced project or line manager steeped in traditional management methods to be the community leader, he or she is likely to focus on traditional management topics such as resource allocation, providing structure and reporting channels rather than leading by example through meritocratic principles. This will undermine the credibility of the InnerSource initiative in the eyes of developers.",
    "solution": "Select a community leader who:\n\n- is experienced in the Open Source working model or similar community based working models,\n- has the required soft-skills to act as a natural leader,\n- leads by example and thus justifies his position in the community meritocracy,\n- is an excellent networker,\n- inspires community members,\n- can communicate effectively to both executive management and developers and\n- is able to handle the managerial aspects of community work.\n\nEmpower the community leader to dedicate 100 % of his time to community work including communication and development. Inform management of the need to be sensitive to the views of the community when engendering a change in community management. Ideally, empower the community to nominate a community leader themselves.",
    "resulting_context": "A community leader with the properties described above will lend a face and embody the company's commitment to InnerSource. It will make it more likely that other associates in his network will follow his lead and contribute to InnerSource. Over time, he or she will be able to build up a stable core team of developers and hence increase the chances of success for the InnerSource project. By convincing a large enough audience within his company of the potential of InnerSource, he or she will make an important contribution to changing the company culture towards a community culture.\n\nHaving excellent and dedicated community leaders is a precondition for the success of InnerSource. It is, however, not a silver bullet. There are many challenges of InnerSource which are above and beyond what a community leader can tackle, such as budgetary, legal, fiscal or other organizational challenges.",
    "known_instances": "_BIOS at Robert Bosch GmbH_. Note that InnerSource at Bosch was, for the majority, aimed at increasing innovation and to a large degree dealt with internal facing products. This pattern is currently not used at Bosch for lack of funding.",
    "alias": "Dedicated Community Manager",
    "status": "* Structured",
    "authors": "- Georg Grütter (Robert Bosch GmbH)\n- Diogo Fregonese (Robert Bosch GmbH)",
    "acknowledgements": "- Tim Yao\n- Padma Sudarsan\n- Nigel Green\n- Nick Yeates\n- Erin Bank\n- Daniel Izquierdo",
    "changelog": "- **2016-11-06** - 1st review\n- **2017-04-06** - 2nd review",
    "slug": "dedicated-community-leader"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/crossteam-project-valuation.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nCross-Team Project Valuation\n\n## Patlet\n\nIt's hard to sell the value of cross-team InnerSource projects that don't provide a direct impact on company revenue.\nHere's a data-driven way to represent your project that both articulates its value and amplifies it.\n\n## Context\n\n* You are responsible for a cross-team that serves as a platform for others in the company.\n* The cross-team project does not deliver any direct value for company revenue.\n\n## Problem\n\nCross-team projects can potentially have a very large impact on the company yet are difficult to represent in a data-driven fashion.\nAs a result, it is easy and common to either pursue projects that does not provide real value or to underfund what would otherwise produce great value.\n\n## Forces\n\n* Projects need to show value (objective or subjective) to company leadership in order to be funded.\n* Cross-team project value is dispersed across multiple end business units.\n* Due to this dispersal, cross-team project value is difficult to measure directly.\n\n## Solution\n\nSet in place a pattern and model of how to value cross-team projects.\nSuch models give us the tool that we need to focus and amplify high-value collaboration for the company.\n\nThe core of all cross-team project value is the idea that we can get more done together than apart.\nAscribing value to a cross-team effort is an exercise in quantifying _how much more_ is getting done together.\nThe exact delta in productivity will vary by domain and project.\nThere is a common process, by which you can create a model to calculate it.\n\n### Explanation\n\nAssemble a small team of subject matter experts in your domain.\nUsing that team of experts, estimate 4 things about each consumer of your project output:\n\n* How long does it take them to consume your project output?\n* How long would it otherwise take them to home-roll the value of your project output for themselves?\n* What percentage of your project output is actually useful for them?\n* How much time on an ongoing basis (ideally per-use) would they otherwise spend maintaining their home-rolled solution?\n\nWhen making these estimations, it's impossible to know with high accuracy _exactly_ how long any activities take.  That's not your goal.\nRather than exactness, you should strive to _**set a worst-case bound**_ on these estimates.\nThe idea is for the group of experts to be able to say to each other, \"We don't know exactly how long it would take, but we can all agree it's _at least_ this much.\"\nSpecifically, you should estimate a _maximum_ reasonable time to consume your project output and _minimum_ reasonable times for consumers to otherwise home-roll, use and maintain their own solutions.\n\nOne note about cost of \"rolling your own solution\" (home-roll).  The cost to home-roll a solution is NOT necessarily (very unlikely, in fact) the same as the cost of making a shared solution.\nOftentimes for the same functionality the modularity and quality involved in building a cross-team, shared solution makes it a noticeably higher investment than a quick, hardcoded implementation used just once.\n\n### Formula\n\nOnce you have your worst-case bounds you can value your cross-team project output during a given time frame via the simple formula:\n\n```\n[Time Saved] - [Time Invested]\n\n([Count of New Onboardings] * [Cost to Home-Roll] * [Percent Useful Functionality] + [Count of Usages] * [Maintenance Cost Per Use]) - ([Count of New Onboardings] * [Cost to Onboard])\n\n[Count of New Onboardings] * ([Cost to Home-Roll] * [Percent Useful Functionality] - [Cost to Onboard]) + [Count of Usages] * [Maintenance Cost Per Use]\n```\n\n### Commentary\n\nDespite the trappings of rigor, this process does not yield an exact way to measure cross-team project output.\nIn-practice, however, it does give a framework by which you can make a sound decision at how to fund this work.\nAfter having good, reasonable data according to the above explanation, you should fund dedicated development hours toward running the project up to _**at least**_ of the lesser of the following three levels:\n\n1. The raw hours saved by the formula above.  Since we're all sure that the formula will produce a number that is below the true number of hours saved, you can have confidence that funding the project up to that point is a sure win for you.\n1. The amount of time that it takes to support inner sourced contributions to cross-team projects.  Since the contributor would likely have done the work anyway in a one-off fashion, it is worth it to fund the time it takes to facilitate their work going into a shared location.\n1. Whatever feels good to you.  One intentional side effect of having a valuation formula is that it naturally forces measurement of the key points of usage that provide value to consumers.\n\nThose measurements can be understood and consumed in their raw form to provide you with a gut-feel idea of how valuable is the project.\n\nSome may be concerned about the lack of accuracy in this valuation approach.  It's okay for this process to not give an exact measurement.  It just needs to be accurate enough to accomplish 2 purposes:\n\n1. Give a means to represent the value of what is happening to those that are organizing and funding cross-team efforts.\n1. Help those involved to know what areas of cross-team effort are higher priority to pursue based on their value.\n\nIn-practice, as long as these valuations are within an order-of-magnitude of reality and one-another, they are sufficiently accurate to fill these purposes.\nThey will provide a head-and-shoulders improvement in on-the-ground results over the ad-hoc valuations (and resultant effects) described in the **Problem** section at the beginning of this document.\n\n## Resulting Context\n\n* Data-driven means to discuss the value and funding of the cross-team project with leadership.\n* Key metrics around the cross-team project instrumented in raw form.\n* Defining how the cross-team project provides value tends to lead to it actually producing greater value for the company.\n* Generally-successful project and \"buzz\" around it.\n\n## Known Instances\n\n* Nike\n\n## Status\n\n* Structured\n* Proven in multiple domains.\n\n## Authors\n\n* Russ Rutledge\n\n## Acknowledgement\n\n* Jeremiah Wright for teaching me to think about cross-team projects as an internal business dealing in the currency of developer time.\n",
    "title": "Cross-Team Project Valuation",
    "patlet": "It's hard to sell the value of cross-team InnerSource projects that don't provide a direct impact on company revenue.\nHere's a data-driven way to represent your project that both articulates its value and amplifies it.",
    "context": "* You are responsible for a cross-team that serves as a platform for others in the company.\n* The cross-team project does not deliver any direct value for company revenue.",
    "problem": "Cross-team projects can potentially have a very large impact on the company yet are difficult to represent in a data-driven fashion.\nAs a result, it is easy and common to either pursue projects that does not provide real value or to underfund what would otherwise produce great value.",
    "forces": "* Projects need to show value (objective or subjective) to company leadership in order to be funded.\n* Cross-team project value is dispersed across multiple end business units.\n* Due to this dispersal, cross-team project value is difficult to measure directly.",
    "solution": "Set in place a pattern and model of how to value cross-team projects.\nSuch models give us the tool that we need to focus and amplify high-value collaboration for the company.\n\nThe core of all cross-team project value is the idea that we can get more done together than apart.\nAscribing value to a cross-team effort is an exercise in quantifying _how much more_ is getting done together.\nThe exact delta in productivity will vary by domain and project.\nThere is a common process, by which you can create a model to calculate it.",
    "resulting_context": "* Data-driven means to discuss the value and funding of the cross-team project with leadership.\n* Key metrics around the cross-team project instrumented in raw form.\n* Defining how the cross-team project provides value tends to lead to it actually producing greater value for the company.\n* Generally-successful project and \"buzz\" around it.",
    "known_instances": "* Nike",
    "status": "* Structured\n* Proven in multiple domains.",
    "authors": "* Russ Rutledge",
    "acknowledgement": "* Jeremiah Wright for teaching me to think about cross-team projects as an internal business dealing in the currency of developer time.",
    "slug": "crossteam-project-valuation"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/core-team.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nCore Team\n\n## Patlet\n\nEven when an InnerSource project is widely needed, contributions and usage may be hindered because the project is difficult to work with.\nEstablish a core team that is dedicated to take care of the project's fundamental items.\nTheir work enables contributors to add and use the features that provide value to their scenarios.\n\n## Problem\n\n* It is difficult to contribute to the project.\nThis could be due to things like:\n  * Can't run the project locally.\n  * Poor documentation.\n  * Convoluted code.\n  * Inadequate testing.\n* It is difficult to use the project.\nSome possible causes:\n  * Poor documentation (again).\n  * Frequent bugs.\n  * Unintuitive setup.\n\n## Story\n\nThere's a central project that everyone depends on.\nWhat a great candidate for InnerSource!\nUnfortunately, the project has grown organically, with various contributions and additions slapped on haphazardly.\nNow it's an icky, thick morass of code that no one understands and everyone is afraid to touch.\nIt's clearly due for an overhaul (e.g. refactoring, testing, documentation, etc.), but even though everyone needs and wants that work to happen, no one takes the time to do it.\n\n## Context\n\n* Many teams need the project.\n* The project has significant tech debt.\n* Slow adoption and iteration on the project.\n* There is not a owner or maintainer who takes reponsibility for the project and contribution ecosystem as a whole.\n\n## Forces\n\n* Every contributing team is busy, and therefore prioritizes work that results in an immediate payoff for themselves.\n* As the project grows the natural trend is for it to become more difficult to use and to modify.\n\n## Solution\n\nForm a core team whose job it is to maintain this project in a state so that others can easily onboard and contribute to it.\nThis core team does the work that is necessary for a healthy usage and contribution ecosystem.\nThis critical work tends to not be prioritized as a contribution.\nCategories of this type of work include communication, local environment, and DevOps infrastructure.\n\nHere are some specific examples:\n\n* Production bugs\n* Documentation\n* Onboarding tutorials and examples\n* Automated testing\n* CI/CD\n* Local environment\n* Modularization\n* Versioning\n* Monitoring\n* Trailblazing new classes/categories of features\n\nEach of these items is very important to a healthy product ecosystem, yet is unlikely to be prioritized as a contribution.\n\nThe core team may be composed of a small number of people on a full-time or a part-time basis.\nThe choice depends on the amount of work needed, the availability of resources, and the culture of the organization.\nThe most important consideration is to form the team in a way that allows the organization to empower and hold them accountable in the same way as any other team.\n\nDue to their central role, core team members should nearly always fill the role of **Trusted Committers** as well (for more on that concept see [Learning Path][tc-learning-path] and [Pattern][tc-pattern]).\nWhile the Trusted Committer role focuses mostly on facilitating others' contribution and use of the project, a core team member regularly contributes to the project as well.\nThe core team doesn't have its own business agenda that determines its contributions.\nThey decide what to work on based on what will help others most to use and contribute to the project.\n\nA good way to continually remind the core team of this goal is to have them report regularly on:\n\n* number of active teams using the project\n* number of off-team contributions to the project.\n\nContinual focus on these metrics will naturally drive the core team to prioritize generally the right work to create a thriving InnerSource ecosystem around the project.\n\n![Responsibilities of Core Team and InnerSource Contributors](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/core-team.png)\n\n## Resulting Context\n\n* It is easy to use and contribute to the project.\n* Many teams use and contribute to the project.\n* Core team has their success defined in terms of others' interaction with and response to their project.\n\n## Rationale\n\nSeparating out a core team and tasking them in this way helps to fill the gaps that a successful project needs yet are left behind by contributors that are pursuing their own agenda only.\nThe core team fills those gaps and greases the wheels so that the contribution ecosystem remains healthy.\n\n## Known Instances\n\n* **Nike** implemented this pattern to manage the InnerSource effort around its reusable CI/CD pipelines.\n* **WellSky** established a Core Team for a key project. This allowed them to scale their InnerSource contributions to that project significantly - see [Wide-Scaled InnerSource with a Core Team](https://www.youtube.com/watch?v=kgxexjYdhIc).\n* **BBVA AI Factory** implemented this pattern as part of an InnerSource strategy to foster contribution to and reuse of data science code - see [Mercury: Scaling Data Science reusability at BBVA](https://www.bbvaaifactory.com/mercury-acelerando-la-reutilizacion-en-ciencia-de-datos-dentro-de-bbva/).\n\n## Status\n\nStructured\n\n## Author\n\n[Russell R. Rutledge](https://github.com/rrrutledge)\n\n[tc-learning-path]: https://innersourcecommons.org/learn/learning-path/trusted-committer/\n[tc-pattern]: ../2-structured/trusted-committer.md\n",
    "title": "Core Team",
    "patlet": "Even when an InnerSource project is widely needed, contributions and usage may be hindered because the project is difficult to work with.\nEstablish a core team that is dedicated to take care of the project's fundamental items.\nTheir work enables contributors to add and use the features that provide value to their scenarios.",
    "problem": "* It is difficult to contribute to the project.\nThis could be due to things like:\n  * Can't run the project locally.\n  * Poor documentation.\n  * Convoluted code.\n  * Inadequate testing.\n* It is difficult to use the project.\nSome possible causes:\n  * Poor documentation (again).\n  * Frequent bugs.\n  * Unintuitive setup.",
    "story": "There's a central project that everyone depends on.\nWhat a great candidate for InnerSource!\nUnfortunately, the project has grown organically, with various contributions and additions slapped on haphazardly.\nNow it's an icky, thick morass of code that no one understands and everyone is afraid to touch.\nIt's clearly due for an overhaul (e.g. refactoring, testing, documentation, etc.), but even though everyone needs and wants that work to happen, no one takes the time to do it.",
    "context": "* Many teams need the project.\n* The project has significant tech debt.\n* Slow adoption and iteration on the project.\n* There is not a owner or maintainer who takes reponsibility for the project and contribution ecosystem as a whole.",
    "forces": "* Every contributing team is busy, and therefore prioritizes work that results in an immediate payoff for themselves.\n* As the project grows the natural trend is for it to become more difficult to use and to modify.",
    "solution": "Form a core team whose job it is to maintain this project in a state so that others can easily onboard and contribute to it.\nThis core team does the work that is necessary for a healthy usage and contribution ecosystem.\nThis critical work tends to not be prioritized as a contribution.\nCategories of this type of work include communication, local environment, and DevOps infrastructure.\n\nHere are some specific examples:\n\n* Production bugs\n* Documentation\n* Onboarding tutorials and examples\n* Automated testing\n* CI/CD\n* Local environment\n* Modularization\n* Versioning\n* Monitoring\n* Trailblazing new classes/categories of features\n\nEach of these items is very important to a healthy product ecosystem, yet is unlikely to be prioritized as a contribution.\n\nThe core team may be composed of a small number of people on a full-time or a part-time basis.\nThe choice depends on the amount of work needed, the availability of resources, and the culture of the organization.\nThe most important consideration is to form the team in a way that allows the organization to empower and hold them accountable in the same way as any other team.\n\nDue to their central role, core team members should nearly always fill the role of **Trusted Committers** as well (for more on that concept see [Learning Path][tc-learning-path] and [Pattern][tc-pattern]).\nWhile the Trusted Committer role focuses mostly on facilitating others' contribution and use of the project, a core team member regularly contributes to the project as well.\nThe core team doesn't have its own business agenda that determines its contributions.\nThey decide what to work on based on what will help others most to use and contribute to the project.\n\nA good way to continually remind the core team of this goal is to have them report regularly on:\n\n* number of active teams using the project\n* number of off-team contributions to the project.\n\nContinual focus on these metrics will naturally drive the core team to prioritize generally the right work to create a thriving InnerSource ecosystem around the project.\n\n![Responsibilities of Core Team and InnerSource Contributors](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/core-team.png)",
    "resulting_context": "* It is easy to use and contribute to the project.\n* Many teams use and contribute to the project.\n* Core team has their success defined in terms of others' interaction with and response to their project.",
    "rationale": "Separating out a core team and tasking them in this way helps to fill the gaps that a successful project needs yet are left behind by contributors that are pursuing their own agenda only.\nThe core team fills those gaps and greases the wheels so that the contribution ecosystem remains healthy.",
    "known_instances": "* **Nike** implemented this pattern to manage the InnerSource effort around its reusable CI/CD pipelines.\n* **WellSky** established a Core Team for a key project. This allowed them to scale their InnerSource contributions to that project significantly - see [Wide-Scaled InnerSource with a Core Team](https://www.youtube.com/watch?v=kgxexjYdhIc).\n* **BBVA AI Factory** implemented this pattern as part of an InnerSource strategy to foster contribution to and reuse of data science code - see [Mercury: Scaling Data Science reusability at BBVA](https://www.bbvaaifactory.com/mercury-acelerando-la-reutilizacion-en-ciencia-de-datos-dentro-de-bbva/).",
    "status": "Structured",
    "author": "[Russell R. Rutledge](https://github.com/rrrutledge)\n\n[tc-learning-path]: https://innersourcecommons.org/learn/learning-path/trusted-committer/\n[tc-pattern]: ../2-structured/trusted-committer.md",
    "slug": "core-team"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/contracted-contributor.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nContracted Contributor\n\n## Patlet\n\nAssociates wanting to contribute to InnerSource are discouraged from doing so by their line management. Relief is provided by formal contracts and agreements.\n\n## Problem\n\nWithout support by middle management, the total number of contributors and, as\na result, the amount of contributions made and value generated by the\nInnerSource initiative will likely fall below expectation of top-level\nmanagement. This will likely be amplified if there is no adequate funding for\nand empowerment of [Dedicated Community Leaders](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/dedicated-community-leader.md).\nThis runs the risk of top-level management abandoning the InnerSource idea.\n\n## Context\n\nA large corporation has started an InnerSource initiative. Major goals for the\ninitiative are to increase the efficiency of distributed software development\nand to foster innovation by allowing every associate to voluntarily\ncontribute to InnerSource projects, regardless of topic and business unit.\n\nTop level management is on board and supporting the InnerSource initiative. For\nthem, the InnerSource initiative is just one of many initiatives to foster\ninnovation and efficiency, though. They are funding InnerSource with money and\ncapacity for community leaders and are largely giving autonomy as for how the\nbudget is spent. They are also limiting the breadth and duration of the\ninitiative and partake in periodic reviews until there is proof it yields\nthe expected results (see [Review Committee](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/review-committee.md)).  Top level\nmanagement has announced their support for InnerSource on various company-internal meetings.\n\nHowever, top-level management has not yet empowered or incentivised mid-level\nmanagers to allow or even motivate their employees to participate in\ncross-divisional InnerSource activities. In addition to that, the capacity of\nevery associate is usually allocated to non InnerSource projects for 100 % of\ntheir working time. Cross organizational collaboration is not yet the norm and\nline managers usually do not have targets outside of their own organisation.\nContributions to InnerSource projects are expected to be made during working\nhours, not during free time.\n\n## Forces\n\n- Managers are held responsible for the results of their business units. Letting their staff participate in InnerSource activities which might spend time making contributions outside of their business unit effectively reduces the capacity of his or her unit. This will likely make it harder for the managers to reach or exceed their goals.\n- Line managers and HR will, by default, judge the performance of their subordinates against their business units goals, which might not be aligned with the goals of the InnerSource community.\n- The less executive air cover a line manager perceives he has, the less likely is he or she to have his or her staff participate in InnerSource activities which contribute to another business unit.\n- The less transparency and control a line manager has of work done by one of her subordinates, the less likely is she to allow her to contribute.\n- The less formally work in InnerSource is managed and organised, the less likely a line manager who is accustomed to formal processes is to sign off on one of her employees contributing to InnerSource.\n- The more time an associate spends on contributions to an InnerSource project which does not benefit his day-to-day work, the more will the workload for his teammates in his business unit increase.\n- Individual contributors will likely consider participating in InnerSource as an opportunity to enhance their professional network within the company and to gain knowledge and experience in the technical area of her contributions.\n\n## Solution\n\nSet up a formal contracting between the contributor, their line manager and a\ncentrally funded and steered InnerSource governance office (ISGO). Have the\nISGO reimburse business units who contracted contributors for the contracted\ntime.\n\n- The contracting specifies a maximum percentage of the associates work time in InnerSource.\n- The contracting clearly states that work in the contributor's business unit takes precedence over work in InnerSource.\n- The contracting states that it is not required to work in InnerSource for the maximum percentage specified in the contract.\n- The contracting is signed by the contributor, the contributor's line manager, the governance office and the [Dedicated Community Leader](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/dedicated-community-leader.md) of the community the contributor will be contributing to.\n- The governance office offers to mediate between the contributor and her line manager in case of conflict regarding the time for contributions.\n- The [Dedicated Community Leader](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/dedicated-community-leader.md) participates in or provides input for performance reviews of contributors contracted for more than 20 %.\n\n![Contracted Contributor](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/contracted-contributor.png)\n\n## Resulting Context\n\nA formal contracting and centrally funded reimbursements convincingly\ncommunicating the organizations support for the InnerSource initiative, thus\nempowering middle management to sign off on it:\n\n- Allocation of corporate funds to business units for reimbursement of development capacity signals to line managers that InnerSource is deemed valuable by the organization, that it has executive air cover and that they are expected to support it, too.\n- A formal contracting signals that work in InnerSource is managed professionally and inspires trust.\n- A formal contracting increases transparency and provides a better overview about the associate's available capacity for his business unit and InnerSource projects, thus reducing the risk of \"over-booked/planned capacity\".\n\nA formal contracting is also beneficial for contributors and communities:\n\n- With a stable group of contributors, it is more likely that some of them will eventually achieve [Trusted Committer](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) status.\n- A formal contracting provides a basis for resolving conflict related to participation in InnerSource activities. Note that mediation will likely be successful only for a few companies with a culture conducive to that.\n\n## Known Instances\n\n- BIOS at Robert Bosch GmbH\n\n## Status\n\n* Structured\n\n## Author\n\n- Georg Grütter (Robert Bosch GmbH)\n\n## Acknowledgements\n\n- Diogo Fregonese (Robert Bosch GmbH)\n- Robert Hansel (Robert Bosch GmbH)\n- Jim Jagielski\n- Tim Yao\n- Cedric Williams\n- Klaas-Jan Stol\n- Padma Sudarsan\n- Nick Stahl\n- Ofer Hermoni\n- Robert C. Hanmer\n\n## Changelog\n\n- **2016-10-25** - first review\n- **2017-05-09** - rework\n- **2017-09-08** - second review, final rework and merged\n- **2021-02-27** - fixing issues with display of the pattern in the book\n",
    "title": "Contracted Contributor",
    "patlet": "Associates wanting to contribute to InnerSource are discouraged from doing so by their line management. Relief is provided by formal contracts and agreements.",
    "problem": "Without support by middle management, the total number of contributors and, as\na result, the amount of contributions made and value generated by the\nInnerSource initiative will likely fall below expectation of top-level\nmanagement. This will likely be amplified if there is no adequate funding for\nand empowerment of [Dedicated Community Leaders](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/dedicated-community-leader.md).\nThis runs the risk of top-level management abandoning the InnerSource idea.",
    "context": "A large corporation has started an InnerSource initiative. Major goals for the\ninitiative are to increase the efficiency of distributed software development\nand to foster innovation by allowing every associate to voluntarily\ncontribute to InnerSource projects, regardless of topic and business unit.\n\nTop level management is on board and supporting the InnerSource initiative. For\nthem, the InnerSource initiative is just one of many initiatives to foster\ninnovation and efficiency, though. They are funding InnerSource with money and\ncapacity for community leaders and are largely giving autonomy as for how the\nbudget is spent. They are also limiting the breadth and duration of the\ninitiative and partake in periodic reviews until there is proof it yields\nthe expected results (see [Review Committee](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/review-committee.md)).  Top level\nmanagement has announced their support for InnerSource on various company-internal meetings.\n\nHowever, top-level management has not yet empowered or incentivised mid-level\nmanagers to allow or even motivate their employees to participate in\ncross-divisional InnerSource activities. In addition to that, the capacity of\nevery associate is usually allocated to non InnerSource projects for 100 % of\ntheir working time. Cross organizational collaboration is not yet the norm and\nline managers usually do not have targets outside of their own organisation.\nContributions to InnerSource projects are expected to be made during working\nhours, not during free time.",
    "forces": "- Managers are held responsible for the results of their business units. Letting their staff participate in InnerSource activities which might spend time making contributions outside of their business unit effectively reduces the capacity of his or her unit. This will likely make it harder for the managers to reach or exceed their goals.\n- Line managers and HR will, by default, judge the performance of their subordinates against their business units goals, which might not be aligned with the goals of the InnerSource community.\n- The less executive air cover a line manager perceives he has, the less likely is he or she to have his or her staff participate in InnerSource activities which contribute to another business unit.\n- The less transparency and control a line manager has of work done by one of her subordinates, the less likely is she to allow her to contribute.\n- The less formally work in InnerSource is managed and organised, the less likely a line manager who is accustomed to formal processes is to sign off on one of her employees contributing to InnerSource.\n- The more time an associate spends on contributions to an InnerSource project which does not benefit his day-to-day work, the more will the workload for his teammates in his business unit increase.\n- Individual contributors will likely consider participating in InnerSource as an opportunity to enhance their professional network within the company and to gain knowledge and experience in the technical area of her contributions.",
    "solution": "Set up a formal contracting between the contributor, their line manager and a\ncentrally funded and steered InnerSource governance office (ISGO). Have the\nISGO reimburse business units who contracted contributors for the contracted\ntime.\n\n- The contracting specifies a maximum percentage of the associates work time in InnerSource.\n- The contracting clearly states that work in the contributor's business unit takes precedence over work in InnerSource.\n- The contracting states that it is not required to work in InnerSource for the maximum percentage specified in the contract.\n- The contracting is signed by the contributor, the contributor's line manager, the governance office and the [Dedicated Community Leader](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/dedicated-community-leader.md) of the community the contributor will be contributing to.\n- The governance office offers to mediate between the contributor and her line manager in case of conflict regarding the time for contributions.\n- The [Dedicated Community Leader](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/dedicated-community-leader.md) participates in or provides input for performance reviews of contributors contracted for more than 20 %.\n\n![Contracted Contributor](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/contracted-contributor.png)",
    "resulting_context": "A formal contracting and centrally funded reimbursements convincingly\ncommunicating the organizations support for the InnerSource initiative, thus\nempowering middle management to sign off on it:\n\n- Allocation of corporate funds to business units for reimbursement of development capacity signals to line managers that InnerSource is deemed valuable by the organization, that it has executive air cover and that they are expected to support it, too.\n- A formal contracting signals that work in InnerSource is managed professionally and inspires trust.\n- A formal contracting increases transparency and provides a better overview about the associate's available capacity for his business unit and InnerSource projects, thus reducing the risk of \"over-booked/planned capacity\".\n\nA formal contracting is also beneficial for contributors and communities:\n\n- With a stable group of contributors, it is more likely that some of them will eventually achieve [Trusted Committer](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) status.\n- A formal contracting provides a basis for resolving conflict related to participation in InnerSource activities. Note that mediation will likely be successful only for a few companies with a culture conducive to that.",
    "known_instances": "- BIOS at Robert Bosch GmbH",
    "status": "* Structured",
    "author": "- Georg Grütter (Robert Bosch GmbH)",
    "acknowledgements": "- Diogo Fregonese (Robert Bosch GmbH)\n- Robert Hansel (Robert Bosch GmbH)\n- Jim Jagielski\n- Tim Yao\n- Cedric Williams\n- Klaas-Jan Stol\n- Padma Sudarsan\n- Nick Stahl\n- Ofer Hermoni\n- Robert C. Hanmer",
    "changelog": "- **2016-10-25** - first review\n- **2017-05-09** - rework\n- **2017-09-08** - second review, final rework and merged\n- **2021-02-27** - fixing issues with display of the pattern in the book",
    "slug": "contracted-contributor"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/common-requirements.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nCommon Requirements\n\n## Patlet\n\nCommon code in a shared repository isn't meeting the needs of all the project-teams that want to use it; this is solved through requirements alignment and refactoring.\n\n## Problem\n\nThe common code in the shared repository isn't meeting the needs of all the projects that want to use it.  \n\n## Context\n\n* Many projects are trying to use common code.  There is a shared repository that all the projects access.\n* Someone (or some project) wrote the code in the first place and contributed it to the repository.\n* The common code is a small percentage of the overall deliverable from any of the projects.\n* Each project has its own delivery schedule, set of deliverables and customers.\n* This pattern applies in either of these situations:\n    * there is a **Strong Code Owner** i.e. all changes to the shared repository have to be approved by the repo owner\n    * there is **weak code ownership** i.e. no one really owns the code\n    * there is **no Benevolent Sponsor** i.e. no organization or executive is providing resources to organize the common code in an InnerSource fashion\n\n## Forces\n\nThe project that made the code available has one set of needs. Its needs are similar to what some of the receiving organization wants, but not quite the same.\nRequirements on code should be derivable from real customer needs.  \n\nThe needs of different customers are generally quite similar; however they might be expressed differently or weighted differently between customers. An example might be how some customers want some result presented in one way while others want it presented in the reverse order. It is simple to do the translation between them, but requires additional coding for one of the cases and as a result the module that computes the result can't be reused by both customers.\n\nMany customers want the supplier to help them know what they need. The company has many “Systems Engineers” writing requirements for the products.  These requirements are supposed to be a distillation of customer needs to guide development of the product.\nReusing code is an important goal to save the company time and money.  \n\n## Solution\n\nThere are two aspects to solving this problem which should be done in parallel:\n\n1. Align the requirements of the projects so that the code that meets the requirements for one project also meets the needs for the other projects.\n2. Refactor the code into smaller pieces for which the many using projects can agree upon requirements.\n\nAdditionally, take advantage of customers expecting the supplier to help elucidate requirements. Bring about the alignment of requirements during the customer negotiations and influence the customers requirements rather than changing the component.\n\nIn the example presented above, the supplier helps both customers realize that they want the same thing, and it will save everyone effort (and money) if they agree to accept the result in the same format.\n\n![Common Requirements](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/CommonReqtsv2.jpg)\n\n## Resulting Context\n\nThis might require negotiating requirements changes with the customer.  The changes might also require involvement by the sales teams and product managers to get alignment on the requirements.  The customer might need incentives, such as discounts, to agree to the changes.\n\nA related challenge (and possible new pattern) is a circular story-writing exercise reported at one company employing InnerSource. In short:\n\n* The developers write a story to solve a problem in one way.  \n* The program managers rewrite the story to better express their needs - keeping the essence the same. By the time it returns to developers though they don't recognize it as what they wanted to do in the first place and so balk at implementing it.  \n* The solution to this pattern is to have more seats around the planning table so that story modifications are understood across the project, not just in the developer or program manager camps.\n\n## Known Instances\n\n* Large telecom provider\n\n## Status\n\n* Structured\n\n## Author\n\nRobert Hanmer\n\n## Acknowledgements\n\n* Manrique Lopez\n* Daniel Izquierdo\n* Tim Yao\n* Sebastian Spier\n",
    "title": "Common Requirements",
    "patlet": "Common code in a shared repository isn't meeting the needs of all the project-teams that want to use it; this is solved through requirements alignment and refactoring.",
    "problem": "The common code in the shared repository isn't meeting the needs of all the projects that want to use it.",
    "context": "* Many projects are trying to use common code.  There is a shared repository that all the projects access.\n* Someone (or some project) wrote the code in the first place and contributed it to the repository.\n* The common code is a small percentage of the overall deliverable from any of the projects.\n* Each project has its own delivery schedule, set of deliverables and customers.\n* This pattern applies in either of these situations:\n    * there is a **Strong Code Owner** i.e. all changes to the shared repository have to be approved by the repo owner\n    * there is **weak code ownership** i.e. no one really owns the code\n    * there is **no Benevolent Sponsor** i.e. no organization or executive is providing resources to organize the common code in an InnerSource fashion",
    "forces": "The project that made the code available has one set of needs. Its needs are similar to what some of the receiving organization wants, but not quite the same.\nRequirements on code should be derivable from real customer needs.  \n\nThe needs of different customers are generally quite similar; however they might be expressed differently or weighted differently between customers. An example might be how some customers want some result presented in one way while others want it presented in the reverse order. It is simple to do the translation between them, but requires additional coding for one of the cases and as a result the module that computes the result can't be reused by both customers.\n\nMany customers want the supplier to help them know what they need. The company has many “Systems Engineers” writing requirements for the products.  These requirements are supposed to be a distillation of customer needs to guide development of the product.\nReusing code is an important goal to save the company time and money.",
    "solution": "There are two aspects to solving this problem which should be done in parallel:\n\n1. Align the requirements of the projects so that the code that meets the requirements for one project also meets the needs for the other projects.\n2. Refactor the code into smaller pieces for which the many using projects can agree upon requirements.\n\nAdditionally, take advantage of customers expecting the supplier to help elucidate requirements. Bring about the alignment of requirements during the customer negotiations and influence the customers requirements rather than changing the component.\n\nIn the example presented above, the supplier helps both customers realize that they want the same thing, and it will save everyone effort (and money) if they agree to accept the result in the same format.\n\n![Common Requirements](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/CommonReqtsv2.jpg)",
    "resulting_context": "This might require negotiating requirements changes with the customer.  The changes might also require involvement by the sales teams and product managers to get alignment on the requirements.  The customer might need incentives, such as discounts, to agree to the changes.\n\nA related challenge (and possible new pattern) is a circular story-writing exercise reported at one company employing InnerSource. In short:\n\n* The developers write a story to solve a problem in one way.  \n* The program managers rewrite the story to better express their needs - keeping the essence the same. By the time it returns to developers though they don't recognize it as what they wanted to do in the first place and so balk at implementing it.  \n* The solution to this pattern is to have more seats around the planning table so that story modifications are understood across the project, not just in the developer or program manager camps.",
    "known_instances": "* Large telecom provider",
    "status": "* Structured",
    "author": "Robert Hanmer",
    "acknowledgements": "* Manrique Lopez\n* Daniel Izquierdo\n* Tim Yao\n* Sebastian Spier",
    "slug": "common-requirements"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/30-day-warranty.md",
    "stage": "2-structured",
    "markdown": "## Title\n\n30 Day Warranty\n\n## Patlet\n\nWhen accepting contributions from outside of your own team, there is a natural aversion to taking responsibility for code not written by the team itself. Through the 30 Day Warranty the contributing team consents to provide bug fixes to the receiving team, which will increase the level of trust between both teams and makes it more likely that contributions get accepted.\n\n## Problem\n\nA team develops a component which is used throughout an organization.  This team resists accepting or outright rejects contributions (feature requests).  This behavior blocks progress and leads to frequent disruption from escalations.\n\n## Context\n\n- Teams depend on another team accepting their contributions so that a component produced by the receiving team can be used by the contributing team.\n- The receiving team does not have the resources, knowledge, permission, and/or inclination to write the contributed component/feature themselves.\n\n## Forces\n\n- There is distrust of contributions due to a past history of cheating: teams submitted half finished contributions and subsequently filed requests for fixes that make it ready for use in production.\n- If code is contributed from outside the team, the team has the natural suspicion that the other team does not know how to write code that would meet the receiving team's expectations.\n- Each team looks first to help its own leaders achieve their own goals. This direction of loyalty can complicate resolution of this problem.\n- There is a natural aversion to taking responsibility for code not written by oneself.\n- Contributed code needs to be heavily rewritten before being accepted into the codebase.\n- There is the fear of the contributors not being available for support with fixing bugs after the time on contribution.\n- Teams fear contributed code will lead to high(er) maintenance costs but do not know how to control for that.\n- Receiving teams may fear that teaching others how to contribute code will expose technical debt in their system and that visibility may be damaging.\n- Receiving teams may not believe that they will get acceptable code no matter how much mentoring they provide.\n- Either team may not feel confident in measuring risks or certifying that they are mitigated in a contribution; the system itself is somewhat brittle (may not be ways to fully test and catch all problems).\n\n## Solution\n\nAddress the fears of both the receiving and the contributing teams by establishing a **30 day warranty period** starting with the time the contributed code goes into production. During this warranty period the contributing team consents to provide bug fixes to the receiving team.\n\nNote that the warranty period could be 45, 60, or 100 days too. The duration may vary based upon the constraints of the project, the software life cycle of the project, commitments to customers, and other factors.\n\nIn addition it helps to provide clear [contribution guidelines](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md), spelling out the expectations of the receiving team and the contributing team.\n\n![30 Day Warranty](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/thirtydaywarranty.jpg)\n\n## Resulting Context\n\n- The receiving team is willing to accept contributions and able to share the workload of initial adaptations/fixes.\n- Increased transparency and fairness.\n- Keeps escalations from becoming too heavyweight.\n\n## Known Instances\n\n- This was tried and proven successful at PayPal.\n- GitHub internally uses this pattern with a modified warranty timeline of 6 weeks.\n- Microsoft recommends this pattern as a principle - teams set their own specific time target matching their needs and confidence.\n\n## Authors\n\n- Cedric Williams\n\n## Acknowledgement\n\n- Dirk-Willem van Gulik\n- Padma Sudarsan\n- Klaas-Jan Stol\n- Georg Grütter\n\n## Status\n\n* Structured\n* Drafted at the 2017 Spring InnerSource Summit; reviewed 18 July 2017.\n\n## Variants\n\n- Ensure cooperation of dependent teams by making them a community by having more than one, meritocratically appointed \"[Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md)\" (TCs) take responsibility.\n",
    "title": "30 Day Warranty",
    "patlet": "When accepting contributions from outside of your own team, there is a natural aversion to taking responsibility for code not written by the team itself. Through the 30 Day Warranty the contributing team consents to provide bug fixes to the receiving team, which will increase the level of trust between both teams and makes it more likely that contributions get accepted.",
    "problem": "A team develops a component which is used throughout an organization.  This team resists accepting or outright rejects contributions (feature requests).  This behavior blocks progress and leads to frequent disruption from escalations.",
    "context": "- Teams depend on another team accepting their contributions so that a component produced by the receiving team can be used by the contributing team.\n- The receiving team does not have the resources, knowledge, permission, and/or inclination to write the contributed component/feature themselves.",
    "forces": "- There is distrust of contributions due to a past history of cheating: teams submitted half finished contributions and subsequently filed requests for fixes that make it ready for use in production.\n- If code is contributed from outside the team, the team has the natural suspicion that the other team does not know how to write code that would meet the receiving team's expectations.\n- Each team looks first to help its own leaders achieve their own goals. This direction of loyalty can complicate resolution of this problem.\n- There is a natural aversion to taking responsibility for code not written by oneself.\n- Contributed code needs to be heavily rewritten before being accepted into the codebase.\n- There is the fear of the contributors not being available for support with fixing bugs after the time on contribution.\n- Teams fear contributed code will lead to high(er) maintenance costs but do not know how to control for that.\n- Receiving teams may fear that teaching others how to contribute code will expose technical debt in their system and that visibility may be damaging.\n- Receiving teams may not believe that they will get acceptable code no matter how much mentoring they provide.\n- Either team may not feel confident in measuring risks or certifying that they are mitigated in a contribution; the system itself is somewhat brittle (may not be ways to fully test and catch all problems).",
    "solution": "Address the fears of both the receiving and the contributing teams by establishing a **30 day warranty period** starting with the time the contributed code goes into production. During this warranty period the contributing team consents to provide bug fixes to the receiving team.\n\nNote that the warranty period could be 45, 60, or 100 days too. The duration may vary based upon the constraints of the project, the software life cycle of the project, commitments to customers, and other factors.\n\nIn addition it helps to provide clear [contribution guidelines](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md), spelling out the expectations of the receiving team and the contributing team.\n\n![30 Day Warranty](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/thirtydaywarranty.jpg)",
    "resulting_context": "- The receiving team is willing to accept contributions and able to share the workload of initial adaptations/fixes.\n- Increased transparency and fairness.\n- Keeps escalations from becoming too heavyweight.",
    "known_instances": "- This was tried and proven successful at PayPal.\n- GitHub internally uses this pattern with a modified warranty timeline of 6 weeks.\n- Microsoft recommends this pattern as a principle - teams set their own specific time target matching their needs and confidence.",
    "authors": "- Cedric Williams",
    "acknowledgement": "- Dirk-Willem van Gulik\n- Padma Sudarsan\n- Klaas-Jan Stol\n- Georg Grütter",
    "status": "* Structured\n* Drafted at the 2017 Spring InnerSource Summit; reviewed 18 July 2017.",
    "variants": "- Ensure cooperation of dependent teams by making them a community by having more than one, meritocratically appointed \"[Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md)\" (TCs) take responsibility.",
    "slug": "30-day-warranty"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/transitioning-contractor-code-to-innersource-model.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nTransitioning Contractor Code to InnerSource Model\n\n## Patlet\n\nContract developers are often not motivated to engage in InnerSource activities, which may be beyond the scope of their contract. This pattern describes how you can focus on transitioning the contractor project after the fact to an InnerSource project by setting expectations for specific InnerSource-related deliverables as part of the overall project delivery.\n\n## Problem\n\nContractor developers are often not motivated (through forces described below) to not engage in InnerSource activities. Once delivered, and even if the code is made visible, their projects are often less likely to be part of successful InnerSourced engagements.\n\n## Context\n\nThis problem exists where an organization either:\n\n- out-sources the development of a well defined project or\n- engages external firms for staff augmentation and has mixed teams of permanent employees with a large percentage of contract staff. This issue may occur less often in a mixed team where InnerSource principles and ways of working are already established within the organization, but the forces described below are still often at play.\n\n## Forces\n\nContractor Motivation and Constraints:\n\n- Contracts with third-party developers tend to be focused on delivering an end result in the fastest possible fashion. As a result, all InnerSource activities (e.g. responding to third-party PRs) are considered to be distractions or something that will “slow down” delivery.\n- Concern that accepting code from other parts of the business might introduce security risks, scope creep or other issues that would subsequently have to be resolved by the contract team.\n- Concern that accepting PRs from other parts of the company may “muddy the waters” when it comes to assessing what parts of the project were completed/delivered by the contracted developers.\n- Contractors may have concerns about loss of control over the projects technical details if other teams are contributing significantly.\n- Even when motivations align (a project can be completed faster or with higher quality by engaging in InnerSource) contractors might still be unclear if they can because it is not explicitly listed as allowed in the contract terms.\n\nAll of the above can mean that even if an individual contract developer wants to engage in InnerSource, there are system-level constraints pushing them not to.\n\nIt should be noted that the above scenario is indirectly impacted by:\n\n- The norms around defining Statements of Work for third party contractors\n- Pressures to reduce contractor costs during procurement\n- Ability to tie contributions to payment at a granular level.\n\nIt could also be noted that the contractor motivations in this instance is almost like a more extreme instance of the often reported organizational/budgetary constraints that might exist for some internal business units.\n\n## Solutions\n\nAt the outset of the project, clearly define:\n\n- That the code will be made visible by default to all developers within the organization.\n- That the architecture of the code should be modular and ready for component reuse.\n- How the project will be transitioned to an InnerSource project. This could be similar to a transition of ownership plan for an open source project which should include:\n  - Identification of new a maintainer team\n  - An announcement to stakeholders regarding the transition\n  - Written documentation describing functionality, architecture, and common processes like releasing, patching, deploying, testing, etc.\n  - A prescribed number of hours on the contract set aside for the contractor to meet with the identified long term maintainer (normally from the company who hired the contractor) for an overview of responsibilities and Q & A.\n  - (untested) A 30 day warranty pattern could be applied and so the contractor would provide 30 days of direct transition support to the new maintainers\n\nIt is noted that this practice can work very well where there is a high trust relationship between the contracting team and the contractors. Perhaps they have worked closely together before, or have a pre-existing relationship. Further patterns that explore how to build trust between teams might enhance this pattern.\n\n## Resulting Context\n\nThis particular pattern does not attempt to change the initial behavior of the contract development team (in terms of their potential lack of engagement with the InnerSource process). However, the end result is that the project does become part of the InnerSourced projects for the company after the fact.\n\n## Known Instances\n\n* **GitHub** has seen this approach work with their US government agency customers.\n\n## Status\n\nInitial\n\n## Author(s)\n\n- Clare Dillon\n- Zack Koppert\n\n## Acknowledgements\n\nParticular thanks to Zack Koppert for sharing his experiences in this area and to Gil Yehuda for raising the issue in the InnerSource Slack channel.\n\nThis pattern was extracted from a conversation on the topic held with the following folks:\n\n- Brittany Istenes\n- Clare Dillon\n- Cristina Coffey\n- Derek Murawsky\n- Gil Yehuda\n- Zack Koppert\n",
    "title": "Transitioning Contractor Code to InnerSource Model",
    "patlet": "Contract developers are often not motivated to engage in InnerSource activities, which may be beyond the scope of their contract. This pattern describes how you can focus on transitioning the contractor project after the fact to an InnerSource project by setting expectations for specific InnerSource-related deliverables as part of the overall project delivery.",
    "problem": "Contractor developers are often not motivated (through forces described below) to not engage in InnerSource activities. Once delivered, and even if the code is made visible, their projects are often less likely to be part of successful InnerSourced engagements.",
    "context": "This problem exists where an organization either:\n\n- out-sources the development of a well defined project or\n- engages external firms for staff augmentation and has mixed teams of permanent employees with a large percentage of contract staff. This issue may occur less often in a mixed team where InnerSource principles and ways of working are already established within the organization, but the forces described below are still often at play.",
    "forces": "Contractor Motivation and Constraints:\n\n- Contracts with third-party developers tend to be focused on delivering an end result in the fastest possible fashion. As a result, all InnerSource activities (e.g. responding to third-party PRs) are considered to be distractions or something that will “slow down” delivery.\n- Concern that accepting code from other parts of the business might introduce security risks, scope creep or other issues that would subsequently have to be resolved by the contract team.\n- Concern that accepting PRs from other parts of the company may “muddy the waters” when it comes to assessing what parts of the project were completed/delivered by the contracted developers.\n- Contractors may have concerns about loss of control over the projects technical details if other teams are contributing significantly.\n- Even when motivations align (a project can be completed faster or with higher quality by engaging in InnerSource) contractors might still be unclear if they can because it is not explicitly listed as allowed in the contract terms.\n\nAll of the above can mean that even if an individual contract developer wants to engage in InnerSource, there are system-level constraints pushing them not to.\n\nIt should be noted that the above scenario is indirectly impacted by:\n\n- The norms around defining Statements of Work for third party contractors\n- Pressures to reduce contractor costs during procurement\n- Ability to tie contributions to payment at a granular level.\n\nIt could also be noted that the contractor motivations in this instance is almost like a more extreme instance of the often reported organizational/budgetary constraints that might exist for some internal business units.",
    "solutions": "At the outset of the project, clearly define:\n\n- That the code will be made visible by default to all developers within the organization.\n- That the architecture of the code should be modular and ready for component reuse.\n- How the project will be transitioned to an InnerSource project. This could be similar to a transition of ownership plan for an open source project which should include:\n  - Identification of new a maintainer team\n  - An announcement to stakeholders regarding the transition\n  - Written documentation describing functionality, architecture, and common processes like releasing, patching, deploying, testing, etc.\n  - A prescribed number of hours on the contract set aside for the contractor to meet with the identified long term maintainer (normally from the company who hired the contractor) for an overview of responsibilities and Q & A.\n  - (untested) A 30 day warranty pattern could be applied and so the contractor would provide 30 days of direct transition support to the new maintainers\n\nIt is noted that this practice can work very well where there is a high trust relationship between the contracting team and the contractors. Perhaps they have worked closely together before, or have a pre-existing relationship. Further patterns that explore how to build trust between teams might enhance this pattern.",
    "resulting_context": "This particular pattern does not attempt to change the initial behavior of the contract development team (in terms of their potential lack of engagement with the InnerSource process). However, the end result is that the project does become part of the InnerSourced projects for the company after the fact.",
    "known_instances": "* **GitHub** has seen this approach work with their US government agency customers.",
    "status": "Initial",
    "author(s)": "- Clare Dillon\n- Zack Koppert",
    "acknowledgements": "Particular thanks to Zack Koppert for sharing his experiences in this area and to Gil Yehuda for raising the issue in the InnerSource Slack channel.\n\nThis pattern was extracted from a conversation on the topic held with the following folks:\n\n- Brittany Istenes\n- Clare Dillon\n- Cristina Coffey\n- Derek Murawsky\n- Gil Yehuda\n- Zack Koppert",
    "slug": "transitioning-contractor-code-to-innersource-model"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/source-code-inventory.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nUnified Source Code Inventory\n\n## Patlet\n\nLarge organizations with many legal entities often don't have visibility into all of their software assets (repositories), limiting their ability to increase businesses value and control liability costs holistically.\nA unified source code inventory at organization-level addresses these issues, while exploiting opportunities to identify and support valuable InnerSource assets.\n\n## Problem\n\nGiven situations when InnerSource stakeholders do not value source code at the same level as other Organization's assets; when source code strategies are ad-hoc and different among legal entities with little consolidation at Organization-level; then it becomes harder both to select and support the right InnerSource project candidates as well as maximize business value of such a key asset.\n\nCan you get consistent answers within the Organization to questions like:\n\n* How would you find all source code touched by anyone in your legal entity?\n* How would you find out who else can also access each of the above?\n* For new source code, what is your default level of access?\n* How would you know nothing is missing from your inventory?\n* What valuable insights or actions have you gained from your inventory?\n\n## Context\n\n* You work on Legal Entity within a complex Organization under continuous change (e.g. new acquisitions or changing business priorities).\n* You cannot find all source code touched, shared and consumed within the Organization.\n* You do not have a clear policy on default sharing level when creating a new project (e.g. Open Source, InnerSource or Closed Source).\n* You cannot scan significant parts of the Organization's source code looking for duplication, similarity or code smells.\n* You do not know the existing ratios of Open Source, innerSource and Closed Source and their trend.\n* You cannot measure the diversity of contributions and resulting value for a given project.\n* You cannot identify and optimize tech stack diversity.\n* You cannot identify technical debt and determine the priorities for retirement (e.g. dead APIs/source).\n\n## Forces\n\n* Fragmentation of source code hosting systems in the Organization.\n* Ad-hoc source code strategies scattered across the different Legal Entities in the Organization.\n* Continuously changing map of the relationships between: projects, repositories, products, tech stacks, domains, solutions, platforms, services, components, sub-systems, people, authors, teams, external repositories.\n* Diverse software culture of teams across the Organization (e.g. more open to collaboration or more siloed).\n\n## Solutions\n\n### Set up an Organization-level source code inventory live dashboard\n\n* Combination of manual and automated input data sources to a single source of truth\n* API available to add new data sources and extend coverage of the source code repository\n* Key meta-data about each repository:\n  * Legal Entity\n  * URL\n  * Version control system (e.g. GIT or SVN)\n  * Hosting vendor (e.g. GitHub, Gitlab or BitBucket)\n  * Hosting type (e.g. on-prem, private cloud or public cloud)\n  * Sharing level (e.g. Open Source, InnerSource, Closed Source)\n* Visualization in place to list all assets with options to filter based on meta-data\n* Enable access to automated source code static analysis tools (e.g. identify duplicated or similar code, flag code smells, benchmark test coverage).\n\nMockup dashboard             |  Mockup questionnaire\n:-------------------------:|:-------------------------:\n![Mockup dashboard](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/source-code-inventory-mockup-dashboard.PNG)  |  ![Mockup questionnaire](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/source-code-inventory-mockup-questionnaire.PNG)\n\n### Define a Source Code Strategy Assessment Framework\n\n* Help to define a source code strategy including an explicit definition of policies at Organization and Legal Entity levels for:\n  * Inventory\n  * Sharing\n  * Consumption\n  * Contribution\n  * Ecosystem\n* Example of such a framework: [github.com/trieshard/source-strategy-assessment/blob/master/framework.md](https://github.com/trieshard/source-strategy-assessment/blob/master/framework.md)\n\n## Resulting Context\n\n### For the Organization, Legal Entity and Project maintainers\n\n* We have explicit policies at Organization and Legal Entity level on source code strategy (e.g. where to create new repository or how to select the right sharing level).\n* We can find all source code touched, shared and consumed within the Organization or Legal Entity and take actions as needed.\n* We can measure the diversity of contributions and resulting business value for our project.\n* We can identify technical debt and determine the priorities for retirement (e.g. dead APIs/source).\n\n### For InnerSource governance\n\n* We can scan significant parts of our Organization's source code looking for opportunities of reuse, duplication, similarity or code smells.\n* We know the ratios of Open Source, InnerSource and Closed Source within the Organization so we can steer as needed.\n* We can identify and optimize tech stack diversity.\n* We can create awareness and culture shift on certain Legal Entities as needed (e.g. ratio of Open Source and InnerSource below average).\n\n## Rationale\n\nIt creates a dynamic and extendable single source of truth for repositories to capture, visualize and act on source code repositories across the Organization. That helps to create awareness and focus efforts on the right direction.\n\nThe Source Code Strategy Assessment Framework helps teams to understand the value of intentional explicit policies on how to manage source code. It helps to create both continuous improvement cycles and references within the Organization of what others are doing.\n\n## Known Instances\n\n* Philips (under test at scale)\n\n## References\n\n* Organization and Legal Entity terms as defined in the [InnerSource License Pattern - Glossary](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-license.md#glossary).\n* Explore using this pattern in combination with the [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md) pattern.\n\n## Status\n\n* Initial\n\n## Author(s)\n\n* [David Terol](https://github.com/dterol23)\n* [Simao Williams](mailto:me@simaos.net)\n\n## Acknowledgements\n\n* [Sebastian Spier](https://github.com/spier)\n",
    "title": "Unified Source Code Inventory",
    "patlet": "Large organizations with many legal entities often don't have visibility into all of their software assets (repositories), limiting their ability to increase businesses value and control liability costs holistically.\nA unified source code inventory at organization-level addresses these issues, while exploiting opportunities to identify and support valuable InnerSource assets.",
    "problem": "Given situations when InnerSource stakeholders do not value source code at the same level as other Organization's assets; when source code strategies are ad-hoc and different among legal entities with little consolidation at Organization-level; then it becomes harder both to select and support the right InnerSource project candidates as well as maximize business value of such a key asset.\n\nCan you get consistent answers within the Organization to questions like:\n\n* How would you find all source code touched by anyone in your legal entity?\n* How would you find out who else can also access each of the above?\n* For new source code, what is your default level of access?\n* How would you know nothing is missing from your inventory?\n* What valuable insights or actions have you gained from your inventory?",
    "context": "* You work on Legal Entity within a complex Organization under continuous change (e.g. new acquisitions or changing business priorities).\n* You cannot find all source code touched, shared and consumed within the Organization.\n* You do not have a clear policy on default sharing level when creating a new project (e.g. Open Source, InnerSource or Closed Source).\n* You cannot scan significant parts of the Organization's source code looking for duplication, similarity or code smells.\n* You do not know the existing ratios of Open Source, innerSource and Closed Source and their trend.\n* You cannot measure the diversity of contributions and resulting value for a given project.\n* You cannot identify and optimize tech stack diversity.\n* You cannot identify technical debt and determine the priorities for retirement (e.g. dead APIs/source).",
    "forces": "* Fragmentation of source code hosting systems in the Organization.\n* Ad-hoc source code strategies scattered across the different Legal Entities in the Organization.\n* Continuously changing map of the relationships between: projects, repositories, products, tech stacks, domains, solutions, platforms, services, components, sub-systems, people, authors, teams, external repositories.\n* Diverse software culture of teams across the Organization (e.g. more open to collaboration or more siloed).",
    "solutions": "",
    "resulting_context": "",
    "rationale": "It creates a dynamic and extendable single source of truth for repositories to capture, visualize and act on source code repositories across the Organization. That helps to create awareness and focus efforts on the right direction.\n\nThe Source Code Strategy Assessment Framework helps teams to understand the value of intentional explicit policies on how to manage source code. It helps to create both continuous improvement cycles and references within the Organization of what others are doing.",
    "known_instances": "* Philips (under test at scale)",
    "references": "* Organization and Legal Entity terms as defined in the [InnerSource License Pattern - Glossary](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-license.md#glossary).\n* Explore using this pattern in combination with the [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md) pattern.",
    "status": "* Initial",
    "author(s)": "* [David Terol](https://github.com/dterol23)\n* [Simao Williams](mailto:me@simaos.net)",
    "acknowledgements": "* [Sebastian Spier](https://github.com/spier)",
    "slug": "source-code-inventory"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/shared-code-repo-different-from-build-repo.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nRepo for Shared Code Different from Repo the Product Org Uses in its Build\n\n## Patlet\n\nDeal with the overhead of having shared code in a separate repository that isn't the same as the project-specific one that is tied to production builds.\n\n## Problem\n\nDeal with the overhead of having shared code in a separate repository that isn't the same as the project-specific one that is tied to production builds.\n\n## Context\n\nShared code is kept in an accessible repository that is different from SCMs used by the products that use the shared code. Integration, testing and builds might be automated with the product SCM but not the shared code repo.\n\n## Forces\n\nWhen the shared code is in a separate repository, any use of it could result in forking modifications, leading to complications later when the source is changed by the owning organization. When starting an inner sourcing program, it is possible there are many SCM systems in use; and, frequently, a new SCM is used for the inner sourcing program. Migrating from one SCM to another is not trivial. Since the using organization has a copy, they might not be aware of changes to the shared code. It is difficult and expensive for the using organization to change their automated build process to use a foreign repo.\n\n## Solution\n\nContinuous integration, not only to with testing but also in production (aligns with DevOps). Known marker that shows the code hasn't been modified. Improved communication between teams. Accountability when you screw up; hold people accountable. Publish good stats about the negative implications of errors and processes for making this everyone's problem.  \n\n## Resulting Context\n\nIdeally, overhead is minimized or eliminated. Or integrate the shared code repository in the production build.  \n\n## Known Instances\n\nTBD\n\n## Status\n\nInitial\n",
    "title": "Repo for Shared Code Different from Repo the Product Org Uses in its Build",
    "patlet": "Deal with the overhead of having shared code in a separate repository that isn't the same as the project-specific one that is tied to production builds.",
    "problem": "Deal with the overhead of having shared code in a separate repository that isn't the same as the project-specific one that is tied to production builds.",
    "context": "Shared code is kept in an accessible repository that is different from SCMs used by the products that use the shared code. Integration, testing and builds might be automated with the product SCM but not the shared code repo.",
    "forces": "When the shared code is in a separate repository, any use of it could result in forking modifications, leading to complications later when the source is changed by the owning organization. When starting an inner sourcing program, it is possible there are many SCM systems in use; and, frequently, a new SCM is used for the inner sourcing program. Migrating from one SCM to another is not trivial. Since the using organization has a copy, they might not be aware of changes to the shared code. It is difficult and expensive for the using organization to change their automated build process to use a foreign repo.",
    "solution": "Continuous integration, not only to with testing but also in production (aligns with DevOps). Known marker that shows the code hasn't been modified. Improved communication between teams. Accountability when you screw up; hold people accountable. Publish good stats about the negative implications of errors and processes for making this everyone's problem.",
    "resulting_context": "Ideally, overhead is minimized or eliminated. Or integrate the shared code repository in the production build.",
    "known_instances": "TBD",
    "status": "Initial",
    "slug": "shared-code-repo-different-from-build-repo"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/share-your-code-to-get-more-done.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nShare Your Code to Get More Done\n\n## Patlet\n\nTBD\n\n## Problem\n\n* Developers do not realize that they can get more done by taking advantage of InnerSource\n* Developers continue to work in their silo or alone and never take the time invest in moving to InnerSource\n* Project Teams need a compelling reason to invest some time to make the change\n\n## Context\n\n* Development on a specific product is siloed and a finite number of developers are involved in development activity\n* Development progress is not moving fast enough\n* Developers are being asked to do more work than they can accomplish\n* Other developers are likely to work on the product if the opportunity to participate existed\n* Current developers are working near maximum efficiency\n\n## Forces\n\n* Developers have no extra time to shift to InnerSource\n* Management has not prioritized a shift to InnerSource\n* Adding staff to get the work done using traditional methods is not possible\n* The value of InnerSource is not included in the project plan\n\n## Sketch (optional)\n\n## Solution\n\n* Leverage existing case studies and collateral from InnerSource Commons to educate management on the value of investing in InnerSource.\n* Work with planning team to document an alternative project plan with some InnerSource activities and estimated benefits from realistic expected participation\n* Move the product code to an InnerSource compatible solution and open the code\n* Assign a portion of the developers time to work as reviewers to ensure inner sourcing activities are successful\n* Recruit potential contributors and inform them of the availability of the opportunity to participate\n* Align incentives to participation for both existing developers and contributors to encourage behavior\n\n## Resulting Context\n\n* Development previously done in a silo is on the InnerSource system\n* People from outside the traditional silo are contributing successfully\n* More development is getting done per period (sprint)\n\n## Known Instances\n\nTBD\n\n## Status\n\n* Initial\n* Old status: Unproven\n* Old status: Idea\n\n## Author\n\nDavid Marcucci\n\n## Alias\n\nOld title: Share Your Code to Get More Done - Likely Contributors Variant\n",
    "title": "Share Your Code to Get More Done",
    "patlet": "TBD",
    "problem": "* Developers do not realize that they can get more done by taking advantage of InnerSource\n* Developers continue to work in their silo or alone and never take the time invest in moving to InnerSource\n* Project Teams need a compelling reason to invest some time to make the change",
    "context": "* Development on a specific product is siloed and a finite number of developers are involved in development activity\n* Development progress is not moving fast enough\n* Developers are being asked to do more work than they can accomplish\n* Other developers are likely to work on the product if the opportunity to participate existed\n* Current developers are working near maximum efficiency",
    "forces": "* Developers have no extra time to shift to InnerSource\n* Management has not prioritized a shift to InnerSource\n* Adding staff to get the work done using traditional methods is not possible\n* The value of InnerSource is not included in the project plan",
    "sketch_(optional)": "",
    "solution": "* Leverage existing case studies and collateral from InnerSource Commons to educate management on the value of investing in InnerSource.\n* Work with planning team to document an alternative project plan with some InnerSource activities and estimated benefits from realistic expected participation\n* Move the product code to an InnerSource compatible solution and open the code\n* Assign a portion of the developers time to work as reviewers to ensure inner sourcing activities are successful\n* Recruit potential contributors and inform them of the availability of the opportunity to participate\n* Align incentives to participation for both existing developers and contributors to encourage behavior",
    "resulting_context": "* Development previously done in a silo is on the InnerSource system\n* People from outside the traditional silo are contributing successfully\n* More development is getting done per period (sprint)",
    "known_instances": "TBD",
    "status": "* Initial\n* Old status: Unproven\n* Old status: Idea",
    "author": "David Marcucci",
    "alias": "Old title: Share Your Code to Get More Done - Likely Contributors Variant",
    "slug": "share-your-code-to-get-more-done"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/reluctance-to-accept-contributions.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nReluctance to accept contributions\n\n## Patlet\n\nTBD\n\n## Problem\n\nThe core team that owns a shared asset is reluctant to adopt contributions of contributing business divisions, because this implies adoption of the maintenance responsibility for the contributed software as well, a burden the core team does not want to adopt.\n\n## Context\n\nAn organizational unit (e.g. a business division or development team) is using an InnerSource product (a ‘shared asset’), and finds it is missing a certain feature that they need and would like to integrate into the shared asset. The core team that owns the shared asset is responsible for its design and maintenance. The potentially contributing organizational unit has no champion on the core team.\n\n## Forces\n\n* The core team is responsible for maintenance, and therefore accepting contributions implies accepting the maintenance burden of new contributions. The core team is reluctant to take on this burden.\n* The unit that uses the asset requires the feature to be implemented for their product, but it is not clear where or how the feature “fits”--and thus they have difficulty implementing it because they lack knowledge of the shared asset.\n* Contributors that are not part of the core team do not have the same knowledge as the core team has about the shared asset.\n* The core team is offered a contribution that doesn’t fit with their vision of the shared asset--the contributor doesn’t understand all the intricacies that the core team needs to consider.\n* Contributions are not suitable for the core team to handle, either because of quality problems (e.g. lack of architectural compliance) or that the contribution is too large--the contributor isn’t aware of how to contribute.\n\n## Solutions\n\nDefine a clear contribution process for potential contributors.\n\n* Implement a “support warranty” of limited time duration (e.g. 30 days) during which the contributor fixes any issues that the core team finds.\n* Define clear contribution guidelines that define a set of expectations of contributions.\n* Define a contribution workflow that describes submission, review, and acceptance steps, and which specifies how contributions can be tested.\n* Provide training through tutorials, documentation, and one-on-one guidance.\n\n## Resulting Context\n\nPotential contributors have clear guidance available and process to follow so they know what to consider when preparing contributions. The core team is better able to handle incoming contributions.\n\n## Known Instances\n\nPhilips Healthcare, “Feature Advocate” described in: VK Gurbani et al. (2010) Managing a corporate open source software asset, Communications of the ACM vol. 53(2)\n\n## See Also\n\n* Support Warranty - most likely [30 Day Warranty](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/30-day-warranty.md)\n* Negotiate Contributions (unknown pattern)\n* Architecture for Participation (unknown pattern)\n* Feature Advocate (unknown pattern)\n\n*Note:*\nThe last 3 patterns above were mentioned to be \"under construction\" at the time where this pattern was written. Right now we don't know where these patterns are.\n\n## Status\n\n* Initial\n* 11 Oct 2016 - First draft\n* 13 Apr - Reviewed & Revised\n\n## Author\n\nKlaas-Jan Stol\n\n## Acknowledgments\n\n* Georg Grütter\n* Bob Hanmer\n* Udo Preiss\n* Padma Sudarsan\n* Tim Yao\n* Nick Yeates\n\n## References\n\nPattern was first created in the gDoc: [Reluctance to Receive Contributions](https://docs.google.com/document/d/13QDN-BpE_BixRFVGjao32n4Ctim0ROXAHbBWMBOijb4/edit)\n\n(this section can be deleted once the conversion from gDoc to markdown is complete)\n",
    "title": "Reluctance to accept contributions",
    "patlet": "TBD",
    "problem": "The core team that owns a shared asset is reluctant to adopt contributions of contributing business divisions, because this implies adoption of the maintenance responsibility for the contributed software as well, a burden the core team does not want to adopt.",
    "context": "An organizational unit (e.g. a business division or development team) is using an InnerSource product (a ‘shared asset’), and finds it is missing a certain feature that they need and would like to integrate into the shared asset. The core team that owns the shared asset is responsible for its design and maintenance. The potentially contributing organizational unit has no champion on the core team.",
    "forces": "* The core team is responsible for maintenance, and therefore accepting contributions implies accepting the maintenance burden of new contributions. The core team is reluctant to take on this burden.\n* The unit that uses the asset requires the feature to be implemented for their product, but it is not clear where or how the feature “fits”--and thus they have difficulty implementing it because they lack knowledge of the shared asset.\n* Contributors that are not part of the core team do not have the same knowledge as the core team has about the shared asset.\n* The core team is offered a contribution that doesn’t fit with their vision of the shared asset--the contributor doesn’t understand all the intricacies that the core team needs to consider.\n* Contributions are not suitable for the core team to handle, either because of quality problems (e.g. lack of architectural compliance) or that the contribution is too large--the contributor isn’t aware of how to contribute.",
    "solutions": "Define a clear contribution process for potential contributors.\n\n* Implement a “support warranty” of limited time duration (e.g. 30 days) during which the contributor fixes any issues that the core team finds.\n* Define clear contribution guidelines that define a set of expectations of contributions.\n* Define a contribution workflow that describes submission, review, and acceptance steps, and which specifies how contributions can be tested.\n* Provide training through tutorials, documentation, and one-on-one guidance.",
    "resulting_context": "Potential contributors have clear guidance available and process to follow so they know what to consider when preparing contributions. The core team is better able to handle incoming contributions.",
    "known_instances": "Philips Healthcare, “Feature Advocate” described in: VK Gurbani et al. (2010) Managing a corporate open source software asset, Communications of the ACM vol. 53(2)",
    "see_also": "* Support Warranty - most likely [30 Day Warranty](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/30-day-warranty.md)\n* Negotiate Contributions (unknown pattern)\n* Architecture for Participation (unknown pattern)\n* Feature Advocate (unknown pattern)\n\n*Note:*\nThe last 3 patterns above were mentioned to be \"under construction\" at the time where this pattern was written. Right now we don't know where these patterns are.",
    "status": "* Initial\n* 11 Oct 2016 - First draft\n* 13 Apr - Reviewed & Revised",
    "author": "Klaas-Jan Stol",
    "acknowledgments": "* Georg Grütter\n* Bob Hanmer\n* Udo Preiss\n* Padma Sudarsan\n* Tim Yao\n* Nick Yeates",
    "references": "Pattern was first created in the gDoc: [Reluctance to Receive Contributions](https://docs.google.com/document/d/13QDN-BpE_BixRFVGjao32n4Ctim0ROXAHbBWMBOijb4/edit)\n\n(this section can be deleted once the conversion from gDoc to markdown is complete)",
    "slug": "reluctance-to-accept-contributions"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/release-process.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nStandard Release Process and Published Artifacts\n\n## Patlet\n\nTeams may be reluctant to use InnerSource projects that they are unfamiliar with when there is no clear release process apparent in the repository.\nProviding clear release notes and a published artifact (binary, docker image, jar, etc) gives people confidence you are publishing a quality product.\n\n## Problem\n\nWhen a team is deciding whether or not to use an InnerSource projects, one of their considerations is whether they trust that they can rely on the given project for an extended period. Switching the tools/projects that they are using has a cost, so they only want to make those investments sporadically.\n\nIt reduces trust if the given InnerSource projects doesn't have a published artifact or publicly viewable release process, as the team won't know when they can expect new features or the next release, how breaking changes are handled, etc.\n\n## Context\n\nIt is common practice in Open Source projects to have releases, with release notes documenting breaking changes,\nnew features, etc along with either a published binary or link to a Docker image. This practice may not be as\ntransparent or well documented/visible for InnerSource projects, modules, etc. Providing robust release notes\nalong with a published artifact that is the result of a clearly documented and visible release process builds trust and confidence in your project.\n\n## Forces\n\n- Difficult for organizations that don't have a central CI/CD system\n- Adds the burden of publishing release notes\n- Becomes more difficult if the organization does not provide an internal location to host artifacts\n\n## Solution\n\n- CI/Delivery Pipeline is located within your repo to build artifacts (binary, docker image, jar, etc)\n- Releases and accompanying build artifacts are generated by CI system at build time\n- Release includes notes on New Features, Bug Fixes, and any \"Breaking Changes\" specifically called out\n\nA good example of quality Release notes can be found [here](https://github.com/jaegertracing/jaeger/releases)\n\n## Resulting Context\n\nTeams who come across your project will see published release notes and gain confidence in your tool. Published artifacts also make using your product easier and quicker to adopt. Having well-defined and visible processes such as these also help with cross-team collaboration and new contributors. Folks can be confident that their contributions are made available and distributed in a reasonable amount of time with a clear usage path.\n\n## Known Instances\n\nComcast\n\n## Authors\n\nDavid Grizzanti\n\n## Status\n\n**Initial** - FYI we are considering splitting \"Published Artifacts\" into its own pattern\n",
    "title": "Standard Release Process and Published Artifacts",
    "patlet": "Teams may be reluctant to use InnerSource projects that they are unfamiliar with when there is no clear release process apparent in the repository.\nProviding clear release notes and a published artifact (binary, docker image, jar, etc) gives people confidence you are publishing a quality product.",
    "problem": "When a team is deciding whether or not to use an InnerSource projects, one of their considerations is whether they trust that they can rely on the given project for an extended period. Switching the tools/projects that they are using has a cost, so they only want to make those investments sporadically.\n\nIt reduces trust if the given InnerSource projects doesn't have a published artifact or publicly viewable release process, as the team won't know when they can expect new features or the next release, how breaking changes are handled, etc.",
    "context": "It is common practice in Open Source projects to have releases, with release notes documenting breaking changes,\nnew features, etc along with either a published binary or link to a Docker image. This practice may not be as\ntransparent or well documented/visible for InnerSource projects, modules, etc. Providing robust release notes\nalong with a published artifact that is the result of a clearly documented and visible release process builds trust and confidence in your project.",
    "forces": "- Difficult for organizations that don't have a central CI/CD system\n- Adds the burden of publishing release notes\n- Becomes more difficult if the organization does not provide an internal location to host artifacts",
    "solution": "- CI/Delivery Pipeline is located within your repo to build artifacts (binary, docker image, jar, etc)\n- Releases and accompanying build artifacts are generated by CI system at build time\n- Release includes notes on New Features, Bug Fixes, and any \"Breaking Changes\" specifically called out\n\nA good example of quality Release notes can be found [here](https://github.com/jaegertracing/jaeger/releases)",
    "resulting_context": "Teams who come across your project will see published release notes and gain confidence in your tool. Published artifacts also make using your product easier and quicker to adopt. Having well-defined and visible processes such as these also help with cross-team collaboration and new contributors. Folks can be confident that their contributions are made available and distributed in a reasonable amount of time with a clear usage path.",
    "known_instances": "Comcast",
    "authors": "David Grizzanti",
    "status": "**Initial** - FYI we are considering splitting \"Published Artifacts\" into its own pattern",
    "slug": "release-process"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/overcoming-project-management-time-pressures.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nTime Constraints Hamper InnerSource Progress  \n\n## Patlet\n\nProject management believes timeline pressure and commitments on feature content does not allow for developers to spend the time needed to develop shareable code and provide support.\n\n## Problem\n\nProject management believes that timeline pressures and feature content commitments do not allow Developers to spend the time needed to develop shareable, reusable code and provide support. As a result, there is currently no code available for reuse, and Developers are writing redundant code.\n\n## Context\n\nCustomer deadlines and delivery commitments for feature content do not change.  \n\n## Forces\n\n❎ Aggressive roadmaps for delivery\n\n❎ Project management concern that engagement will lead to missed deadlines\n\n❎ Project management concern that Code contribution and/or mentoring may lead to dilution of subject matter expert time spent on their own projects (other teams may require their time).\n\n✔️ Elimination of rewriting common code saves time (write once, use many times)\n\n✔️ Crowd-based testing and debugging saves time (and improves quality)\n\n✔️ The collaboration and synergy of inner sourcing can generate new, innovative features\n\n✔️ Test Driven Development could mitigate some of the above forces\n\n## Solutions\n\n- Known pattern: Temporary fork by product team, merging changes back later to component team\n- Known anti-pattern: surreptitious temporary fork, no communication\n- New Pattern: Pre-pull request (prior to release), to ensure component team has buy-in, to avoid breakage for temporary fork\n- Allocate time into Development sprint/release schedules to allow for InnerSource\n- Provide education to product owners and Development leads regarding time saving benefits of InnerSource\n\n## Resulting Context\n\nTime is allotted in the schedule for InnerSource. Less duplicative development due to availability of reusable code. (No negative impact on customer deadlines or content delivery commitments.)\n\n## Known Instances\n\nTBD\n\n## Authors\n\n- Tim Yao\n- Nick Stahl\n- Guy Martin\n- Michael Dorner\n- Erin Bank\n\n## Status\n\nInitial\n\n## Alias\n\nOvercoming Project Management Time Pressures\n",
    "title": "Time Constraints Hamper InnerSource Progress",
    "patlet": "Project management believes timeline pressure and commitments on feature content does not allow for developers to spend the time needed to develop shareable code and provide support.",
    "problem": "Project management believes that timeline pressures and feature content commitments do not allow Developers to spend the time needed to develop shareable, reusable code and provide support. As a result, there is currently no code available for reuse, and Developers are writing redundant code.",
    "context": "Customer deadlines and delivery commitments for feature content do not change.",
    "forces": "❎ Aggressive roadmaps for delivery\n\n❎ Project management concern that engagement will lead to missed deadlines\n\n❎ Project management concern that Code contribution and/or mentoring may lead to dilution of subject matter expert time spent on their own projects (other teams may require their time).\n\n✔️ Elimination of rewriting common code saves time (write once, use many times)\n\n✔️ Crowd-based testing and debugging saves time (and improves quality)\n\n✔️ The collaboration and synergy of inner sourcing can generate new, innovative features\n\n✔️ Test Driven Development could mitigate some of the above forces",
    "solutions": "- Known pattern: Temporary fork by product team, merging changes back later to component team\n- Known anti-pattern: surreptitious temporary fork, no communication\n- New Pattern: Pre-pull request (prior to release), to ensure component team has buy-in, to avoid breakage for temporary fork\n- Allocate time into Development sprint/release schedules to allow for InnerSource\n- Provide education to product owners and Development leads regarding time saving benefits of InnerSource",
    "resulting_context": "Time is allotted in the schedule for InnerSource. Less duplicative development due to availability of reusable code. (No negative impact on customer deadlines or content delivery commitments.)",
    "known_instances": "TBD",
    "authors": "- Tim Yao\n- Nick Stahl\n- Guy Martin\n- Michael Dorner\n- Erin Bank",
    "status": "Initial",
    "alias": "Overcoming Project Management Time Pressures",
    "slug": "overcoming-project-management-time-pressures"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/overcome-acquisition-based-silos-manager.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nOvercome Acquisition-based Silos (Management Level)\n\n## Patlet\n\nTBD\n\n## Problem\n\nInefficient/Duplicative development across teams because they are siloed\n\n## Context\n\nAcquisition(s) resulting in multiple cultural perspectives. Acquired company's Middle Management is supportive of the InnerSource program. Post-acquisition, so this won't account for code decisions that were made around acquisition.\n\n## Forces\n\n- Different processes in place\n- Fear of losing control\n- Have to deal with developer fears\n- Fear of losing developer resources (who work on other projects)\n- Rigid timelines\n- Politics and egos\n- Bi-directional fear/Lack of trust\n- Fear of losing one's job\n- Fear of loss of identity\n- Fear of being judged\n- Pandora's box/unknowns tied to opening up code submissions\n\n(PICK UP HERE NEXT TIME)---------------10/25/16\n\n## Sketch (optional)\n\n## Solution\n\n**For net-new acquisition**\n\nMake the acquired teams feel secure in the new environment by\n\n1. Establish a neutral (well-respected) governance committee _across both companies_ that selects from the different options across these silos to converge and integrate. (_validated_).\n\n2. Come up with rational rules for managing code redundancy as a result of acquisition (_validated_)\n\n - Joint effort between two teams to bring new software into existing platforms. (_validated_)\n - If allowable/controllable, initial software selection not tied to job security. (_not validated_)\n - Same ground rules as above for determining tooling platforms. (_validated_)\n\n3. Giving developers and middle management good on-boarding training and mentoring with InnerSourcing as part of it. (_not validated_)\n\n - Clear guidance on how to bring their software onto existing platform. (_not validated_)\n - Definition of roles including Contributor and Trusted Committer. (_not validated_)\n\n4. Make it clear that there are career advancement opportunities that come along with actively participating as well as with being a Trusted Committer. (_validated_)\n\n5. Give them time to get comfortable with the new environment - a generous, realistic grace period for ramping on new company procedures/processes. Not uncommon for this period to be up to a year but there must be a mutually agreed-to deadline. Being \"fully integrated\" requires a certain level of representation among Trusted Committers from both companies. (_validated_)\n\n6. Minimum commitment for face to face engagement between the two teams.\n\n - can be representative team from acquiring company meet with team.\n - potential Trusted committers from acquired company can meet with parent company.\n\n## Resulting Context\n\n- Silos are broken and teams working together\n- This pattern does not address potential cultural issues due to the acquisition.  \n\n## Rationale (optional)\n\n## Known Instances (optional)\n\nPartially validated. Validated means this has been seen to work in similar scenarios but not in the exact context of this pattern.\n\n## Status\n\n* Initial\n* Old Status: Unproven (not reviewed)\n* Old Status: Pattern Idea - Draft In Progress\n\n## Author\n\nDavid Marcucci, Nicholas Stahl, Padma Sudarsan, Ryan Bellmore, Erin Bank\n",
    "title": "Overcome Acquisition-based Silos (Management Level)",
    "patlet": "TBD",
    "problem": "Inefficient/Duplicative development across teams because they are siloed",
    "context": "Acquisition(s) resulting in multiple cultural perspectives. Acquired company's Middle Management is supportive of the InnerSource program. Post-acquisition, so this won't account for code decisions that were made around acquisition.",
    "forces": "- Different processes in place\n- Fear of losing control\n- Have to deal with developer fears\n- Fear of losing developer resources (who work on other projects)\n- Rigid timelines\n- Politics and egos\n- Bi-directional fear/Lack of trust\n- Fear of losing one's job\n- Fear of loss of identity\n- Fear of being judged\n- Pandora's box/unknowns tied to opening up code submissions\n\n(PICK UP HERE NEXT TIME)---------------10/25/16",
    "sketch_(optional)": "",
    "solution": "**For net-new acquisition**\n\nMake the acquired teams feel secure in the new environment by\n\n1. Establish a neutral (well-respected) governance committee _across both companies_ that selects from the different options across these silos to converge and integrate. (_validated_).\n\n2. Come up with rational rules for managing code redundancy as a result of acquisition (_validated_)\n\n - Joint effort between two teams to bring new software into existing platforms. (_validated_)\n - If allowable/controllable, initial software selection not tied to job security. (_not validated_)\n - Same ground rules as above for determining tooling platforms. (_validated_)\n\n3. Giving developers and middle management good on-boarding training and mentoring with InnerSourcing as part of it. (_not validated_)\n\n - Clear guidance on how to bring their software onto existing platform. (_not validated_)\n - Definition of roles including Contributor and Trusted Committer. (_not validated_)\n\n4. Make it clear that there are career advancement opportunities that come along with actively participating as well as with being a Trusted Committer. (_validated_)\n\n5. Give them time to get comfortable with the new environment - a generous, realistic grace period for ramping on new company procedures/processes. Not uncommon for this period to be up to a year but there must be a mutually agreed-to deadline. Being \"fully integrated\" requires a certain level of representation among Trusted Committers from both companies. (_validated_)\n\n6. Minimum commitment for face to face engagement between the two teams.\n\n - can be representative team from acquiring company meet with team.\n - potential Trusted committers from acquired company can meet with parent company.",
    "resulting_context": "- Silos are broken and teams working together\n- This pattern does not address potential cultural issues due to the acquisition.",
    "rationale_(optional)": "",
    "known_instances_(optional)": "Partially validated. Validated means this has been seen to work in similar scenarios but not in the exact context of this pattern.",
    "status": "* Initial\n* Old Status: Unproven (not reviewed)\n* Old Status: Pattern Idea - Draft In Progress",
    "author": "David Marcucci, Nicholas Stahl, Padma Sudarsan, Ryan Bellmore, Erin Bank",
    "slug": "overcome-acquisition-based-silos-manager"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/overcome-acquisition-based-silos-developer.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nOvercome Acquisition-based Silos (Developer Level)\n\n## Patlet\n\nTBD\n\n## Problem\n\nInefficient/Duplicative development across teams because they are siloed\n\n## Context\n\nAcquisition(s) resulting in multiple cultural perspectives. Developer is aware and InnerSource program environment is available to them. Post-acquisition, so this won't account for code decisions that were made around acquisition.\n\n## Forces  \n\n- Different processes in place\n- Used to different tools and reluctant to change.\n- Competing middle managers\n- Rigid timelines\n- Politics and egos\n- Bi-directional fear/Lack of trust\n- Fear of losing one's job\n- Fear of loss of control of domain or code\n- Fear of loss of identity\n- Pandora's box/unknowns tied to opening up code\n\n## Sketch (optional)\n\n## Solution\n\n**For net-new acquisition**\n\nMake the acquired teams feel secure in the new environment by\n\n1. Establish a neutral (well-respected) governance committee _across both companies_ that selects from the different options across these silos to converge and integrate. (_validated_).\n\n2. Come up with rational rules for managing code redundancy as a result of acquisition (_validated_)\n\n - Joint effort between two teams to bring new software into existing platforms. (_validated_)\n - If allowable/controllable, initial software selection not tied to job security. (_not validated_)\n - Same ground rules as above for determining tooling platforms. (_validated_)\n\n3. Giving developers and middle management good on-boarding training and mentoring with InnerSourcing as part of it. (_not validated_)\n\n - Clear guidance on how to bring their software onto existing platform. (_not validated_)\n - Definition of roles including Contributor and Trusted Committer. (_not validated_)\n\n4. Make it clear that there are career advancement opportunities that come along with actively participating as well as with being a Trusted Committer. (_validated_)\n\n5. Give them time to get comfortable with the new environment - a generous, realistic grace period for ramping on new company procedures/processes. Not uncommon for this period to be up to a year but there must be a mutually agreed-to deadline. Being \"fully integrated\" requires a certain level of representation among Trusted Committers from both companies. (_validated_)\n\n6. Minimum commitment for face to face engagement between the two teams.\n\n - can be representative team from acquiring company meet with team.\n - potential Trusted committers from acquired company can meet with parent company.\n\n## Resulting Context\n\n- Silos are broken and teams working together\n- This pattern does not address potential cultural issues due to the acquisition.  \n\n## Rationale (optional)\n\n## Known Instances (optional)\n\nPartially validated. Validated means this has been seen to work in similar scenarios but not in the exact context of this pattern.\n\n## Status\n\n* Initial\n* Old Status: Unproven (not reviewed)\n* Old Status: Pattern Idea - Draft In Progress\n\n## Author\n\nDavid Marcucci, Nicholas Stahl, Padma Sudarsan, Ryan Bellmore, Erin Bank\n",
    "title": "Overcome Acquisition-based Silos (Developer Level)",
    "patlet": "TBD",
    "problem": "Inefficient/Duplicative development across teams because they are siloed",
    "context": "Acquisition(s) resulting in multiple cultural perspectives. Developer is aware and InnerSource program environment is available to them. Post-acquisition, so this won't account for code decisions that were made around acquisition.",
    "forces": "- Different processes in place\n- Used to different tools and reluctant to change.\n- Competing middle managers\n- Rigid timelines\n- Politics and egos\n- Bi-directional fear/Lack of trust\n- Fear of losing one's job\n- Fear of loss of control of domain or code\n- Fear of loss of identity\n- Pandora's box/unknowns tied to opening up code",
    "sketch_(optional)": "",
    "solution": "**For net-new acquisition**\n\nMake the acquired teams feel secure in the new environment by\n\n1. Establish a neutral (well-respected) governance committee _across both companies_ that selects from the different options across these silos to converge and integrate. (_validated_).\n\n2. Come up with rational rules for managing code redundancy as a result of acquisition (_validated_)\n\n - Joint effort between two teams to bring new software into existing platforms. (_validated_)\n - If allowable/controllable, initial software selection not tied to job security. (_not validated_)\n - Same ground rules as above for determining tooling platforms. (_validated_)\n\n3. Giving developers and middle management good on-boarding training and mentoring with InnerSourcing as part of it. (_not validated_)\n\n - Clear guidance on how to bring their software onto existing platform. (_not validated_)\n - Definition of roles including Contributor and Trusted Committer. (_not validated_)\n\n4. Make it clear that there are career advancement opportunities that come along with actively participating as well as with being a Trusted Committer. (_validated_)\n\n5. Give them time to get comfortable with the new environment - a generous, realistic grace period for ramping on new company procedures/processes. Not uncommon for this period to be up to a year but there must be a mutually agreed-to deadline. Being \"fully integrated\" requires a certain level of representation among Trusted Committers from both companies. (_validated_)\n\n6. Minimum commitment for face to face engagement between the two teams.\n\n - can be representative team from acquiring company meet with team.\n - potential Trusted committers from acquired company can meet with parent company.",
    "resulting_context": "- Silos are broken and teams working together\n- This pattern does not address potential cultural issues due to the acquisition.",
    "rationale_(optional)": "",
    "known_instances_(optional)": "Partially validated. Validated means this has been seen to work in similar scenarios but not in the exact context of this pattern.",
    "status": "* Initial\n* Old Status: Unproven (not reviewed)\n* Old Status: Pattern Idea - Draft In Progress",
    "author": "David Marcucci, Nicholas Stahl, Padma Sudarsan, Ryan Bellmore, Erin Bank",
    "slug": "overcome-acquisition-based-silos-developer"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/organizational-mindset-change.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nOrganizational Mindset Change\n\n## Patlet\n\nTBD\n\n## Problem\n\nHow do you effect an organizational mindset change to support inner sourcing?  \n\n## Context\n\nUpper management, middle management and developers are not convinced to fully support inner sourcing. They are used to doing software development in the old way.  \n\n## Forces\n\nChanging an organizational mindset takes time and effort, which most organizations (feel they) cannot afford.\nInner sourcing could bring about a lot of desirable benefits, but it takes time to ramp up to deliver them.\nChanging executive mindsets usually requires hype which then is hard deliver on.\nKPIs to prove the benefits are often required early but choosing the wrong KPIs can severely warp the program.\nPressure from competitors and the market place makes management less willing to try significant change (deemed too risky).  \n\n## Solutions\n\nTBD\n\n## Resulting Context\n\nAll of the company heartily adopts inner sourcing! Cake for everyone!  \n\n## Status\n\n* Initial (Donut)\n",
    "title": "Organizational Mindset Change",
    "patlet": "TBD",
    "problem": "How do you effect an organizational mindset change to support inner sourcing?",
    "context": "Upper management, middle management and developers are not convinced to fully support inner sourcing. They are used to doing software development in the old way.",
    "forces": "Changing an organizational mindset takes time and effort, which most organizations (feel they) cannot afford.\nInner sourcing could bring about a lot of desirable benefits, but it takes time to ramp up to deliver them.\nChanging executive mindsets usually requires hype which then is hard deliver on.\nKPIs to prove the benefits are often required early but choosing the wrong KPIs can severely warp the program.\nPressure from competitors and the market place makes management less willing to try significant change (deemed too risky).",
    "solutions": "TBD",
    "resulting_context": "All of the company heartily adopts inner sourcing! Cake for everyone!",
    "status": "* Initial (Donut)",
    "slug": "organizational-mindset-change"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/open-source-trumps-innersource.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nOpen Source trumps InnerSource\n\n## Patlet\n\nDevelopers disregard InnerSource projects because they consider open source projects to be superior. Introducing a required evaluation of InnerSource projects before choosing an open source project increases the likelihood of the InnerSource projects to be adopted.\n\n## Problem\n\nPeople find the InnerSource project but, even if the InnerSource component meets their needs better than the respective open source component, they choose the open source component over the InnerSource component.\n\n## Context\n\n* People look for software through external search engines.\n* Different Business Lines (BLs) are selecting different SW components to do the same function, resulting in inconsistencies in the user experience.\n* There may be many silos in the company; it would then be difficult to reach the developer base across those silos.\n* The company culture is based on strong governance.\n\n## Forces\n\n* There is a perception that the open source components are of higher quality and more reusable than the InnerSource components. This is caused by the common belief that open source always means many more developers and users and therefore higher quality. This is sometimes the case in open source but not always!\n* The channels to get needed changes done are more established with open source (GitHub) than with internal components (GitHub Enterprise, Bitbucket, GitLab, Gerrit - possibly multiple installations in one company).\n* Open source should be voluntary; mandating people to use internally developed software goes against open source principles.\n* Internally developed components are potentially more suitable for corporate use if they are designed with that in mind.\n* Using corporate licensed InnerSource components instead of using open source components with strong copyleft license avoids having to disclose IP\n* It can be hard to find relevant projects in GitHub (especially if names are cryptic and keywords aren't used). See [Poor Naming Conventions](https://github.com/paypal/InnerSourcePatterns/pull/59).\n* The consistent use of internally developed components potentially reduces the diversity of the internal software landscape compared to a situation where every business line chooses their own, favourite open source component.\n\n## Sketch\n\n![The landscape of effective and efficient software development](https://github.com/assets/img/landscape-of-effective-and-efficient-software-development.png \"The landscape of effective and efficient software development\")\n\n**Source:** [Commodification of Industrial Software: A Case for Open Source](https://www.semanticscholar.org/paper/Commodification-of-Industrial-Software%3A-A-Case-for-Linden-Lundell/54d6cb77a86e292ff1845eb910c1a1f258e6cee3), F. Linden, B. Lundell, P. Marttiin, Published 2009, Engineering, Computer Science, IEEE Software\n\n## Solutions\n\n* Corporate governance mandates that internally developed components are to be evaluated before open source component are selected.\n* Make it easier to find relevant InnerSource components (see [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md)).\n* Assign maintainers to make sure proper open source processes are being followed within the leading repos.\n* Increase the attractiveness of InnerSource components by providing “value add” services for them, such as automated CI/CD services, IaaS/PaaS, NPM organization/server linkages, ChatOps, etc.\n\n## Resulting Context\n\n* Developers select the best component regardless of whether it is open source or internally developed (InnerSource). They do so with full knowledge of the InnerSource component, its capabilities, and reasons why it is recommended.\n* By doing so, InnerSource components end up being more widely and consistently used within the company.\n\n## Known Instances\n\nTBD\n\n## Status\n\nInitial\n\n## Author\n\n* As told to Padma Sudarsan, 2016-09-30\n* Tim Yao\n* Georg Gruetter (Robert Bosch GmbH)\n* Russ Rutledge\n* Johannes Tigges\n* Sebastian Spier\n\n## References\n\n* Some interesting conversation threads from the time when this pattern was created can be found in [this PR](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/46/).\n* [Commodification of Industrial Software: A Case for Open Source](https://www.semanticscholar.org/paper/Commodification-of-Industrial-Software%3A-A-Case-for-Linden-Lundell/54d6cb77a86e292ff1845eb910c1a1f258e6cee3), F. Linden, B. Lundell, P. Marttiin, Published 2009, Engineering, Computer Science, IEEE Software\n",
    "title": "Open Source trumps InnerSource",
    "patlet": "Developers disregard InnerSource projects because they consider open source projects to be superior. Introducing a required evaluation of InnerSource projects before choosing an open source project increases the likelihood of the InnerSource projects to be adopted.",
    "problem": "People find the InnerSource project but, even if the InnerSource component meets their needs better than the respective open source component, they choose the open source component over the InnerSource component.",
    "context": "* People look for software through external search engines.\n* Different Business Lines (BLs) are selecting different SW components to do the same function, resulting in inconsistencies in the user experience.\n* There may be many silos in the company; it would then be difficult to reach the developer base across those silos.\n* The company culture is based on strong governance.",
    "forces": "* There is a perception that the open source components are of higher quality and more reusable than the InnerSource components. This is caused by the common belief that open source always means many more developers and users and therefore higher quality. This is sometimes the case in open source but not always!\n* The channels to get needed changes done are more established with open source (GitHub) than with internal components (GitHub Enterprise, Bitbucket, GitLab, Gerrit - possibly multiple installations in one company).\n* Open source should be voluntary; mandating people to use internally developed software goes against open source principles.\n* Internally developed components are potentially more suitable for corporate use if they are designed with that in mind.\n* Using corporate licensed InnerSource components instead of using open source components with strong copyleft license avoids having to disclose IP\n* It can be hard to find relevant projects in GitHub (especially if names are cryptic and keywords aren't used). See [Poor Naming Conventions](https://github.com/paypal/InnerSourcePatterns/pull/59).\n* The consistent use of internally developed components potentially reduces the diversity of the internal software landscape compared to a situation where every business line chooses their own, favourite open source component.",
    "sketch": "![The landscape of effective and efficient software development](https://github.com/assets/img/landscape-of-effective-and-efficient-software-development.png \"The landscape of effective and efficient software development\")\n\n**Source:** [Commodification of Industrial Software: A Case for Open Source](https://www.semanticscholar.org/paper/Commodification-of-Industrial-Software%3A-A-Case-for-Linden-Lundell/54d6cb77a86e292ff1845eb910c1a1f258e6cee3), F. Linden, B. Lundell, P. Marttiin, Published 2009, Engineering, Computer Science, IEEE Software",
    "solutions": "* Corporate governance mandates that internally developed components are to be evaluated before open source component are selected.\n* Make it easier to find relevant InnerSource components (see [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md)).\n* Assign maintainers to make sure proper open source processes are being followed within the leading repos.\n* Increase the attractiveness of InnerSource components by providing “value add” services for them, such as automated CI/CD services, IaaS/PaaS, NPM organization/server linkages, ChatOps, etc.",
    "resulting_context": "* Developers select the best component regardless of whether it is open source or internally developed (InnerSource). They do so with full knowledge of the InnerSource component, its capabilities, and reasons why it is recommended.\n* By doing so, InnerSource components end up being more widely and consistently used within the company.",
    "known_instances": "TBD",
    "status": "Initial",
    "author": "* As told to Padma Sudarsan, 2016-09-30\n* Tim Yao\n* Georg Gruetter (Robert Bosch GmbH)\n* Russ Rutledge\n* Johannes Tigges\n* Sebastian Spier",
    "references": "* Some interesting conversation threads from the time when this pattern was created can be found in [this PR](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/46/).\n* [Commodification of Industrial Software: A Case for Open Source](https://www.semanticscholar.org/paper/Commodification-of-Industrial-Software%3A-A-Case-for-Linden-Lundell/54d6cb77a86e292ff1845eb910c1a1f258e6cee3), F. Linden, B. Lundell, P. Marttiin, Published 2009, Engineering, Computer Science, IEEE Software",
    "slug": "open-source-trumps-innersource"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/not-invented-here.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nOvercoming the Not-Invented-Here Mindset\n\n## Patlet\n\nPerfectly good solutions are being rejected because of \"Not Invented Here\" (NIH). Engineers and their managers will choose to implement functionality themselves first, even if an alternative exists. A shift towards a culture of \"Proudly Found Elsewhere\" can help reduce the negative impact of NIH.\n\n## Problem\n\n\"Not Invented Here\" mindset exists and has the following impact: Duplicative development, Cost, Redundancy, Missed opportunities for knowledge transfer, Slower time to market/bottlenecks, Quality impact (potential to miss out on leveraging superior technology), excessive ownership culture, lowered morale that can lead to talent retention issue.\n\nNotes:\n\n* Is the cost of adoption / integration of code from outside a reason for \"Not Invented Here\" rather than a peer issue?\n* from Daniel to everyone: adoption/integration/understanding\n* from Tom to everyone: Is there the concept of defined anti-patterns within ISC?\n* from Tom to everyone: It might be better to define it from the other side\n* from Tim Yao to everyone: Very true, Tom. Anti-patterns can be effective. We don't have any in the ISC yet, though.\n* from Daniel to everyone:\n\nFollowing items should move into sub-patterns:\nHigh quality solutions are being rejected due to the \"Not Invented Here\" mindset. Engineers and their managers are choosing to rewrite the same functionality even though an alternative exists.\nNotes: Not invented here can inject itself into many situations. It's a mindset.\n\nTeam or community is resistant to accept contributions from external contributors. Note: Split this based on use case: org-wide dysfunction vs team-level\n\n## Story\n\nTeam agrees that one or more stories could be helpful here, to illustrate the problem.\n\nCompany x has a software system available. A User Group realized that a common problem needed to be solved connected to that system. If there were failures during connecting time, need to retry. A library was created. Maintainers of the system looked at the library and rewrote it instead of leveraging the library that was written by another team. They assessed the library to be sub-par. The user group who wrote the library believes that it was not a quality issue that caused them to rewrite it, but that they rewrote it because they wanted to do it their way.\n\n## Context\n\n* Traditional development teams lack experience and knowledge of community engagement.\n* Company has deeply silo-ed engineering teams\n* Excess of ownership culture.\n* Little to no history using open source.\n* Company has mature/entrenched engineering cultures.\n* There is focus on intra-team cohesion and collaboration as opposed to cross-team collaboration\n* You can't predict where the next contribution is coming from (might be a force?)\n* Historical culture of silos, lack of cross-domain collaboration\n\nAcknowledge that no matter what you do, some won't read contrib files\nAcknowledge that no matter what you do, conflicting business goals/measures may result in dis-incentive to engage\nIndividuals fear being made replaceable\nYour contribution extends the usability of my widget, but I'm not allocated to support it/I fear change - fear of increased support load\nFear of increased support load in general\nCompanies with software developers :) We suppose that this may also be a more common problem among deeply silo-ed engineering teams and/or in companies with more mature/entrenched engineering cultures.\n\n## Forces\n\n* Lack of trust. Limited opportunities to build relationships and trust with Developers outside of their particular area.\n* Strong egos (team or individual).\n* Unwillingness or reluctance to work with others.\n* Concern that contributions from non-team members might be of inferior quality.\n* Concerns related to time constraints. Project Managers need to to deliver the project in alignment with schedule commitments.\n* Belief that learning and implementing something new will take away from the prime directive.\n* No incentive to contribute or even consume because it is counter to their KPIs.\n* Software may not be modular/designed for reuse. Team writing the code is not positioned to accept InnerSource contributions.\n* Fear of losing control.\n* Security can be a problem.\n\n* Teams tightly control their processes/engagement models\n* Contributing teams do not read contrib.md or prepare (\"fling it over the wall\")\n* Conflicting business goals/individual performance measures may result in groups or individuals being dis-incented to engage\n* Fear of diluting your perceived value\n* Teams are more comfortable being held accountable for their own work - hesitant to take on unknown risk- ex: will i break my own product if I accept this? will I break stuff on a wider scale?\n* Teams are hesitant to reuse/consume others' code\n* Perceived value of accepting contributions that have narrow impact\n\n- Team egos\n- Individual egos\n- The obvious benefit of what the solution could bring\n- Optics challenges - teams being judged for bringing in software from outside the walls\n- What metrics are being measured\n- Reward system\n\n## Solutions\n\n* [Going deep into the not-invented-here syndrome](http://blog.hypeinnovation.com/the-not-invented-here-syndrome) touches on this topic, describing a prescription for overcoming the \"Not Invented Here\" mindset:\n    * Acknowledge that the \"Not Invented Here\" mindset (NIH) exists\n    * Assess the impact of NIH on your innovation efforts. For example, have you missed opportunities?\n    * Build in explicit incentives to overcome NIH\n    * Engage people outside of the organization in strategy/evaluation phases for fresh perspectives\n* DSM video [Open Innovation: Proudly Found Elsewhere](https://www.youtube.com/watch?v=jNNz9poyKJs): Discusses the shift from strict NIH to empowering the \"Proudly Found Elsewhere\" approach.\n    * \"It pays to look outside ones area (open innovation). The open Innovation funnel has permeable walls-->greater chance of success, greater speed.\"\n\n* Provide template to use for code submission requirements. (Must include testing. Many companies have built-in, automated testing. Documented communication) For both host and contributors. Requires/assumes compliance.\n* Mentorship (requirements can be informed via tracking above results)\n* Talking is good /relationship building\n* Finding incentives to drive InnerSource behavior (incentives and measures can vary at a team level)\n* Shift to a \"profoundly found elsewhere\" culture\n* Demonstrate organizational interest in outside opinions\n* Identify influencers who agree to be early adopters - set the stage for others\n* Contributability is a mark of quality\n\n## Resulting Context\n\n* Developers search for and leverage existing options as opposed to rewriting. This results in:\n    * increased efficiency\n    * increased reuse\n    * higher levels of developer satisfaction\n    * increased speed to market\n* Developers interact with code and products produced by others with the same trust and engagement as those that they themselves have produced.\n\n## Known Instances\n\nTBD\n\n## Status  \n\n* Initial (PR from [16 Mar 2017](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/64))\n\n## Author(s)\n\n* Erin Bank, CA Technologies\n* Tim Yao, Nokia\n* Padma Sudarsan, Nokia\n* Georg Gruetter, Bosch\n* Ofer Hermoni\n* Rob Mulcahy\n* Max Capraro\n* Jory Burson\n* John McDonough\n* Shola\n* Becky - name only\n* Russ - name only\n* Nick\n\n## References\n\n* Oana-Maria Pop, Hype Innovation Blog: [Does Your Organization Have the Not Invented Here Syndrome?](http://blog.hypeinnovation.com/the-not-invented-here-syndrome)\n* DSM, Open Innovation: [Proudly Found Elsewhere](https://www.youtube.com/watch?v=jNNz9poyKJs)\n",
    "title": "Overcoming the Not-Invented-Here Mindset",
    "patlet": "Perfectly good solutions are being rejected because of \"Not Invented Here\" (NIH). Engineers and their managers will choose to implement functionality themselves first, even if an alternative exists. A shift towards a culture of \"Proudly Found Elsewhere\" can help reduce the negative impact of NIH.",
    "problem": "\"Not Invented Here\" mindset exists and has the following impact: Duplicative development, Cost, Redundancy, Missed opportunities for knowledge transfer, Slower time to market/bottlenecks, Quality impact (potential to miss out on leveraging superior technology), excessive ownership culture, lowered morale that can lead to talent retention issue.\n\nNotes:\n\n* Is the cost of adoption / integration of code from outside a reason for \"Not Invented Here\" rather than a peer issue?\n* from Daniel to everyone: adoption/integration/understanding\n* from Tom to everyone: Is there the concept of defined anti-patterns within ISC?\n* from Tom to everyone: It might be better to define it from the other side\n* from Tim Yao to everyone: Very true, Tom. Anti-patterns can be effective. We don't have any in the ISC yet, though.\n* from Daniel to everyone:\n\nFollowing items should move into sub-patterns:\nHigh quality solutions are being rejected due to the \"Not Invented Here\" mindset. Engineers and their managers are choosing to rewrite the same functionality even though an alternative exists.\nNotes: Not invented here can inject itself into many situations. It's a mindset.\n\nTeam or community is resistant to accept contributions from external contributors. Note: Split this based on use case: org-wide dysfunction vs team-level",
    "story": "Team agrees that one or more stories could be helpful here, to illustrate the problem.\n\nCompany x has a software system available. A User Group realized that a common problem needed to be solved connected to that system. If there were failures during connecting time, need to retry. A library was created. Maintainers of the system looked at the library and rewrote it instead of leveraging the library that was written by another team. They assessed the library to be sub-par. The user group who wrote the library believes that it was not a quality issue that caused them to rewrite it, but that they rewrote it because they wanted to do it their way.",
    "context": "* Traditional development teams lack experience and knowledge of community engagement.\n* Company has deeply silo-ed engineering teams\n* Excess of ownership culture.\n* Little to no history using open source.\n* Company has mature/entrenched engineering cultures.\n* There is focus on intra-team cohesion and collaboration as opposed to cross-team collaboration\n* You can't predict where the next contribution is coming from (might be a force?)\n* Historical culture of silos, lack of cross-domain collaboration\n\nAcknowledge that no matter what you do, some won't read contrib files\nAcknowledge that no matter what you do, conflicting business goals/measures may result in dis-incentive to engage\nIndividuals fear being made replaceable\nYour contribution extends the usability of my widget, but I'm not allocated to support it/I fear change - fear of increased support load\nFear of increased support load in general\nCompanies with software developers :) We suppose that this may also be a more common problem among deeply silo-ed engineering teams and/or in companies with more mature/entrenched engineering cultures.",
    "forces": "* Lack of trust. Limited opportunities to build relationships and trust with Developers outside of their particular area.\n* Strong egos (team or individual).\n* Unwillingness or reluctance to work with others.\n* Concern that contributions from non-team members might be of inferior quality.\n* Concerns related to time constraints. Project Managers need to to deliver the project in alignment with schedule commitments.\n* Belief that learning and implementing something new will take away from the prime directive.\n* No incentive to contribute or even consume because it is counter to their KPIs.\n* Software may not be modular/designed for reuse. Team writing the code is not positioned to accept InnerSource contributions.\n* Fear of losing control.\n* Security can be a problem.\n\n* Teams tightly control their processes/engagement models\n* Contributing teams do not read contrib.md or prepare (\"fling it over the wall\")\n* Conflicting business goals/individual performance measures may result in groups or individuals being dis-incented to engage\n* Fear of diluting your perceived value\n* Teams are more comfortable being held accountable for their own work - hesitant to take on unknown risk- ex: will i break my own product if I accept this? will I break stuff on a wider scale?\n* Teams are hesitant to reuse/consume others' code\n* Perceived value of accepting contributions that have narrow impact\n\n- Team egos\n- Individual egos\n- The obvious benefit of what the solution could bring\n- Optics challenges - teams being judged for bringing in software from outside the walls\n- What metrics are being measured\n- Reward system",
    "solutions": "* [Going deep into the not-invented-here syndrome](http://blog.hypeinnovation.com/the-not-invented-here-syndrome) touches on this topic, describing a prescription for overcoming the \"Not Invented Here\" mindset:\n    * Acknowledge that the \"Not Invented Here\" mindset (NIH) exists\n    * Assess the impact of NIH on your innovation efforts. For example, have you missed opportunities?\n    * Build in explicit incentives to overcome NIH\n    * Engage people outside of the organization in strategy/evaluation phases for fresh perspectives\n* DSM video [Open Innovation: Proudly Found Elsewhere](https://www.youtube.com/watch?v=jNNz9poyKJs): Discusses the shift from strict NIH to empowering the \"Proudly Found Elsewhere\" approach.\n    * \"It pays to look outside ones area (open innovation). The open Innovation funnel has permeable walls-->greater chance of success, greater speed.\"\n\n* Provide template to use for code submission requirements. (Must include testing. Many companies have built-in, automated testing. Documented communication) For both host and contributors. Requires/assumes compliance.\n* Mentorship (requirements can be informed via tracking above results)\n* Talking is good /relationship building\n* Finding incentives to drive InnerSource behavior (incentives and measures can vary at a team level)\n* Shift to a \"profoundly found elsewhere\" culture\n* Demonstrate organizational interest in outside opinions\n* Identify influencers who agree to be early adopters - set the stage for others\n* Contributability is a mark of quality",
    "resulting_context": "* Developers search for and leverage existing options as opposed to rewriting. This results in:\n    * increased efficiency\n    * increased reuse\n    * higher levels of developer satisfaction\n    * increased speed to market\n* Developers interact with code and products produced by others with the same trust and engagement as those that they themselves have produced.",
    "known_instances": "TBD",
    "status": "* Initial (PR from [16 Mar 2017](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/64))",
    "author(s)": "* Erin Bank, CA Technologies\n* Tim Yao, Nokia\n* Padma Sudarsan, Nokia\n* Georg Gruetter, Bosch\n* Ofer Hermoni\n* Rob Mulcahy\n* Max Capraro\n* Jory Burson\n* John McDonough\n* Shola\n* Becky - name only\n* Russ - name only\n* Nick",
    "references": "* Oana-Maria Pop, Hype Innovation Blog: [Does Your Organization Have the Not Invented Here Syndrome?](http://blog.hypeinnovation.com/the-not-invented-here-syndrome)\n* DSM, Open Innovation: [Proudly Found Elsewhere](https://www.youtube.com/watch?v=jNNz9poyKJs)",
    "slug": "not-invented-here"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/modular-code.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nModular Code\n\n## Patlet\n\nThe lack of modularization in the software architecture prevents reuseability, and with that the ability to reap the benefits of InnerSource. By helping the teams to understand the benefits of modularization, and making time to work towards that goal, more InnerSource collaboration can happen and the software architecture overall can be improved.\n\n## Problem\n\nWith rare exceptions, monolithinc code is difficult to contribute to as it packs much functionality (much to read, much to grasp, much to test, much to review, and much to document). Finding slots and the right mood to attack big chunks of work is difficult.\n\nThe same functionality is reimplemented redundantly causing waste of unneeded re-design and re-development and duplicated mainteinance effort.\n\nSometimes the first problem causes the second, but it might also happen spontaneously.\n\n## Context\n\n* There might be potentially reusable functionality buried in monolithic code. Legacy code tends to be less modular than new one.\n* There is an available repository for sharing code.\n* Source code can be as useful as documentation on small enough pieces.\n* Documentation needed for getting started using a small piece of code is easy to write.\n* Time commitments might already have been made for customer deliveries (not changeable).\n* The value of modularity is nearly invisible for end users.\n\n## Forces\n\n* Against:\n  * Developers who develop monolithic code bases might lack the perspective of how modularity might improve how they work.\n  * Developers might not know how to write modular code.\n  * You might be dealing with legacy systems. Might be a fear that if not done properly, quality might be impacted.\n  * Architectural constraints might impact modularity.\n  * The value of modularity is nearly invisible for end users.\n* In favor:\n  * Modularization mitigates risk and fear of quality degradation from accepting InnerSource contributions.\n  * Companies moving to use more open source code will appreciate modularity more over time.\n  * Code protected through reliable automated testing offers a chance for newcomers to safely have an impact by refactoring. Modularization is a powerful goal for refactoring. And refactoring usually drags additional benefits.\n  * Frequent turnover of team members speaks for modularization, as it helps newcomers to learn about the system at smaller bits.\n* Neutral / Two-folded:\n  * Some companies have a common components group that develops reusable code, but others feel that such components should be developed by those business lines that are using the components and a library of common components could be established.\n  * Level of communication between teams can impact ability/inclination to modularize.\n\n## Solutions\n\nModular code is far more reusable. Decoupling functionality into smaller narrow-focused modules eases\nand therefore promotes external contributions and onboarding of newcomers.\n\n* Offer education.\n  * On why: Lack of modularity is technical debt. It increases costs but hides them by shifting these into the future.\n  * On how: Modular code is well-understood; there is a lot of literature in favor of this that can be used for training.\n  * Select certain \"success projects\", teams that have developed reusable code and can demonstrate the long term success. This can help motivate others, as they see what is possible and what is in it for them. Learning directly from other developers is critical.\n* Introduce refactoring as an organic effort and strive for it to become part of the culture.\n  * Acknowledge and drive acceptance for the investment in modularization. Build time into the release schedule for this.\n* Search for modularizable functionalities:\n  * Identify common functionalities and code blocks with potential for profitable modularity.\n  * Establish a checklist of elements to be checked off to classify a component as reusable.\n    There could be requirements on tests, tools and documentation before considering a component as reusable.\n    Establish standards on testing methodology, labeling of repos.\n* Eat the elephant in small bites. Break modularization down into baby steps, like\n  1. Find internal would-be customers. Better ask them over guessing on your own.\n  1. Define decoupling scope and preferred decoupling methods.\n  1. Develop automated testing protection.\n  1. Document usage of modules.\n  1. Introduce semantic versioning.\n  1. Committing to not breaking backwards compatibility.\n  1. Use a dependency management software such as pip, nuget, npm.\n* More information and techniques are available from the book *[Working Effectively with Legacy Code](https://www.oreilly.com/library/view/working-effectively-with/0131177052/)* by Michael Feathers and *[Refactoring: Improving the Design of Existing Code](https://martinfowler.com/books/refactoring.html)* by Martin Fowler.\n\n## Resulting Context\n\n* Modular code facilitates division of parallel labor (as required for work in larger teams, or as an open source project).\n* Modular projects enable team members to focus on their own smaller assigned tasks.\n* Modular code helps Agile: For the same functionality, you'll need to change more bits, but the modularity helps to materialize sooner (earlier and more reliable validations) and to prioritize the most relevant bits (separate value from waste).\n* Modular efforts increase autonomy and accountability for Engineers, which can raise satisfaction and quality.\n* Modular code makes the pathway to InnerSource and open source smoother.\n* Modular code gets used more often, and that diverse set of users often leads to higher quality code.\n\n## Known Instances\n\nElements of the resolution have been proven by various companies such as\n\n- GitHub\n\n## Status\n\nInitial\n\n## Authors  \n\n* Tim Yao, Nokia\n* Erin Bank, CA Technologies\n* Keerthi Surapaneni\n* Igor Zubiaurre\n",
    "title": "Modular Code",
    "patlet": "The lack of modularization in the software architecture prevents reuseability, and with that the ability to reap the benefits of InnerSource. By helping the teams to understand the benefits of modularization, and making time to work towards that goal, more InnerSource collaboration can happen and the software architecture overall can be improved.",
    "problem": "With rare exceptions, monolithinc code is difficult to contribute to as it packs much functionality (much to read, much to grasp, much to test, much to review, and much to document). Finding slots and the right mood to attack big chunks of work is difficult.\n\nThe same functionality is reimplemented redundantly causing waste of unneeded re-design and re-development and duplicated mainteinance effort.\n\nSometimes the first problem causes the second, but it might also happen spontaneously.",
    "context": "* There might be potentially reusable functionality buried in monolithic code. Legacy code tends to be less modular than new one.\n* There is an available repository for sharing code.\n* Source code can be as useful as documentation on small enough pieces.\n* Documentation needed for getting started using a small piece of code is easy to write.\n* Time commitments might already have been made for customer deliveries (not changeable).\n* The value of modularity is nearly invisible for end users.",
    "forces": "* Against:\n  * Developers who develop monolithic code bases might lack the perspective of how modularity might improve how they work.\n  * Developers might not know how to write modular code.\n  * You might be dealing with legacy systems. Might be a fear that if not done properly, quality might be impacted.\n  * Architectural constraints might impact modularity.\n  * The value of modularity is nearly invisible for end users.\n* In favor:\n  * Modularization mitigates risk and fear of quality degradation from accepting InnerSource contributions.\n  * Companies moving to use more open source code will appreciate modularity more over time.\n  * Code protected through reliable automated testing offers a chance for newcomers to safely have an impact by refactoring. Modularization is a powerful goal for refactoring. And refactoring usually drags additional benefits.\n  * Frequent turnover of team members speaks for modularization, as it helps newcomers to learn about the system at smaller bits.\n* Neutral / Two-folded:\n  * Some companies have a common components group that develops reusable code, but others feel that such components should be developed by those business lines that are using the components and a library of common components could be established.\n  * Level of communication between teams can impact ability/inclination to modularize.",
    "solutions": "Modular code is far more reusable. Decoupling functionality into smaller narrow-focused modules eases\nand therefore promotes external contributions and onboarding of newcomers.\n\n* Offer education.\n  * On why: Lack of modularity is technical debt. It increases costs but hides them by shifting these into the future.\n  * On how: Modular code is well-understood; there is a lot of literature in favor of this that can be used for training.\n  * Select certain \"success projects\", teams that have developed reusable code and can demonstrate the long term success. This can help motivate others, as they see what is possible and what is in it for them. Learning directly from other developers is critical.\n* Introduce refactoring as an organic effort and strive for it to become part of the culture.\n  * Acknowledge and drive acceptance for the investment in modularization. Build time into the release schedule for this.\n* Search for modularizable functionalities:\n  * Identify common functionalities and code blocks with potential for profitable modularity.\n  * Establish a checklist of elements to be checked off to classify a component as reusable.\n    There could be requirements on tests, tools and documentation before considering a component as reusable.\n    Establish standards on testing methodology, labeling of repos.\n* Eat the elephant in small bites. Break modularization down into baby steps, like\n  1. Find internal would-be customers. Better ask them over guessing on your own.\n  1. Define decoupling scope and preferred decoupling methods.\n  1. Develop automated testing protection.\n  1. Document usage of modules.\n  1. Introduce semantic versioning.\n  1. Committing to not breaking backwards compatibility.\n  1. Use a dependency management software such as pip, nuget, npm.\n* More information and techniques are available from the book *[Working Effectively with Legacy Code](https://www.oreilly.com/library/view/working-effectively-with/0131177052/)* by Michael Feathers and *[Refactoring: Improving the Design of Existing Code](https://martinfowler.com/books/refactoring.html)* by Martin Fowler.",
    "resulting_context": "* Modular code facilitates division of parallel labor (as required for work in larger teams, or as an open source project).\n* Modular projects enable team members to focus on their own smaller assigned tasks.\n* Modular code helps Agile: For the same functionality, you'll need to change more bits, but the modularity helps to materialize sooner (earlier and more reliable validations) and to prioritize the most relevant bits (separate value from waste).\n* Modular efforts increase autonomy and accountability for Engineers, which can raise satisfaction and quality.\n* Modular code makes the pathway to InnerSource and open source smoother.\n* Modular code gets used more often, and that diverse set of users often leads to higher quality code.",
    "known_instances": "Elements of the resolution have been proven by various companies such as\n\n- GitHub",
    "status": "Initial",
    "authors": "* Tim Yao, Nokia\n* Erin Bank, CA Technologies\n* Keerthi Surapaneni\n* Igor Zubiaurre",
    "slug": "modular-code"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/junkyard-styled-innersourcing.md",
    "stage": "1-initial",
    "markdown": "## Title\n\n* Junkyard styled inner sourcing\n* Finding but deciding not to use the internal component\n\n## Patlet\n\nTBD\n\n## Context\n\nTwo situations:\n\n* SW component not designed for reuse because the schedule was too tight and did not allow for the extra effort needed\n* Did not have the knowledge or training to create components that can be reused.\n\n## Problem\n\n* How do you encourage people to share whatever code they write?\n\n## Forces\n\n* People don't share something so others can use it; they only share it for the sake of sharing. They wouldn't mind if no one uses it (a bit of a graveyard: \"InnerSource is where modules go to die\")\n* A developer might be a person who likes to share their code; one that likes others to read it (and maybe comment on it. But mostly they like to write code. \"Hey, I wrote this nifty gzorp and you might like it (but its no skin off my nose if you don't)\"\n* the code is crap\n* the code doesn't address any of the company's problems (at the moment anyway)\n* How does the person let others know that the code exists?\n* We want the person to contribute code, so what roadblocks need to be removed so that they continue making their code available?\n* How do we politely take their freely offered code and harden it or otherwise prepare it for production without having the original contributor feel like we are saying their code is crap?\n\n## Solution\n\n* Support all contributions to the shared repository.\n* Provide some sort of grading (Alexander marked his patterns with 0, 1 or 2 stars depending upon how convinced he was that it was a good pattern), so that the reader can be aware of what to expect. But how to do that without insulting the contributor? (solution: engage them in the process -- have 2 scores, what they think, and what users think or how many times its been used)\n\n## Status\n\n* Initial (brainstormed solution)\n\n## Authors\n\n* Georg Gruetter\n* Erin Bank\n* Padma Sudarsan\n* Tim Yao\n* Robert Hanmer\n",
    "title": "* Junkyard styled inner sourcing\n* Finding but deciding not to use the internal component",
    "patlet": "TBD",
    "context": "Two situations:\n\n* SW component not designed for reuse because the schedule was too tight and did not allow for the extra effort needed\n* Did not have the knowledge or training to create components that can be reused.",
    "problem": "* How do you encourage people to share whatever code they write?",
    "forces": "* People don't share something so others can use it; they only share it for the sake of sharing. They wouldn't mind if no one uses it (a bit of a graveyard: \"InnerSource is where modules go to die\")\n* A developer might be a person who likes to share their code; one that likes others to read it (and maybe comment on it. But mostly they like to write code. \"Hey, I wrote this nifty gzorp and you might like it (but its no skin off my nose if you don't)\"\n* the code is crap\n* the code doesn't address any of the company's problems (at the moment anyway)\n* How does the person let others know that the code exists?\n* We want the person to contribute code, so what roadblocks need to be removed so that they continue making their code available?\n* How do we politely take their freely offered code and harden it or otherwise prepare it for production without having the original contributor feel like we are saying their code is crap?",
    "solution": "* Support all contributions to the shared repository.\n* Provide some sort of grading (Alexander marked his patterns with 0, 1 or 2 stars depending upon how convinced he was that it was a good pattern), so that the reader can be aware of what to expect. But how to do that without insulting the contributor? (solution: engage them in the process -- have 2 scores, what they think, and what users think or how many times its been used)",
    "status": "* Initial (brainstormed solution)",
    "authors": "* Georg Gruetter\n* Erin Bank\n* Padma Sudarsan\n* Tim Yao\n* Robert Hanmer",
    "slug": "junkyard-styled-innersourcing"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/introducing-metrics-in-innersource.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nIntroducing Metrics in InnerSource\n\n## Patlet\n\nInvolve all stakeholders in designing and interpreting metrics to measure the current status in terms of _health_ and performance of the InnerSource initiative.\n\n## Problem\n\nAn organization that is planning to apply or is in the early stages of applying InnerSource would like to measure the 'health' and performance of the initiative i.e. Is there an increase in cross-divisional and cross-location collaboration?\n\nThis pattern applies very widely from InnerSource initiatives in their infancy stages to small or large scale InnerSource initiatives that are already mature in their initial process and steps.\n\n## Context\n\n* This organization may already have qualitative feedback from the involved teams, but desire more objective information focused on development activities.\n* The organization does not really know where to start measuring things or what are the key parameters to measure.\n* Changes in the top level initiatives may affect the InnerSource program as they rely on the good will of some executive from the organization.\n* You may have a problem justifying the InnerSource effort when there is a change in business priorities or business leadership. Then you need something concrete to justify the program. A future problem you're guarding against.\n* If there's a change in the C-level, metrics might be helpful to convince them that InnerSource is useful.\n\n## Forces\n\nAgainst:\n\n* People do not like to be tracked or measured.\n* There is no canonical monitoring infrastructure for the software development process. Furthermore, such infrastructure is hard to build or to get funding for.\n* There is not a culture of software development metrics.\n* Metrics can be misunderstood especially if people have not received any training on the same.\n* Organizations collect vanity of any other type of metrics that do not track business objectives' success or failure over time.\n* Metrics tend to become goals, will subsequently be gamed and thus meaningless.\n* There is potential conflict in reconciling metrics on team effectiveness or productivity if teams within the organization have different versions of them.\n* Some organizations in some countries may face extra complexity when introducing metrics as the countries may not allow tracking individuals.\n* There might be a learning curve in the discussion about metrics. And perhaps the tools do not support the InnerSource metrics we are looking for.\n\nIn favor:\n\n* Management needs to understand how InnerSource is impacting development. Metrics allow for accurate visualizations.\n* There are several industry standards for monitoring the software development process (e.g. [DORA](https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance), [CHAOSS](https://chaoss.community/)).\n* There are many tools providing metrics for monitoring the software development process and the software product.\n\n## Solution\n\n### Manage people's needs\n\nBring developers, middle managers and C-level to have a discussion about metrics. And consider other roles out of the usual development process such as Human Resources, legal departments, product management, and others.\n\nLet developers and middle managers know that these metrics or KPIs are not focused on tracking their personal performance, but to compare if the initiative is currently working as expected.\n\nConsider a third party that is seen as a neutral player to produce such metrics.\n\n### Approach professionally\n\nHave specific training on the topic of metrics and good practices to use them. An example is to have a methodology to follow metrics such as the Goal-Question-Metric approach or the Objectives-KeyResults one. On the other hand, try to reflect the short-term and medium-term goals in the metrics to be used.\n\nWhen publishing or discussing metrics they should be\n\n* aggregated - without referring to specific people\n* watching out for outliers\n\nProduce a characterization of metrics as this might be helpful for others to understand and follow.\n\n* Nearly always InnerSource is not a goal in-and-of itself but a proposal of how to improve some larger problem that the company is having. One class of metrics is around that larger goal (e.g. quality, interrupt-driven work, duplicated code, etc.) and reflects the company's progress towards it.\n* Another class of metrics is around how much InnerSourcing is happening. A raw definition of InnerSource based on code submissions to a repository not owned by the submitter's team could be measurable in a few ways.\n* A third class of metrics are KPIs that we believe will improve the raw amount of InnerSourcing happening (e.g. mean-time-to-review, automated test runs on PRs, etc.).\n\n_Note:_ The aforementioned metrics are some common examples. They aren't a one-size-fits-all. We expect the business goals of the organization to drive the metric selection process.\n\n### Metrics Candidates\n\nThe list below consolidates some metrics candidates, grouped by business goals.\n\n| Business Goals | Metric Candidates |\n|---|---|\n| Remove silos and bottlenecks | # of PRs from external contributors<br># of PRs from external contributors that are merged<br># of external contributors<br># of issues created from external contributors<br># of reviews from external contributors |\n| Knowledge sharing | # of clone or forks from external guests<br># of visits from external guests |\n| Creating reusable software | # of submodule usage<br># of code reuse across projects<br># of clone or forks from external guests |\n| Increase development speed | Time to market<br>Mean-time-to-review |\n| Employee satisfaction & talent retention | eNPS score<br>attrition rate |\n| Improve quality | # of automated test runs on PRs<br># of issues created from external contributors<br>Rework rate |\n| Innovation |  |\n| Others | # of repositories using InnerSource components (managed contributing guidelines, assigned TCs)<br>Days of host's responsiveness on the issues/PRs created by external contributors |\n\n## Resulting Context\n\nThe organization builds a monitoring and reporting infrastructure for the metrics that flow directly from its business goals.\n\nThose metrics will provide visibility into the current situation of the project to the C-level executives. By comparing the metric measurements before applying InnerSource and to the metric measurements after applying the InnerSource initiative, it is possible to gauge the effectiveness of the InnerSource initiative.\n\nContinued monitoring of these metrics will help middle management and developers understand how the initiative evolves and will help them with their daily work.\n\n## Known Instances\n\nSantander Bank\n\n## Status\n\nInitial\n\n## Authors\n\n- Daniel Izquierdo\n- Tim Yao\n- Clint\n- Russ Rutledge\n- Tom\n- Jack Yang\n- Igor Zubiaurre\n\n## Acknowledgement\n\n- Georg\n- Bob\n- [Aaron Stewart](https://github.com/a-a-ron/innersource-template-pluralsight/tree/master/metrics)\n- Wilson Mar\n- Addie Girouard\n- Alberto Pérez García-Plaza\n- Daniel Izquierdo Cortázar\n",
    "title": "Introducing Metrics in InnerSource",
    "patlet": "Involve all stakeholders in designing and interpreting metrics to measure the current status in terms of _health_ and performance of the InnerSource initiative.",
    "problem": "An organization that is planning to apply or is in the early stages of applying InnerSource would like to measure the 'health' and performance of the initiative i.e. Is there an increase in cross-divisional and cross-location collaboration?\n\nThis pattern applies very widely from InnerSource initiatives in their infancy stages to small or large scale InnerSource initiatives that are already mature in their initial process and steps.",
    "context": "* This organization may already have qualitative feedback from the involved teams, but desire more objective information focused on development activities.\n* The organization does not really know where to start measuring things or what are the key parameters to measure.\n* Changes in the top level initiatives may affect the InnerSource program as they rely on the good will of some executive from the organization.\n* You may have a problem justifying the InnerSource effort when there is a change in business priorities or business leadership. Then you need something concrete to justify the program. A future problem you're guarding against.\n* If there's a change in the C-level, metrics might be helpful to convince them that InnerSource is useful.",
    "forces": "Against:\n\n* People do not like to be tracked or measured.\n* There is no canonical monitoring infrastructure for the software development process. Furthermore, such infrastructure is hard to build or to get funding for.\n* There is not a culture of software development metrics.\n* Metrics can be misunderstood especially if people have not received any training on the same.\n* Organizations collect vanity of any other type of metrics that do not track business objectives' success or failure over time.\n* Metrics tend to become goals, will subsequently be gamed and thus meaningless.\n* There is potential conflict in reconciling metrics on team effectiveness or productivity if teams within the organization have different versions of them.\n* Some organizations in some countries may face extra complexity when introducing metrics as the countries may not allow tracking individuals.\n* There might be a learning curve in the discussion about metrics. And perhaps the tools do not support the InnerSource metrics we are looking for.\n\nIn favor:\n\n* Management needs to understand how InnerSource is impacting development. Metrics allow for accurate visualizations.\n* There are several industry standards for monitoring the software development process (e.g. [DORA](https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance), [CHAOSS](https://chaoss.community/)).\n* There are many tools providing metrics for monitoring the software development process and the software product.",
    "solution": "",
    "resulting_context": "The organization builds a monitoring and reporting infrastructure for the metrics that flow directly from its business goals.\n\nThose metrics will provide visibility into the current situation of the project to the C-level executives. By comparing the metric measurements before applying InnerSource and to the metric measurements after applying the InnerSource initiative, it is possible to gauge the effectiveness of the InnerSource initiative.\n\nContinued monitoring of these metrics will help middle management and developers understand how the initiative evolves and will help them with their daily work.",
    "known_instances": "Santander Bank",
    "status": "Initial",
    "authors": "- Daniel Izquierdo\n- Tim Yao\n- Clint\n- Russ Rutledge\n- Tom\n- Jack Yang\n- Igor Zubiaurre",
    "acknowledgement": "- Georg\n- Bob\n- [Aaron Stewart](https://github.com/a-a-ron/innersource-template-pluralsight/tree/master/metrics)\n- Wilson Mar\n- Addie Girouard\n- Alberto Pérez García-Plaza\n- Daniel Izquierdo Cortázar",
    "slug": "introducing-metrics-in-innersource"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/innersource-portal-hygiene.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nInnerSource Portal - Hygiene\n\n## Patlet\n\nBased off the [InnerSource portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md) pattern.\n\nAllow generation of an official badge for projects intending to be recognised as InnerSource project within your company.\n\nThis will help users distinguishing InnerSource projects which strive to adhere to InnerSourcing principals from repos that - have been made public by mistake, due to negligence or for ease of discoverability (but do NOT adhere to InnerSource patterns/best practices). Furthermore the badge serves as additional marketing for the InnerSource initiative at your company.\n\n## Problem\n\n- Users don't have a mechanism of distinguishing InnerSource projects which strive to adhere to InnerSourcing principals from repos that have been made public by mistake, due to negligence or for ease of discoverability (but do NOT adhere to InnerSource patterns/best practices).\n- Unmaintained or stale InnerSource projects clutter the portal and make it difficult for people to discover active projects, and diminishes the value on the InnerSource portal\n\n## Context\n\nLarge organisation with lots of public repos, not all necessarily meeting the desired innerSource project standard.\n\n## Forces\n\n- Mix of managed and unmanaged projects makes it difficult to figure out what needs to be in the InnerSource portal\n- Repos are made public when they really shouldn't be\n- Repos become stale and never get cleaned up\n\n## Sketch\n\n- Click [here](https://www.draw.io/?lightbox=1&highlight=0000ff&edit=_blank&layers=1&nav=1&title=Untitled%20Diagram.drawio#R7V1Zl5s4Fv41fiwfdsxjLanunpN0MqnMdOcpB4NsqwOIZqmlf%2F1oQRgt2Dg2xjUp55yUEULgu%2Bne716JmX2bPv9ShPnmA4pBMrOM%2BHlm380sy%2FR8G%2F8hLS%2BsxTIck7WsCxg3vbYND%2FAf0DQaTWsNY1AKHSuEkgrmYmOEsgxEldAWFgV6ErutUCLeNQ%2FXQGl4iMJEbf0DxtWGtS5cY9v%2BK4DrDb%2BzaTRn0pB3bhrKTRijp06T%2FW5m3xYIVexb%2BnwLEkI9Thd23X3P2fbBCpBVQy64WWYf%2FduH%2BvG%2F%2Fv3HX%2B9v%2Fp18ubsyLZ%2BN8xgmdfOTZ5aX4BFvVggPjJ%2B7emmI4f1dI37iqqSsusYdTC9%2F3p7E39bk701YRRt89l9oWfIR8cOxQVmXhi7t%2BFaB6iwG5HlNfPppAyvwkIcROfuE5Qu3bao0aU7HYblp%2B5Jh78MUJkTOfgXJI6hgFDYnGqny8WFZFeg7uEUJKugt7cU1%2BYfPPIKCXJJcJ3Cd4XMVyttHJOfAcy%2FdzZabWA8ASkFVvOAu%2FAKHyzLXAbNRiqetQFlcbDYdYfIWDXPCRojX7eBbPuMvDasPYLunMP03rD7FA6oLTG3L%2BISKKkwU%2FnSoz8n1PlyC5BMqYQURIdsSVRVKcYewoWOEyQQwsW8S0vMmjL6vKZs7PFjRTy8PGM%2B49lk6LhrGwrg3CLthkuhGbpXP6EqOwc7k5Oelz2tiwuYQlf4cYnNSzp9gRi86hRTIQuDoZMBVZcDklubkMmArMvAZ5ISRiD53FqZAEQCRFaaokAfReA6%2FgOfqtyyvKx1DHfpp9FdgNPng9mWN5SwjY5ATgp4vdsiBzqZwSU3AqjoRs11LYLZpOHNX4bdpaXTedEdit6Ow%2B6FeprDaY4QH8VdH1Q5DTI1mevSjsxOqLNyRf6ostEw9BccCiWO2qfCLey4Cu8ay0KapUc81LAmNsHKCJ%2Fx%2F0dFXiYkVVYwu9wqAZ%2BxwSTsQfuQIZhV9avdm5hLyhnWFyoZjOsb0WGfMdpitv5ADImWnYYdjcYVpGOKr%2FDAdjf5YY5lLU2cvW4YQVuzQJEJwPKVu0BpleM5ElFiEyH%2BBqnpp1ITQX%2BQZGxHEiosq0RHflc3cO2b8Rr6rsFiDap9roDKmAElYwUfxQXREbi79RMSr4wRZztxzfMNdLCzbtQJrIbpEwWLOTjim6XuO54g3YD%2BvGVNiZPuQR%2FBW9YduNyD6XpKIIYQJ5qHMW8KUh%2BZwy9l329abo7kPnmH1J7kcqwI7%2BtoMRr7fPXcPXvhBhinBLnIWC97wtXt2eyE9Eq78BAqIiUnUnTaeUABN55wCeF0U4UunQ2PteuVzYZiCQF6ZUjAl9betnf3xF%2FYEJxVTbtt0YpqHZTmJkG4Fzj1E3KaQLOZzn9y2eZbo2puBPch6KQP5thQoWtJA7BeOZwZVHxEbhBUq0hn5iSyGXxY8fO%2B6H%2FK5qJFLeUbcoHRZl%2FuD%2BxP4EL4teRBaH9zW%2BBCL0XwIVyGwqrNZfE1wK%2BJ5JVipYdSncIK6bbVvfIXzBuobkyeVQR36uxry87ZjXQ5RmexA4upQrfSkcRxpnJGVkotIR2b%2BKLDuqDp31fqhRl0k%2BvPLkAgA9mqwU8Mi%2FF29wHMONcHFGX0f%2Fr0j4wN8n8k0w3EHqkaf7TpS5hcy1OgMm4pOJaz2QmPgDkSTLRFNxg54JF6whXcV0PkOlnlCHb8IxUSCywzmOSA3rpB2EoNZlNS0K8y2%2BvP53fXdh3fzNB6KXJ9BJQSI%2BxbzEdLI83fwJKItXkd9roy5YbiiDrnWbi3CByOGAfbgONTaObuTH8YxmiOVxl%2BISuMa5iClOTTItd3FPOh8FoPmkUMjGceQ7tpQSRuZbK%2Fmw6PVqgSj2AZPtQ3%2FrgHlKZ1nSJDNZ57XMeEMSTqZ1mn1p02C7tWfY4OdozxdX%2FVaOLMpi0nImoGwgNn6Av0MfxQ%2F46LFxTemFJdARTamlAYRcTOPNgL%2BVEwdB8z1HRH8cv1hIdGhU5lpBOLM7FnnQNnUzIuQHJc9SJ4rl9vvwipchqUmidpkQ6OXBGJ5LfajIUsm2O%2BXbUObRv9YV3gUMDsZbGIaTk%2Fg3IVNdOUKwVjWQVOjEqxWthfE3nJpWfOcTCI9RI5RVKf0px9M5JMQUw7IXC0KpctkeWOlFq3g9ZJTglotXy2jOC8xbXXmejXElOHmxWJqYqpe41td0sh1SUYgZdptHv5OWJqk5tq%2FYhHALaI46KPF1177YPsiPzSlKKYONx%2Bt9MHW1oiGKSEBdXpgum4bsmVJSVNEsy5ox%2F0jTLJspoMBCdeuGroTHLAlPfnlxDpelcw8kpMZKlJsBxg%2BKOKHpBiV3k6CBjdVRUqGrwkprHtI5Ig52vPnl3%2FmEbYN5ESL9rHn5GjfxM%2FenVEu9Rm7DvB%2BlHffKNKvY9Nop7Mga2FSCfeCOiPRd3FHg3gXx%2BrvvlXCnb31KLFqmXaCunvK6rwT2Rsea7cwpcbeLM6ZJnV8hXKvOPg%2FNaTDUzr7yx160q%2FngXQcdQ7%2FBWC9DKv%2BmVvk4R6f%2BEDaH1dLIMXEbYnHvnJebzQd8d50ZJ%2FoD9ER90gd6cnD2phCvJjRN9xAtLByKcLIJQTOYkpZufSMymBZsSeFyB21OOuhQsX%2FgTG1AnPo6ojxzGkwqTk9QEU6BZdBEMzEDBRdMnNwle8kWje0UoZhQpNpnVqxx7UO3yCMwyp8vYpnT%2B7F8FUJHfL%2Bp2wWVLC1FSxBTGNaEfvJC%2FQXWfArUx%2BxhMhtux6YS3gHfsP%2F7slT3qyLMIZgey5DJJWi4njtBX04ngDd7cUg9WiSAjpJYtKVBnrc%2FGhyy7DM2a9dwWfyHAp8GD6VzrwATC9%2Fi8jzEFiMfRN71WWDCxwPMUtwfaBGlt5ZxU1d53EHElDxisjLmQOsgZNAWxF8uSUI3tB4dVr%2FylOzYq1skHLsixGNH5MM%2BzVLxtHVssdJhopktJIhVa6pKx467NR5AqKMnNMZMB1X8gYMTZ5f5w2Mhvt5aoij0FOe15Z5ms0r7M4W30osRwRezTvuLb4rzEvQ8Xi7CpZIE3TBfuSQlKC0aFzrdQzi0kHFe%2BIwHUbplrHwtiOxjHbVSruYXRxhvIpR01T5f6Egl65q%2BoSVYTvt0n47OxThMI1jg60fqvPyTREfc85Q5WXyjPblg2Jj1pueuDKRFwIOkLRpy5PVqp0HkJFpPEMVXGEykRmBFCmrdX0rVMwOqWJ%2BPR6A6wRDgbjRfAC%2Bz8ObD9BXkf1z%2BQC%2B6nz3aCpd4JUhghSJBQB5vUxgNGsXd6EnUvvxivXU96b21P03T12Qz59dS9t68NfpqV%2BAh7XT%2BO33u4Z6%2BMGkNSH%2B276D09f3uo7q4525vtfvXya%2BMQXW95QP%2BrodR%2F9kH9Vj31sbSUd%2Fan56p%2F5RucV7VACyGQqeqWryN6Ysx0NCuoY2JdYVk4TsRlvi2QVUtGg5jGEOSxg1YUICm14lBQ5j4pMAWJcpIocVSHM6JswiGMO4pha%2BJv9hSWapR7qgnd6bJiLDdRaS2yTw7zqc7ykQxc2Exj3r2NUKRVHmmwRZV9x5zozVQuMGdyZXRlt9iVCEZXuVUAXZwDgG2Q85Wv6JVIU7MXy1mTlwpc5ohdeLvfaSJUFVZ%2Fa118Ar%2B%2F%2B5%2FsDNe8ZjRv9OyW9G681oXYrR0szuWqMlBwen05O3yf1NTy5fT7ypJ%2FdgANK5bzO4oQQ8NBYfELAOTgkM3S2O7YejMvA8u8VJpXGBKY0wdA8gaceChSeNc%2FDWCKeHajjnLj7xNUECKxgMpPh6aT3TfilD8FcZrIjpZwhYsZ0aulv9ixvDh8sSJXUFrovooRM0tEfWee276Uka7PsqSG7xIi%2FBgHhjMUmtHf6KanL38JFM7WRaF3ITc9W7Ibsx3mJ%2FA8a0KjYNvzM%2Fg7okeQEf2XIq4lPot4PsVtHCZqOvg%2BppBdCqectOJ4zsTkaiWPku%2BdfnZMjw1zrKrXlel5tv3bzOtxIUj5Bo7E1OUwY7kwF92GCKvQ9qxaRUgBzQtv0aB%2Bc97UZdnr7XUPxQuucgZLYRZ0OTmeXbJQipBOsk06EYfLcbpI%2BfSQjUKPuTLn%2BnyOlb3fcF1X0Hwf6M5VkrvwM1KG0WGizJO8KYfdQaRBVbe5O0C5I0ee%2FOQGcozypqTRGdIGtfihpPwzGdzNMUVhUtQLhnC6LJiIQib5J2yZJmmbZYpei51vSiNukq8AuP5Zoaw7PUvR7Jxv7Uwm5Ys7Nttq1DTUkMgPkdxlFYEu%2FuEZKgI0IJRRupi02ONyE2MD07xmuqrWZNsVXVWrWoY9UMsukhacROIjF4H%2B%2Feffzj93efH2Z8kVUfhKuAmnvxywFJrYEu%2F4AqAUlSeyW619iI0dOshRb3xgaNnvfaJmNOAmDBOp1ma2x8ZykPZ3m84QxVRZZa%2FHfsdvJMtD6HsKR7vpdlLe39fjH7veut7IQLA6czz5335U5innVi%2BJOjbdJbUVxPt4eDrfOGRsPbTENFRbX7BRqshL%2BBE2hWEVuCmVrLrwHkOmAcJhZ4Yt2bofZia%2FJodBoFWVnTXB%2FF5%2FAkUcGsBm1Jc5jn%2BLG4kao2QB1eXzX3htydB7nrXcvyk0F3pub9YT%2B9nZS33OBLGqezkpqXkA22khtq4ZYAMH8pRY%2FU0w%2F1K6X6LeGbsZrMWPW9lO2nM1a6MiXZWDXSA9OQOLw3mjp0Efbai5YNCDPpza45BqYFxJrnuRP3tI3izKAV5Cv6WoFmT1u2RdE9rSzHf2t4BcoSZEQb7wkT7795Lm40rQXdZHXCEh3TkHckMLXrEX1VGsd7DbfmbRCnCUF%2FYXVelDvY8YwwV0JKDWZ2VWuas1dxMoeTv1%2Fz4qLVE%2BxVcoGhKkdqfviVl%2BMuoFfSbbtfXux6ix3dR1pvr3l58WkU6eH2Az73%2BQDwpn3%2FAlY%2BspsbM%2B57Nmqb0CzKPuTA97H8wOpPfFggQt0t64nb9AHFgPT4Hw%3D%3D) for draw.io diagram\n- Click [here](https://www.draw.io/?title=Untitled%20Diagram.drawio#R7V1Zl5s4Fv41fiwfdsxjLanunpN0MqnMdOcpB4NsqwOIZqmlf%2F1oQRgt2Dg2xjUp55yUEULgu%2Bne716JmX2bPv9ShPnmA4pBMrOM%2BHlm380sy%2FR8G%2F8hLS%2BsxTIck7WsCxg3vbYND%2FAf0DQaTWsNY1AKHSuEkgrmYmOEsgxEldAWFgV6ErutUCLeNQ%2FXQGl4iMJEbf0DxtWGtS5cY9v%2BK4DrDb%2BzaTRn0pB3bhrKTRijp06T%2FW5m3xYIVexb%2BnwLEkI9Thd23X3P2fbBCpBVQy64WWYf%2FduH%2BvG%2F%2Fv3HX%2B9v%2Fp18ubsyLZ%2BN8xgmdfOTZ5aX4BFvVggPjJ%2B7emmI4f1dI37iqqSsusYdTC9%2F3p7E39bk701YRRt89l9oWfIR8cOxQVmXhi7t%2BFaB6iwG5HlNfPppAyvwkIcROfuE5Qu3bao0aU7HYblp%2B5Jh78MUJkTOfgXJI6hgFDYnGqny8WFZFeg7uEUJKugt7cU1%2BYfPPIKCXJJcJ3Cd4XMVyttHJOfAcy%2FdzZabWA8ASkFVvOAu%2FAKHyzLXAbNRiqetQFlcbDYdYfIWDXPCRojX7eBbPuMvDasPYLunMP03rD7FA6oLTG3L%2BISKKkwU%2FnSoz8n1PlyC5BMqYQURIdsSVRVKcYewoWOEyQQwsW8S0vMmjL6vKZs7PFjRTy8PGM%2B49lk6LhrGwrg3CLthkuhGbpXP6EqOwc7k5Oelz2tiwuYQlf4cYnNSzp9gRi86hRTIQuDoZMBVZcDklubkMmArMvAZ5ISRiD53FqZAEQCRFaaokAfReA6%2FgOfqtyyvKx1DHfpp9FdgNPng9mWN5SwjY5ATgp4vdsiBzqZwSU3AqjoRs11LYLZpOHNX4bdpaXTedEdit6Ow%2B6FeprDaY4QH8VdH1Q5DTI1mevSjsxOqLNyRf6ostEw9BccCiWO2qfCLey4Cu8ay0KapUc81LAmNsHKCJ%2Fx%2F0dFXiYkVVYwu9wqAZ%2BxwSTsQfuQIZhV9avdm5hLyhnWFyoZjOsb0WGfMdpitv5ADImWnYYdjcYVpGOKr%2FDAdjf5YY5lLU2cvW4YQVuzQJEJwPKVu0BpleM5ElFiEyH%2BBqnpp1ITQX%2BQZGxHEiosq0RHflc3cO2b8Rr6rsFiDap9roDKmAElYwUfxQXREbi79RMSr4wRZztxzfMNdLCzbtQJrIbpEwWLOTjim6XuO54g3YD%2BvGVNiZPuQR%2FBW9YduNyD6XpKIIYQJ5qHMW8KUh%2BZwy9l329abo7kPnmH1J7kcqwI7%2BtoMRr7fPXcPXvhBhinBLnIWC97wtXt2eyE9Eq78BAqIiUnUnTaeUABN55wCeF0U4UunQ2PteuVzYZiCQF6ZUjAl9betnf3xF%2FYEJxVTbtt0YpqHZTmJkG4Fzj1E3KaQLOZzn9y2eZbo2puBPch6KQP5thQoWtJA7BeOZwZVHxEbhBUq0hn5iSyGXxY8fO%2B6H%2FK5qJFLeUbcoHRZl%2FuD%2BxP4EL4teRBaH9zW%2BBCL0XwIVyGwqrNZfE1wK%2BJ5JVipYdSncIK6bbVvfIXzBuobkyeVQR36uxry87ZjXQ5RmexA4upQrfSkcRxpnJGVkotIR2b%2BKLDuqDp31fqhRl0k%2BvPLkAgA9mqwU8Mi%2FF29wHMONcHFGX0f%2Fr0j4wN8n8k0w3EHqkaf7TpS5hcy1OgMm4pOJaz2QmPgDkSTLRFNxg54JF6whXcV0PkOlnlCHb8IxUSCywzmOSA3rpB2EoNZlNS0K8y2%2BvP53fXdh3fzNB6KXJ9BJQSI%2BxbzEdLI83fwJKItXkd9roy5YbiiDrnWbi3CByOGAfbgONTaObuTH8YxmiOVxl%2BISuMa5iClOTTItd3FPOh8FoPmkUMjGceQ7tpQSRuZbK%2Fmw6PVqgSj2AZPtQ3%2FrgHlKZ1nSJDNZ57XMeEMSTqZ1mn1p02C7tWfY4OdozxdX%2FVaOLMpi0nImoGwgNn6Av0MfxQ%2F46LFxTemFJdARTamlAYRcTOPNgL%2BVEwdB8z1HRH8cv1hIdGhU5lpBOLM7FnnQNnUzIuQHJc9SJ4rl9vvwipchqUmidpkQ6OXBGJ5LfajIUsm2O%2BXbUObRv9YV3gUMDsZbGIaTk%2Fg3IVNdOUKwVjWQVOjEqxWthfE3nJpWfOcTCI9RI5RVKf0px9M5JMQUw7IXC0KpctkeWOlFq3g9ZJTglotXy2jOC8xbXXmejXElOHmxWJqYqpe41td0sh1SUYgZdptHv5OWJqk5tq%2FYhHALaI46KPF1177YPsiPzSlKKYONx%2Bt9MHW1oiGKSEBdXpgum4bsmVJSVNEsy5ox%2F0jTLJspoMBCdeuGroTHLAlPfnlxDpelcw8kpMZKlJsBxg%2BKOKHpBiV3k6CBjdVRUqGrwkprHtI5Ig52vPnl3%2FmEbYN5ESL9rHn5GjfxM%2FenVEu9Rm7DvB%2BlHffKNKvY9Nop7Mga2FSCfeCOiPRd3FHg3gXx%2BrvvlXCnb31KLFqmXaCunvK6rwT2Rsea7cwpcbeLM6ZJnV8hXKvOPg%2FNaTDUzr7yx160q%2FngXQcdQ7%2FBWC9DKv%2BmVvk4R6f%2BEDaH1dLIMXEbYnHvnJebzQd8d50ZJ%2FoD9ER90gd6cnD2phCvJjRN9xAtLByKcLIJQTOYkpZufSMymBZsSeFyB21OOuhQsX%2FgTG1AnPo6ojxzGkwqTk9QEU6BZdBEMzEDBRdMnNwle8kWje0UoZhQpNpnVqxx7UO3yCMwyp8vYpnT%2B7F8FUJHfL%2Bp2wWVLC1FSxBTGNaEfvJC%2FQXWfArUx%2BxhMhtux6YS3gHfsP%2F7slT3qyLMIZgey5DJJWi4njtBX04ngDd7cUg9WiSAjpJYtKVBnrc%2FGhyy7DM2a9dwWfyHAp8GD6VzrwATC9%2Fi8jzEFiMfRN71WWDCxwPMUtwfaBGlt5ZxU1d53EHElDxisjLmQOsgZNAWxF8uSUI3tB4dVr%2FylOzYq1skHLsixGNH5MM%2BzVLxtHVssdJhopktJIhVa6pKx467NR5AqKMnNMZMB1X8gYMTZ5f5w2Mhvt5aoij0FOe15Z5ms0r7M4W30osRwRezTvuLb4rzEvQ8Xi7CpZIE3TBfuSQlKC0aFzrdQzi0kHFe%2BIwHUbplrHwtiOxjHbVSruYXRxhvIpR01T5f6Egl65q%2BoSVYTvt0n47OxThMI1jg60fqvPyTREfc85Q5WXyjPblg2Jj1pueuDKRFwIOkLRpy5PVqp0HkJFpPEMVXGEykRmBFCmrdX0rVMwOqWJ%2BPR6A6wRDgbjRfAC%2Bz8ObD9BXkf1z%2BQC%2B6nz3aCpd4JUhghSJBQB5vUxgNGsXd6EnUvvxivXU96b21P03T12Qz59dS9t68NfpqV%2BAh7XT%2BO33u4Z6%2BMGkNSH%2B276D09f3uo7q4525vtfvXya%2BMQXW95QP%2BrodR%2F9kH9Vj31sbSUd%2Fan56p%2F5RucV7VACyGQqeqWryN6Ysx0NCuoY2JdYVk4TsRlvi2QVUtGg5jGEOSxg1YUICm14lBQ5j4pMAWJcpIocVSHM6JswiGMO4pha%2BJv9hSWapR7qgnd6bJiLDdRaS2yTw7zqc7ykQxc2Exj3r2NUKRVHmmwRZV9x5zozVQuMGdyZXRlt9iVCEZXuVUAXZwDgG2Q85Wv6JVIU7MXy1mTlwpc5ohdeLvfaSJUFVZ%2Fa118Ar%2B%2F%2B5%2FsDNe8ZjRv9OyW9G681oXYrR0szuWqMlBwen05O3yf1NTy5fT7ypJ%2FdgANK5bzO4oQQ8NBYfELAOTgkM3S2O7YejMvA8u8VJpXGBKY0wdA8gaceChSeNc%2FDWCKeHajjnLj7xNUECKxgMpPh6aT3TfilD8FcZrIjpZwhYsZ0aulv9ixvDh8sSJXUFrovooRM0tEfWee276Uka7PsqSG7xIi%2FBgHhjMUmtHf6KanL38JFM7WRaF3ITc9W7Ibsx3mJ%2FA8a0KjYNvzM%2Fg7okeQEf2XIq4lPot4PsVtHCZqOvg%2BppBdCqectOJ4zsTkaiWPku%2BdfnZMjw1zrKrXlel5tv3bzOtxIUj5Bo7E1OUwY7kwF92GCKvQ9qxaRUgBzQtv0aB%2Bc97UZdnr7XUPxQuucgZLYRZ0OTmeXbJQipBOsk06EYfLcbpI%2BfSQjUKPuTLn%2BnyOlb3fcF1X0Hwf6M5VkrvwM1KG0WGizJO8KYfdQaRBVbe5O0C5I0ee%2FOQGcozypqTRGdIGtfihpPwzGdzNMUVhUtQLhnC6LJiIQib5J2yZJmmbZYpei51vSiNukq8AuP5Zoaw7PUvR7Jxv7Uwm5Ys7Nttq1DTUkMgPkdxlFYEu%2FuEZKgI0IJRRupi02ONyE2MD07xmuqrWZNsVXVWrWoY9UMsukhacROIjF4H%2B%2Feffzj93efH2Z8kVUfhKuAmnvxywFJrYEu%2F4AqAUlSeyW619iI0dOshRb3xgaNnvfaJmNOAmDBOp1ma2x8ZykPZ3m84QxVRZZa%2FHfsdvJMtD6HsKR7vpdlLe39fjH7veut7IQLA6czz5335U5innVi%2BJOjbdJbUVxPt4eDrfOGRsPbTENFRbX7BRqshL%2BBE2hWEVuCmVrLrwHkOmAcJhZ4Yt2bofZia%2FJodBoFWVnTXB%2FF5%2FAkUcGsBm1Jc5jn%2BLG4kao2QB1eXzX3htydB7nrXcvyk0F3pub9YT%2B9nZS33OBLGqezkpqXkA22khtq4ZYAMH8pRY%2FU0w%2F1K6X6LeGbsZrMWPW9lO2nM1a6MiXZWDXSA9OQOLw3mjp0Efbai5YNCDPpza45BqYFxJrnuRP3tI3izKAV5Cv6WoFmT1u2RdE9rSzHf2t4BcoSZEQb7wkT7795Lm40rQXdZHXCEh3TkHckMLXrEX1VGsd7DbfmbRCnCUF%2FYXVelDvY8YwwV0JKDWZ2VWuas1dxMoeTv1%2Fz4qLVE%2BxVcoGhKkdqfviVl%2BMuoFfSbbtfXux6ix3dR1pvr3l58WkU6eH2Az73%2BQDwpn3%2FAlY%2BspsbM%2B57Nmqb0CzKPuTA97H8wOpPfFggQt0t64nb9AHFgPT4Hw%3D%3D) for editable draw.io diagram\n\n## Solutions\n\n### Register your InnerSource project\n\nIn your InnerSource portal allow registering your project as an InnerSource project. This is a super simple an intuitive webform that only requires you to enter your repos url.\n\nOnce the url is entered some basic checks will be carried out against your repo based on some very basic standards required for entry into the InnerSource portal. These checks include:\n\n- Access to the repo\n- Description for repo is set\n- Topic labels exists\n- Code owners file exists and populated\n- Readme file exists\n- Pull request template file exists\n- Issue template file exists\n- Contributing guidelines file exists\n\nOnce all checks have passed the InnerSource portal will generate your very own InnerSource badge, which is basically am image with a random filename. Note this badge is specific to the repo that was being registered. In the background the repo name, badge filename and badge expiry date is stored.\n\nThe last step is for users update there repos `README.md` file to include the badge. This will then allow the InnerSource portal to discover the project and will automatically include it in the portal.\n\n### InnerSource portal batch jobs\n\n- Remove expired badges.  \nQuery InnerSource projects which have an expired badge. Delete badge file causing the badge to not appear in the repos rendered README anymore.\n- Notify projects approaching expiry.  \nQuery InnerSource projects which have a badge close to expiration. Send a notification to the InnerSource projects code owners, publish an issue to the repo, publish a message in the InnerSource channel on Teams. This should be ample warning to go update the badge.\n- Bonus: Notify owners of public repos not registered as InnerSource projects yet to either make their repos private or to consider registering their repo as an innerSource project. This isn't entirely related to hygiene of the InnerSource portal rather general hygiene of all repos in your organisations SCM system. Also servers as excellent marketing and awareness generation for your organisations InnerSource initiative.\n\n## Resulting Context\n\nThe automatically managed InnerSource portal and badge system has ensured that the InnerSource portal only displays active projects and as result contains less clutter, thus increasing the credibility of the portal and InnerSource project initiative itself. The badges in the repos itself allow people to quickly distinguish an InnerSource project from a standard public repo.\n\n## Author(s)\n\n- Dinesh Dharmawardena\n\n## Status\n\n* Initial\n* Based of PR [#120](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/120) we decided to merge this pattern in a relatively early state, as the upstream had disappeared and we didn't want to loose the content. See further discussions in the PR itself.\n",
    "title": "InnerSource Portal - Hygiene",
    "patlet": "Based off the [InnerSource portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md) pattern.\n\nAllow generation of an official badge for projects intending to be recognised as InnerSource project within your company.\n\nThis will help users distinguishing InnerSource projects which strive to adhere to InnerSourcing principals from repos that - have been made public by mistake, due to negligence or for ease of discoverability (but do NOT adhere to InnerSource patterns/best practices). Furthermore the badge serves as additional marketing for the InnerSource initiative at your company.",
    "problem": "- Users don't have a mechanism of distinguishing InnerSource projects which strive to adhere to InnerSourcing principals from repos that have been made public by mistake, due to negligence or for ease of discoverability (but do NOT adhere to InnerSource patterns/best practices).\n- Unmaintained or stale InnerSource projects clutter the portal and make it difficult for people to discover active projects, and diminishes the value on the InnerSource portal",
    "context": "Large organisation with lots of public repos, not all necessarily meeting the desired innerSource project standard.",
    "forces": "- Mix of managed and unmanaged projects makes it difficult to figure out what needs to be in the InnerSource portal\n- Repos are made public when they really shouldn't be\n- Repos become stale and never get cleaned up",
    "sketch": "- Click [here](https://www.draw.io/?lightbox=1&highlight=0000ff&edit=_blank&layers=1&nav=1&title=Untitled%20Diagram.drawio#R7V1Zl5s4Fv41fiwfdsxjLanunpN0MqnMdOcpB4NsqwOIZqmlf%2F1oQRgt2Dg2xjUp55yUEULgu%2Bne716JmX2bPv9ShPnmA4pBMrOM%2BHlm380sy%2FR8G%2F8hLS%2BsxTIck7WsCxg3vbYND%2FAf0DQaTWsNY1AKHSuEkgrmYmOEsgxEldAWFgV6ErutUCLeNQ%2FXQGl4iMJEbf0DxtWGtS5cY9v%2BK4DrDb%2BzaTRn0pB3bhrKTRijp06T%2FW5m3xYIVexb%2BnwLEkI9Thd23X3P2fbBCpBVQy64WWYf%2FduH%2BvG%2F%2Fv3HX%2B9v%2Fp18ubsyLZ%2BN8xgmdfOTZ5aX4BFvVggPjJ%2B7emmI4f1dI37iqqSsusYdTC9%2F3p7E39bk701YRRt89l9oWfIR8cOxQVmXhi7t%2BFaB6iwG5HlNfPppAyvwkIcROfuE5Qu3bao0aU7HYblp%2B5Jh78MUJkTOfgXJI6hgFDYnGqny8WFZFeg7uEUJKugt7cU1%2BYfPPIKCXJJcJ3Cd4XMVyttHJOfAcy%2FdzZabWA8ASkFVvOAu%2FAKHyzLXAbNRiqetQFlcbDYdYfIWDXPCRojX7eBbPuMvDasPYLunMP03rD7FA6oLTG3L%2BISKKkwU%2FnSoz8n1PlyC5BMqYQURIdsSVRVKcYewoWOEyQQwsW8S0vMmjL6vKZs7PFjRTy8PGM%2B49lk6LhrGwrg3CLthkuhGbpXP6EqOwc7k5Oelz2tiwuYQlf4cYnNSzp9gRi86hRTIQuDoZMBVZcDklubkMmArMvAZ5ISRiD53FqZAEQCRFaaokAfReA6%2FgOfqtyyvKx1DHfpp9FdgNPng9mWN5SwjY5ATgp4vdsiBzqZwSU3AqjoRs11LYLZpOHNX4bdpaXTedEdit6Ow%2B6FeprDaY4QH8VdH1Q5DTI1mevSjsxOqLNyRf6ostEw9BccCiWO2qfCLey4Cu8ay0KapUc81LAmNsHKCJ%2Fx%2F0dFXiYkVVYwu9wqAZ%2BxwSTsQfuQIZhV9avdm5hLyhnWFyoZjOsb0WGfMdpitv5ADImWnYYdjcYVpGOKr%2FDAdjf5YY5lLU2cvW4YQVuzQJEJwPKVu0BpleM5ElFiEyH%2BBqnpp1ITQX%2BQZGxHEiosq0RHflc3cO2b8Rr6rsFiDap9roDKmAElYwUfxQXREbi79RMSr4wRZztxzfMNdLCzbtQJrIbpEwWLOTjim6XuO54g3YD%2BvGVNiZPuQR%2FBW9YduNyD6XpKIIYQJ5qHMW8KUh%2BZwy9l329abo7kPnmH1J7kcqwI7%2BtoMRr7fPXcPXvhBhinBLnIWC97wtXt2eyE9Eq78BAqIiUnUnTaeUABN55wCeF0U4UunQ2PteuVzYZiCQF6ZUjAl9betnf3xF%2FYEJxVTbtt0YpqHZTmJkG4Fzj1E3KaQLOZzn9y2eZbo2puBPch6KQP5thQoWtJA7BeOZwZVHxEbhBUq0hn5iSyGXxY8fO%2B6H%2FK5qJFLeUbcoHRZl%2FuD%2BxP4EL4teRBaH9zW%2BBCL0XwIVyGwqrNZfE1wK%2BJ5JVipYdSncIK6bbVvfIXzBuobkyeVQR36uxry87ZjXQ5RmexA4upQrfSkcRxpnJGVkotIR2b%2BKLDuqDp31fqhRl0k%2BvPLkAgA9mqwU8Mi%2FF29wHMONcHFGX0f%2Fr0j4wN8n8k0w3EHqkaf7TpS5hcy1OgMm4pOJaz2QmPgDkSTLRFNxg54JF6whXcV0PkOlnlCHb8IxUSCywzmOSA3rpB2EoNZlNS0K8y2%2BvP53fXdh3fzNB6KXJ9BJQSI%2BxbzEdLI83fwJKItXkd9roy5YbiiDrnWbi3CByOGAfbgONTaObuTH8YxmiOVxl%2BISuMa5iClOTTItd3FPOh8FoPmkUMjGceQ7tpQSRuZbK%2Fmw6PVqgSj2AZPtQ3%2FrgHlKZ1nSJDNZ57XMeEMSTqZ1mn1p02C7tWfY4OdozxdX%2FVaOLMpi0nImoGwgNn6Av0MfxQ%2F46LFxTemFJdARTamlAYRcTOPNgL%2BVEwdB8z1HRH8cv1hIdGhU5lpBOLM7FnnQNnUzIuQHJc9SJ4rl9vvwipchqUmidpkQ6OXBGJ5LfajIUsm2O%2BXbUObRv9YV3gUMDsZbGIaTk%2Fg3IVNdOUKwVjWQVOjEqxWthfE3nJpWfOcTCI9RI5RVKf0px9M5JMQUw7IXC0KpctkeWOlFq3g9ZJTglotXy2jOC8xbXXmejXElOHmxWJqYqpe41td0sh1SUYgZdptHv5OWJqk5tq%2FYhHALaI46KPF1177YPsiPzSlKKYONx%2Bt9MHW1oiGKSEBdXpgum4bsmVJSVNEsy5ox%2F0jTLJspoMBCdeuGroTHLAlPfnlxDpelcw8kpMZKlJsBxg%2BKOKHpBiV3k6CBjdVRUqGrwkprHtI5Ig52vPnl3%2FmEbYN5ESL9rHn5GjfxM%2FenVEu9Rm7DvB%2BlHffKNKvY9Nop7Mga2FSCfeCOiPRd3FHg3gXx%2BrvvlXCnb31KLFqmXaCunvK6rwT2Rsea7cwpcbeLM6ZJnV8hXKvOPg%2FNaTDUzr7yx160q%2FngXQcdQ7%2FBWC9DKv%2BmVvk4R6f%2BEDaH1dLIMXEbYnHvnJebzQd8d50ZJ%2FoD9ER90gd6cnD2phCvJjRN9xAtLByKcLIJQTOYkpZufSMymBZsSeFyB21OOuhQsX%2FgTG1AnPo6ojxzGkwqTk9QEU6BZdBEMzEDBRdMnNwle8kWje0UoZhQpNpnVqxx7UO3yCMwyp8vYpnT%2B7F8FUJHfL%2Bp2wWVLC1FSxBTGNaEfvJC%2FQXWfArUx%2BxhMhtux6YS3gHfsP%2F7slT3qyLMIZgey5DJJWi4njtBX04ngDd7cUg9WiSAjpJYtKVBnrc%2FGhyy7DM2a9dwWfyHAp8GD6VzrwATC9%2Fi8jzEFiMfRN71WWDCxwPMUtwfaBGlt5ZxU1d53EHElDxisjLmQOsgZNAWxF8uSUI3tB4dVr%2FylOzYq1skHLsixGNH5MM%2BzVLxtHVssdJhopktJIhVa6pKx467NR5AqKMnNMZMB1X8gYMTZ5f5w2Mhvt5aoij0FOe15Z5ms0r7M4W30osRwRezTvuLb4rzEvQ8Xi7CpZIE3TBfuSQlKC0aFzrdQzi0kHFe%2BIwHUbplrHwtiOxjHbVSruYXRxhvIpR01T5f6Egl65q%2BoSVYTvt0n47OxThMI1jg60fqvPyTREfc85Q5WXyjPblg2Jj1pueuDKRFwIOkLRpy5PVqp0HkJFpPEMVXGEykRmBFCmrdX0rVMwOqWJ%2BPR6A6wRDgbjRfAC%2Bz8ObD9BXkf1z%2BQC%2B6nz3aCpd4JUhghSJBQB5vUxgNGsXd6EnUvvxivXU96b21P03T12Qz59dS9t68NfpqV%2BAh7XT%2BO33u4Z6%2BMGkNSH%2B276D09f3uo7q4525vtfvXya%2BMQXW95QP%2BrodR%2F9kH9Vj31sbSUd%2Fan56p%2F5RucV7VACyGQqeqWryN6Ysx0NCuoY2JdYVk4TsRlvi2QVUtGg5jGEOSxg1YUICm14lBQ5j4pMAWJcpIocVSHM6JswiGMO4pha%2BJv9hSWapR7qgnd6bJiLDdRaS2yTw7zqc7ykQxc2Exj3r2NUKRVHmmwRZV9x5zozVQuMGdyZXRlt9iVCEZXuVUAXZwDgG2Q85Wv6JVIU7MXy1mTlwpc5ohdeLvfaSJUFVZ%2Fa118Ar%2B%2F%2B5%2FsDNe8ZjRv9OyW9G681oXYrR0szuWqMlBwen05O3yf1NTy5fT7ypJ%2FdgANK5bzO4oQQ8NBYfELAOTgkM3S2O7YejMvA8u8VJpXGBKY0wdA8gaceChSeNc%2FDWCKeHajjnLj7xNUECKxgMpPh6aT3TfilD8FcZrIjpZwhYsZ0aulv9ixvDh8sSJXUFrovooRM0tEfWee276Uka7PsqSG7xIi%2FBgHhjMUmtHf6KanL38JFM7WRaF3ITc9W7Ibsx3mJ%2FA8a0KjYNvzM%2Fg7okeQEf2XIq4lPot4PsVtHCZqOvg%2BppBdCqectOJ4zsTkaiWPku%2BdfnZMjw1zrKrXlel5tv3bzOtxIUj5Bo7E1OUwY7kwF92GCKvQ9qxaRUgBzQtv0aB%2Bc97UZdnr7XUPxQuucgZLYRZ0OTmeXbJQipBOsk06EYfLcbpI%2BfSQjUKPuTLn%2BnyOlb3fcF1X0Hwf6M5VkrvwM1KG0WGizJO8KYfdQaRBVbe5O0C5I0ee%2FOQGcozypqTRGdIGtfihpPwzGdzNMUVhUtQLhnC6LJiIQib5J2yZJmmbZYpei51vSiNukq8AuP5Zoaw7PUvR7Jxv7Uwm5Ys7Nttq1DTUkMgPkdxlFYEu%2FuEZKgI0IJRRupi02ONyE2MD07xmuqrWZNsVXVWrWoY9UMsukhacROIjF4H%2B%2Feffzj93efH2Z8kVUfhKuAmnvxywFJrYEu%2F4AqAUlSeyW619iI0dOshRb3xgaNnvfaJmNOAmDBOp1ma2x8ZykPZ3m84QxVRZZa%2FHfsdvJMtD6HsKR7vpdlLe39fjH7veut7IQLA6czz5335U5innVi%2BJOjbdJbUVxPt4eDrfOGRsPbTENFRbX7BRqshL%2BBE2hWEVuCmVrLrwHkOmAcJhZ4Yt2bofZia%2FJodBoFWVnTXB%2FF5%2FAkUcGsBm1Jc5jn%2BLG4kao2QB1eXzX3htydB7nrXcvyk0F3pub9YT%2B9nZS33OBLGqezkpqXkA22khtq4ZYAMH8pRY%2FU0w%2F1K6X6LeGbsZrMWPW9lO2nM1a6MiXZWDXSA9OQOLw3mjp0Efbai5YNCDPpza45BqYFxJrnuRP3tI3izKAV5Cv6WoFmT1u2RdE9rSzHf2t4BcoSZEQb7wkT7795Lm40rQXdZHXCEh3TkHckMLXrEX1VGsd7DbfmbRCnCUF%2FYXVelDvY8YwwV0JKDWZ2VWuas1dxMoeTv1%2Fz4qLVE%2BxVcoGhKkdqfviVl%2BMuoFfSbbtfXux6ix3dR1pvr3l58WkU6eH2Az73%2BQDwpn3%2FAlY%2BspsbM%2B57Nmqb0CzKPuTA97H8wOpPfFggQt0t64nb9AHFgPT4Hw%3D%3D) for draw.io diagram\n- Click [here](https://www.draw.io/?title=Untitled%20Diagram.drawio#R7V1Zl5s4Fv41fiwfdsxjLanunpN0MqnMdOcpB4NsqwOIZqmlf%2F1oQRgt2Dg2xjUp55yUEULgu%2Bne716JmX2bPv9ShPnmA4pBMrOM%2BHlm380sy%2FR8G%2F8hLS%2BsxTIck7WsCxg3vbYND%2FAf0DQaTWsNY1AKHSuEkgrmYmOEsgxEldAWFgV6ErutUCLeNQ%2FXQGl4iMJEbf0DxtWGtS5cY9v%2BK4DrDb%2BzaTRn0pB3bhrKTRijp06T%2FW5m3xYIVexb%2BnwLEkI9Thd23X3P2fbBCpBVQy64WWYf%2FduH%2BvG%2F%2Fv3HX%2B9v%2Fp18ubsyLZ%2BN8xgmdfOTZ5aX4BFvVggPjJ%2B7emmI4f1dI37iqqSsusYdTC9%2F3p7E39bk701YRRt89l9oWfIR8cOxQVmXhi7t%2BFaB6iwG5HlNfPppAyvwkIcROfuE5Qu3bao0aU7HYblp%2B5Jh78MUJkTOfgXJI6hgFDYnGqny8WFZFeg7uEUJKugt7cU1%2BYfPPIKCXJJcJ3Cd4XMVyttHJOfAcy%2FdzZabWA8ASkFVvOAu%2FAKHyzLXAbNRiqetQFlcbDYdYfIWDXPCRojX7eBbPuMvDasPYLunMP03rD7FA6oLTG3L%2BISKKkwU%2FnSoz8n1PlyC5BMqYQURIdsSVRVKcYewoWOEyQQwsW8S0vMmjL6vKZs7PFjRTy8PGM%2B49lk6LhrGwrg3CLthkuhGbpXP6EqOwc7k5Oelz2tiwuYQlf4cYnNSzp9gRi86hRTIQuDoZMBVZcDklubkMmArMvAZ5ISRiD53FqZAEQCRFaaokAfReA6%2FgOfqtyyvKx1DHfpp9FdgNPng9mWN5SwjY5ATgp4vdsiBzqZwSU3AqjoRs11LYLZpOHNX4bdpaXTedEdit6Ow%2B6FeprDaY4QH8VdH1Q5DTI1mevSjsxOqLNyRf6ostEw9BccCiWO2qfCLey4Cu8ay0KapUc81LAmNsHKCJ%2Fx%2F0dFXiYkVVYwu9wqAZ%2BxwSTsQfuQIZhV9avdm5hLyhnWFyoZjOsb0WGfMdpitv5ADImWnYYdjcYVpGOKr%2FDAdjf5YY5lLU2cvW4YQVuzQJEJwPKVu0BpleM5ElFiEyH%2BBqnpp1ITQX%2BQZGxHEiosq0RHflc3cO2b8Rr6rsFiDap9roDKmAElYwUfxQXREbi79RMSr4wRZztxzfMNdLCzbtQJrIbpEwWLOTjim6XuO54g3YD%2BvGVNiZPuQR%2FBW9YduNyD6XpKIIYQJ5qHMW8KUh%2BZwy9l329abo7kPnmH1J7kcqwI7%2BtoMRr7fPXcPXvhBhinBLnIWC97wtXt2eyE9Eq78BAqIiUnUnTaeUABN55wCeF0U4UunQ2PteuVzYZiCQF6ZUjAl9betnf3xF%2FYEJxVTbtt0YpqHZTmJkG4Fzj1E3KaQLOZzn9y2eZbo2puBPch6KQP5thQoWtJA7BeOZwZVHxEbhBUq0hn5iSyGXxY8fO%2B6H%2FK5qJFLeUbcoHRZl%2FuD%2BxP4EL4teRBaH9zW%2BBCL0XwIVyGwqrNZfE1wK%2BJ5JVipYdSncIK6bbVvfIXzBuobkyeVQR36uxry87ZjXQ5RmexA4upQrfSkcRxpnJGVkotIR2b%2BKLDuqDp31fqhRl0k%2BvPLkAgA9mqwU8Mi%2FF29wHMONcHFGX0f%2Fr0j4wN8n8k0w3EHqkaf7TpS5hcy1OgMm4pOJaz2QmPgDkSTLRFNxg54JF6whXcV0PkOlnlCHb8IxUSCywzmOSA3rpB2EoNZlNS0K8y2%2BvP53fXdh3fzNB6KXJ9BJQSI%2BxbzEdLI83fwJKItXkd9roy5YbiiDrnWbi3CByOGAfbgONTaObuTH8YxmiOVxl%2BISuMa5iClOTTItd3FPOh8FoPmkUMjGceQ7tpQSRuZbK%2Fmw6PVqgSj2AZPtQ3%2FrgHlKZ1nSJDNZ57XMeEMSTqZ1mn1p02C7tWfY4OdozxdX%2FVaOLMpi0nImoGwgNn6Av0MfxQ%2F46LFxTemFJdARTamlAYRcTOPNgL%2BVEwdB8z1HRH8cv1hIdGhU5lpBOLM7FnnQNnUzIuQHJc9SJ4rl9vvwipchqUmidpkQ6OXBGJ5LfajIUsm2O%2BXbUObRv9YV3gUMDsZbGIaTk%2Fg3IVNdOUKwVjWQVOjEqxWthfE3nJpWfOcTCI9RI5RVKf0px9M5JMQUw7IXC0KpctkeWOlFq3g9ZJTglotXy2jOC8xbXXmejXElOHmxWJqYqpe41td0sh1SUYgZdptHv5OWJqk5tq%2FYhHALaI46KPF1177YPsiPzSlKKYONx%2Bt9MHW1oiGKSEBdXpgum4bsmVJSVNEsy5ox%2F0jTLJspoMBCdeuGroTHLAlPfnlxDpelcw8kpMZKlJsBxg%2BKOKHpBiV3k6CBjdVRUqGrwkprHtI5Ig52vPnl3%2FmEbYN5ESL9rHn5GjfxM%2FenVEu9Rm7DvB%2BlHffKNKvY9Nop7Mga2FSCfeCOiPRd3FHg3gXx%2BrvvlXCnb31KLFqmXaCunvK6rwT2Rsea7cwpcbeLM6ZJnV8hXKvOPg%2FNaTDUzr7yx160q%2FngXQcdQ7%2FBWC9DKv%2BmVvk4R6f%2BEDaH1dLIMXEbYnHvnJebzQd8d50ZJ%2FoD9ER90gd6cnD2phCvJjRN9xAtLByKcLIJQTOYkpZufSMymBZsSeFyB21OOuhQsX%2FgTG1AnPo6ojxzGkwqTk9QEU6BZdBEMzEDBRdMnNwle8kWje0UoZhQpNpnVqxx7UO3yCMwyp8vYpnT%2B7F8FUJHfL%2Bp2wWVLC1FSxBTGNaEfvJC%2FQXWfArUx%2BxhMhtux6YS3gHfsP%2F7slT3qyLMIZgey5DJJWi4njtBX04ngDd7cUg9WiSAjpJYtKVBnrc%2FGhyy7DM2a9dwWfyHAp8GD6VzrwATC9%2Fi8jzEFiMfRN71WWDCxwPMUtwfaBGlt5ZxU1d53EHElDxisjLmQOsgZNAWxF8uSUI3tB4dVr%2FylOzYq1skHLsixGNH5MM%2BzVLxtHVssdJhopktJIhVa6pKx467NR5AqKMnNMZMB1X8gYMTZ5f5w2Mhvt5aoij0FOe15Z5ms0r7M4W30osRwRezTvuLb4rzEvQ8Xi7CpZIE3TBfuSQlKC0aFzrdQzi0kHFe%2BIwHUbplrHwtiOxjHbVSruYXRxhvIpR01T5f6Egl65q%2BoSVYTvt0n47OxThMI1jg60fqvPyTREfc85Q5WXyjPblg2Jj1pueuDKRFwIOkLRpy5PVqp0HkJFpPEMVXGEykRmBFCmrdX0rVMwOqWJ%2BPR6A6wRDgbjRfAC%2Bz8ObD9BXkf1z%2BQC%2B6nz3aCpd4JUhghSJBQB5vUxgNGsXd6EnUvvxivXU96b21P03T12Qz59dS9t68NfpqV%2BAh7XT%2BO33u4Z6%2BMGkNSH%2B276D09f3uo7q4525vtfvXya%2BMQXW95QP%2BrodR%2F9kH9Vj31sbSUd%2Fan56p%2F5RucV7VACyGQqeqWryN6Ysx0NCuoY2JdYVk4TsRlvi2QVUtGg5jGEOSxg1YUICm14lBQ5j4pMAWJcpIocVSHM6JswiGMO4pha%2BJv9hSWapR7qgnd6bJiLDdRaS2yTw7zqc7ykQxc2Exj3r2NUKRVHmmwRZV9x5zozVQuMGdyZXRlt9iVCEZXuVUAXZwDgG2Q85Wv6JVIU7MXy1mTlwpc5ohdeLvfaSJUFVZ%2Fa118Ar%2B%2F%2B5%2FsDNe8ZjRv9OyW9G681oXYrR0szuWqMlBwen05O3yf1NTy5fT7ypJ%2FdgANK5bzO4oQQ8NBYfELAOTgkM3S2O7YejMvA8u8VJpXGBKY0wdA8gaceChSeNc%2FDWCKeHajjnLj7xNUECKxgMpPh6aT3TfilD8FcZrIjpZwhYsZ0aulv9ixvDh8sSJXUFrovooRM0tEfWee276Uka7PsqSG7xIi%2FBgHhjMUmtHf6KanL38JFM7WRaF3ITc9W7Ibsx3mJ%2FA8a0KjYNvzM%2Fg7okeQEf2XIq4lPot4PsVtHCZqOvg%2BppBdCqectOJ4zsTkaiWPku%2BdfnZMjw1zrKrXlel5tv3bzOtxIUj5Bo7E1OUwY7kwF92GCKvQ9qxaRUgBzQtv0aB%2Bc97UZdnr7XUPxQuucgZLYRZ0OTmeXbJQipBOsk06EYfLcbpI%2BfSQjUKPuTLn%2BnyOlb3fcF1X0Hwf6M5VkrvwM1KG0WGizJO8KYfdQaRBVbe5O0C5I0ee%2FOQGcozypqTRGdIGtfihpPwzGdzNMUVhUtQLhnC6LJiIQib5J2yZJmmbZYpei51vSiNukq8AuP5Zoaw7PUvR7Jxv7Uwm5Ys7Nttq1DTUkMgPkdxlFYEu%2FuEZKgI0IJRRupi02ONyE2MD07xmuqrWZNsVXVWrWoY9UMsukhacROIjF4H%2B%2Feffzj93efH2Z8kVUfhKuAmnvxywFJrYEu%2F4AqAUlSeyW619iI0dOshRb3xgaNnvfaJmNOAmDBOp1ma2x8ZykPZ3m84QxVRZZa%2FHfsdvJMtD6HsKR7vpdlLe39fjH7veut7IQLA6czz5335U5innVi%2BJOjbdJbUVxPt4eDrfOGRsPbTENFRbX7BRqshL%2BBE2hWEVuCmVrLrwHkOmAcJhZ4Yt2bofZia%2FJodBoFWVnTXB%2FF5%2FAkUcGsBm1Jc5jn%2BLG4kao2QB1eXzX3htydB7nrXcvyk0F3pub9YT%2B9nZS33OBLGqezkpqXkA22khtq4ZYAMH8pRY%2FU0w%2F1K6X6LeGbsZrMWPW9lO2nM1a6MiXZWDXSA9OQOLw3mjp0Efbai5YNCDPpza45BqYFxJrnuRP3tI3izKAV5Cv6WoFmT1u2RdE9rSzHf2t4BcoSZEQb7wkT7795Lm40rQXdZHXCEh3TkHckMLXrEX1VGsd7DbfmbRCnCUF%2FYXVelDvY8YwwV0JKDWZ2VWuas1dxMoeTv1%2Fz4qLVE%2BxVcoGhKkdqfviVl%2BMuoFfSbbtfXux6ix3dR1pvr3l58WkU6eH2Az73%2BQDwpn3%2FAlY%2BspsbM%2B57Nmqb0CzKPuTA97H8wOpPfFggQt0t64nb9AHFgPT4Hw%3D%3D) for editable draw.io diagram",
    "solutions": "",
    "resulting_context": "The automatically managed InnerSource portal and badge system has ensured that the InnerSource portal only displays active projects and as result contains less clutter, thus increasing the credibility of the portal and InnerSource project initiative itself. The badges in the repos itself allow people to quickly distinguish an InnerSource project from a standard public repo.",
    "author(s)": "- Dinesh Dharmawardena",
    "status": "* Initial\n* Based of PR [#120](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/120) we decided to merge this pattern in a relatively early state, as the upstream had disappeared and we didn't want to loose the content. See further discussions in the PR itself.",
    "slug": "innersource-portal-hygiene"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/innersource-guidance-group.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nInnerSource Guidance Group\n\n## Patlet\n\nA highly divergent set of development standards in different teams can slow down collaboration betweens these teams. A InnerSource Guidance Group that establishes broad governance and behavioral guidelines can help to reduce these frictions.\n\n## Problem\n\nWithout a set of organizational standards, [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md), and individual teams, are free to set their own standards, which is a step in the right direction.  \n\nHowever, team standards could be highly variant and further diverge over time as they evolve and adapt to new needs and forces.  This can lead to confusion and frustration as contributors submit code across team and functional boundaries.\n\nThe business is interested in establishing a set of agreed-upon standard operating procedures that guide teams, while still providing sufficient autonomy to meet the parochial needs of individual teams.\n\n## Context\n\nA company is planning to introduce InnerSource as a strategic initiative. They are faced with reforming and steering the behavior of developers and engineers toward a common goal.  In general functional groups and teams within the company adhere to a broad spectrum of standards regarding tools, development languages, collaboration models, engagement models, documentation models, etc.\n\nThe company recognizes the value of the Trusted Committer role as a situational leader for a team that sets and enforces team standards, code contribution standards, contribution agreements, PR management, etc. however the company is interested in establishing organizational guidelines as well that steer and focus Trusted Committers and the teams they represent.\n\nAs an example, the breadth of languages used within an engineering and operations organization could include, powershell, bash shell, perl, tcl, python, golang, java, shell augmented with sed and awk and jq, etc. and the organization wants to standardize as much as possible on a subset of these languages so that the ability to collaborate between teams is maximized.\n\n## Forces\n\n- Separate engineering and development teams establish development standards that may be highly divergent from other teams. (Effect: This limits the ability to collaborate.)\n- People move between teams, and responsibility for specific initiatives change over time. (Effect: The ability of the organization to adapt to variant team norms results in decreased development velocity.)\n\n## Solutions\n\nRecognize that Trusted Committers are both **situational leaders** and **subject matter experts** representing their team. Establish an InnerSource Guidance Group as a “committee” attended and chaired by Trusted Committers. Charter this InnerSource Guidance Group with establishing company and/or organizational guidelines.\n\n- The “committee” is scheduled periodically as necessary by the Trusted Committers – twice a week, once a month, quarterly, etc.\n- The goal is to establish general direction, or a highway, while leaving freedom for individual teams to adapt to local needs, or side streets\n- Trusted Committers establish organization guidelines that become templates for [Contribution Agreements](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md)\n- Trusted Committers collaborate on and refine guidelines asynchronously via passive documentation and the establishment of organizational patterns.\n    - This guideline definition project itself can be run as an InnerSource project, accepting contributions from anywhere in the organization.\n    - By running this as a collaborative documentation project, it can role-model and verify the behaviors that they want to promote for other InnerSource projects as well.\n- The InnerSource Guidance Group is responsible for communicating general guidelines to upper management\n- This also ensures that teams and functional groups have a recurring touchpoint with other team and functional groups – establishing trust and insight into the overall organizational needs and requirements\n\n## Resulting Context\n\nTBD\n\n## Known Instances\n\n- A large, highly regulated, financial organization is planning to implement a Trusted Committer Steering Group to provide broad guidelines and guard rails as part of their InnerSource initiative.\n\n## Rationale\n\nEmpowering Trusted Committers as representatives on behalf of their teams propagates ownership of the overall InnerSource strategy as it deploys and evolves in an organization and ensures that a baseline level of governance and standardization occurs.\n\n## Author(s)\n\n- Tim Tyler <ttyler01@gmail.com>\n\n## Acknowledgements\n\n- Tim Yao\n",
    "title": "InnerSource Guidance Group",
    "patlet": "A highly divergent set of development standards in different teams can slow down collaboration betweens these teams. A InnerSource Guidance Group that establishes broad governance and behavioral guidelines can help to reduce these frictions.",
    "problem": "Without a set of organizational standards, [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md), and individual teams, are free to set their own standards, which is a step in the right direction.  \n\nHowever, team standards could be highly variant and further diverge over time as they evolve and adapt to new needs and forces.  This can lead to confusion and frustration as contributors submit code across team and functional boundaries.\n\nThe business is interested in establishing a set of agreed-upon standard operating procedures that guide teams, while still providing sufficient autonomy to meet the parochial needs of individual teams.",
    "context": "A company is planning to introduce InnerSource as a strategic initiative. They are faced with reforming and steering the behavior of developers and engineers toward a common goal.  In general functional groups and teams within the company adhere to a broad spectrum of standards regarding tools, development languages, collaboration models, engagement models, documentation models, etc.\n\nThe company recognizes the value of the Trusted Committer role as a situational leader for a team that sets and enforces team standards, code contribution standards, contribution agreements, PR management, etc. however the company is interested in establishing organizational guidelines as well that steer and focus Trusted Committers and the teams they represent.\n\nAs an example, the breadth of languages used within an engineering and operations organization could include, powershell, bash shell, perl, tcl, python, golang, java, shell augmented with sed and awk and jq, etc. and the organization wants to standardize as much as possible on a subset of these languages so that the ability to collaborate between teams is maximized.",
    "forces": "- Separate engineering and development teams establish development standards that may be highly divergent from other teams. (Effect: This limits the ability to collaborate.)\n- People move between teams, and responsibility for specific initiatives change over time. (Effect: The ability of the organization to adapt to variant team norms results in decreased development velocity.)",
    "solutions": "Recognize that Trusted Committers are both **situational leaders** and **subject matter experts** representing their team. Establish an InnerSource Guidance Group as a “committee” attended and chaired by Trusted Committers. Charter this InnerSource Guidance Group with establishing company and/or organizational guidelines.\n\n- The “committee” is scheduled periodically as necessary by the Trusted Committers – twice a week, once a month, quarterly, etc.\n- The goal is to establish general direction, or a highway, while leaving freedom for individual teams to adapt to local needs, or side streets\n- Trusted Committers establish organization guidelines that become templates for [Contribution Agreements](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md)\n- Trusted Committers collaborate on and refine guidelines asynchronously via passive documentation and the establishment of organizational patterns.\n    - This guideline definition project itself can be run as an InnerSource project, accepting contributions from anywhere in the organization.\n    - By running this as a collaborative documentation project, it can role-model and verify the behaviors that they want to promote for other InnerSource projects as well.\n- The InnerSource Guidance Group is responsible for communicating general guidelines to upper management\n- This also ensures that teams and functional groups have a recurring touchpoint with other team and functional groups – establishing trust and insight into the overall organizational needs and requirements",
    "resulting_context": "TBD",
    "known_instances": "- A large, highly regulated, financial organization is planning to implement a Trusted Committer Steering Group to provide broad guidelines and guard rails as part of their InnerSource initiative.",
    "rationale": "Empowering Trusted Committers as representatives on behalf of their teams propagates ownership of the overall InnerSource strategy as it deploys and evolves in an organization and ensures that a baseline level of governance and standardization occurs.",
    "author(s)": "- Tim Tyler <ttyler01@gmail.com>",
    "acknowledgements": "- Tim Yao",
    "slug": "innersource-guidance-group"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/innersource-customer-interview-questions.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nInnerSource Customer Interview Questions\n\n## Patlet\n\nAn organization has decided to create an InnerSource program but are unsure which issues they should address first.\nUsing a customer interview will help evaluate pain points across the organization, to prioritize the areas where InnerSource will have the biggest positive impact.\n\n## Problem\n\nInnerSource can address a number of areas that impact collaboration. The problem is:\n\n* Determining what organizational pain points to address first. People want every pain point that InnerSource can address, solved fast.\n* Evaluating team needs can be ambiguous if the conversation is not structured around an InnerSource framework.\n\n## Context\n\nOrganizations know what problems InnerSource can help address and that their organization will benefit, but don’t know what to do first. Introducing the idea of InnerSource to teams across an engineering organization can result in many excited team leaders who want the final results, but organizations still need solid buy-in and a way to communicate the amount of time and effort a solution will take. People like the idea, but people starting an InnerSource program need a way to find advocates, engage users, understand their needs, and show them how InnerSource will directly impact their teams.\n\n## Forces\n\nConstraints:\n\nPeople are busy and want a fast solution. They like an idea, but don’t understand how they will have to participate in the solution.\n\nThere are limited resources and some solutions may already exist, but they are only known about by a small group of people.  \n\nPeople do not understand how they are directly affected by InnerSource or how to get involved.\n\n## Solutions\n\nCreate a customer interview to evaluate team needs and convey to your user what InnerSource can address by using questions specifically structured around the InnerSource framework. Some questions on this list may seem redundant, but they help users to look at problems from different perspectives.\n\n**InnerSource Customer Interview Questions**\n\n* **Documentation**\n    * What are your challenges related to documentation?\n    * How do you find documentation created by another team?\n* **Collaboration/Communication**\n    * What are your challenges related to cross team collaboration?\n    * What would make your daily collaboration with other teams easier?\n* **Bottlenecks**\n    * What creates the most bottlenecks on your team?\n    * What are some bottlenecks that aren’t on your team but cause you problems?\n* **Project Governance**\n    * What happens when your team has conflicting equally important priorities? (These may be equally important, time critical PRs from two other teams)\n    * How are decisions on your team made?\n* **Contribution**\n    * What are the biggest barriers to entry for other internal teams to contribute to your project?\n* **Transparency**\n    * What current processes or challenges limit your project transparency?\n* **Processes**\n    * What new processes would make your team more successful? This is any process you may want if there were no limitations. What processes or structures do you wish were in place?\n    * Are there any current processes in place that hinder performance?\n* **Who else should we be talking to?**\n\n## Resulting Context\n\nAfter reaching out to team leaders and finding out what their needs are, showing how they will be impacted by an InnerSource program, and conveying how sharing their struggles with help contribute to the effort, you will have greater buy-in to InnerSource. People will see it as action instead of concept and you will have data that will help create a plan. You will be able to create a report of the most common pain points across the organization that can be shared with leadership to show user needs and clear goals for next steps.\n\nWorking through these questions helps build trust and establish relationships with users. It helps contextualize InnerSource and how it applies to their individual teams. Building these relationships helps evaluate users and their teams for InnerSource readiness. Discussing these questions helps frame the benefits of InnerSource in a way that users can understand without making it a sales pitch.\n\nBy using this pattern you will gain information that will help you to describe your [goals and guiding principles](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/document-your-guiding-principles.md), build a plan, and identify [good first project](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/good-first-project.md) to start with.\n\n## Known Instances\n\n* Indeed - see reference [InnerSource Sleuth: Identifying Your Pain Points - Katie Schueths (Indeed) - IS Summit 2022](https://www.youtube.com/watch?v=Et7-DzdY2yw)\n\n## Status\n\nInitial\n\n## Author(s)\n\nKatie Schueths (Indeed)\n",
    "title": "InnerSource Customer Interview Questions",
    "patlet": "An organization has decided to create an InnerSource program but are unsure which issues they should address first.\nUsing a customer interview will help evaluate pain points across the organization, to prioritize the areas where InnerSource will have the biggest positive impact.",
    "problem": "InnerSource can address a number of areas that impact collaboration. The problem is:\n\n* Determining what organizational pain points to address first. People want every pain point that InnerSource can address, solved fast.\n* Evaluating team needs can be ambiguous if the conversation is not structured around an InnerSource framework.",
    "context": "Organizations know what problems InnerSource can help address and that their organization will benefit, but don’t know what to do first. Introducing the idea of InnerSource to teams across an engineering organization can result in many excited team leaders who want the final results, but organizations still need solid buy-in and a way to communicate the amount of time and effort a solution will take. People like the idea, but people starting an InnerSource program need a way to find advocates, engage users, understand their needs, and show them how InnerSource will directly impact their teams.",
    "forces": "Constraints:\n\nPeople are busy and want a fast solution. They like an idea, but don’t understand how they will have to participate in the solution.\n\nThere are limited resources and some solutions may already exist, but they are only known about by a small group of people.  \n\nPeople do not understand how they are directly affected by InnerSource or how to get involved.",
    "solutions": "Create a customer interview to evaluate team needs and convey to your user what InnerSource can address by using questions specifically structured around the InnerSource framework. Some questions on this list may seem redundant, but they help users to look at problems from different perspectives.\n\n**InnerSource Customer Interview Questions**\n\n* **Documentation**\n    * What are your challenges related to documentation?\n    * How do you find documentation created by another team?\n* **Collaboration/Communication**\n    * What are your challenges related to cross team collaboration?\n    * What would make your daily collaboration with other teams easier?\n* **Bottlenecks**\n    * What creates the most bottlenecks on your team?\n    * What are some bottlenecks that aren’t on your team but cause you problems?\n* **Project Governance**\n    * What happens when your team has conflicting equally important priorities? (These may be equally important, time critical PRs from two other teams)\n    * How are decisions on your team made?\n* **Contribution**\n    * What are the biggest barriers to entry for other internal teams to contribute to your project?\n* **Transparency**\n    * What current processes or challenges limit your project transparency?\n* **Processes**\n    * What new processes would make your team more successful? This is any process you may want if there were no limitations. What processes or structures do you wish were in place?\n    * Are there any current processes in place that hinder performance?\n* **Who else should we be talking to?**",
    "resulting_context": "After reaching out to team leaders and finding out what their needs are, showing how they will be impacted by an InnerSource program, and conveying how sharing their struggles with help contribute to the effort, you will have greater buy-in to InnerSource. People will see it as action instead of concept and you will have data that will help create a plan. You will be able to create a report of the most common pain points across the organization that can be shared with leadership to show user needs and clear goals for next steps.\n\nWorking through these questions helps build trust and establish relationships with users. It helps contextualize InnerSource and how it applies to their individual teams. Building these relationships helps evaluate users and their teams for InnerSource readiness. Discussing these questions helps frame the benefits of InnerSource in a way that users can understand without making it a sales pitch.\n\nBy using this pattern you will gain information that will help you to describe your [goals and guiding principles](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/document-your-guiding-principles.md), build a plan, and identify [good first project](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/good-first-project.md) to start with.",
    "known_instances": "* Indeed - see reference [InnerSource Sleuth: Identifying Your Pain Points - Katie Schueths (Indeed) - IS Summit 2022](https://www.youtube.com/watch?v=Et7-DzdY2yw)",
    "status": "Initial",
    "author(s)": "Katie Schueths (Indeed)",
    "slug": "innersource-customer-interview-questions"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/incubator-pipeline.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nIncubator Pipeline\n\n## Patlet\n\nA team maintaining a widely shared code library wants to accept contributions from other teams, without lowering the overall quality of their library. Therefore the shared library team uses an incubator pipeline to set a lower bar for contributions to enter and a higher bar to exit and become a top-level unit in the library.\n\n## Problem\n\nA team charged to maintain a shared library is responsible for the quality of the components in the library. If you offer them code from another team, they face the dilemma that the other team’s code might not meet their requirements, and it’s unclear if they’ll be able to support that code. If other teams can’t offer code, they may be reluctant to use the shared code, or they may be forced to use inadequate code from the central team, causing issues for their product.\n\nThe team managing the shared code library needs a way to allow InnerSource contributions to their supported library of components but also to distinguish between contributions that are up to the standard, or that are on their way to the standard.\n\n## Story\n\nSee [Culture, Behaviors, and InnerSource. A three-part blog series. 3 of 3](https://www.linkedin.com/pulse/culture-behaviors-innersource-three-part-blog-series-3-gil-yehuda/) for the conceptual inspiration for this pattern.\n\n## Context\n\nWe find the pattern to be useful when there’s a team at a company that is responsible for creating code assets that other engineering teams at the company must consume. For example:\n\n1. the team that creates the centrally approved library of UI components,\n1. the team that builds the build pipelines and installation scripts,\n1. the team that builds microservice template code, etc.\n\nThese teams are held to meet certain standards (e.g., UI teams ensure all components comply with accessibility standards, can be themed and placed on the UI grid in a manner consistent with other components and company requirements; pipeline and install scripts might require certain boilerplate code for compliance logging or security controls, etc.).\n\nHowever, the shared code library team does not want engineers to “roll their own” solutions either. But the user-teams may have needs not met by the shared library team’s code. Since they are engineers, they’ll want to create or find their own solutions. Doing that threatens the shared library team and creates multiple solutions. Whereas that’s sometimes okay, in some cases companies want to use InnerSource to maintain consistency without stifling innovation.  \n\n## Forces\n\nIf the shared library team insists that they alone are the exclusive source of approved code, they limit the company output to the shared library team’s capacity. If the needs exceed the capacity, everyone suffers. However, if the shared library team cannot prevent other teams from creating their own solutions, they lose their role as a standards-setting team and simply become a team that provides technology that only some teams use.\n\nFor the customers of the shared library team’s code, they too face a challenge. The library provided may be insufficient. They’ll need some other solution. But breaking rank will cause downstream tension when it comes time to merge their rogue code with the approved code. They want to follow the company protocols, but they also need to deploy their products.\n\n## Sketch (optional)\n\nNone yet\n\n## Solutions\n\nThe shared library team provides an incubator pipeline for their (internal engineering) customers to use. Customer teams who need to augment the shared library can do so by petitioning to enter the incubator pipeline. Additionally, central teams can request contributions into the incubator pipeline. The shared library team maintains an acceptance criterion to get into the pipeline. This may include some demonstration that at least one other team would find the contribution useful, that the contribution could (perhaps with some additional engineering work) be enhanced to conform to the shared library standard. **In other words, no code should enter the incubator pipeline that we know cannot exit it.**\n\nOnce in the incubator pipeline, the shared library team and contributing teams can select a support agreement that enables teams to use the incubating code, but to understand that its support is less than a top-level component in the library. It is a second-class citizen that is on the way to becoming a first-class citizen.\n\nExiting the incubator pipeline means the code is a first-class citizen and member of the shared library. In this case, the shared library team may not have created the code, and may not have enhanced the code. But they will be willing to support the code as if they created it because it meets the criteria they set for their own code. It is possible that a component fails to graduate the pipeline. In that case, the component would be retired out of the incubator pipeline.\n\n## Resulting Context\n\nWhen a customer-team needs code that the shared library team does not have, they have a path to success. They can create and propose a solution to be included in the incubator pipeline. (They might find an open source solution too.) This does not pose a threat to the shared library team. In fact, it allows the shared library team to grow their library at a faster rate while maintaining quality control by staging the contribution.\n\nMoreover, by defining an incubator process, the shared library team clarifies their criteria for inclusion into the library. This helps new members of their team too. In fact, this allows any engineer who can meet the criteria to become a \"member of their team\" even if only for a component or two.\n\n## Rationale\n\nIncubator pipelines allow participants to view code as potential and improving assets. Too often, people see code as being good enough or not good enough. In reality, code can become better. Formally putting code in an incubator status sends the message that the code is not yet good enough but is getting there.\n\nThis pattern was inspired by things like the Apache Software Foundation's incubator, as well as Linux Foundation's sandbox/incubator processes used in CNCF, CDF, and other open source foundations. Those help entire projects get into the foundation. They help raise the bar on projects that wanted to get more visibility by getting them into an incubator. Many of those projects graduated and are very successful today, in open source. This pattern here is like a smaller fractal of that pattern -- to help components get into an open source library.\n\n## Known Instances\n\nBeing implemented at U.S. Bank.\n\n## Status\n\nInitial\n\n## Author(s)\n\n* Bryn Sharpe\n* Gil Yehuda\n\n## Acknowledgements\n\n* Kevin Bongers\n* Anton Fernando\n* Levi Geinert\n* Travis Killoren\n* Dave Lester\n* Mike Lupo\n* Logan Price\n* Joseph Ryan\n* Michael Schlies\n* Michael Schulz\n* John Sibo\n* Jennifer Skov\n* John Yopp\n",
    "title": "Incubator Pipeline",
    "patlet": "A team maintaining a widely shared code library wants to accept contributions from other teams, without lowering the overall quality of their library. Therefore the shared library team uses an incubator pipeline to set a lower bar for contributions to enter and a higher bar to exit and become a top-level unit in the library.",
    "problem": "A team charged to maintain a shared library is responsible for the quality of the components in the library. If you offer them code from another team, they face the dilemma that the other team’s code might not meet their requirements, and it’s unclear if they’ll be able to support that code. If other teams can’t offer code, they may be reluctant to use the shared code, or they may be forced to use inadequate code from the central team, causing issues for their product.\n\nThe team managing the shared code library needs a way to allow InnerSource contributions to their supported library of components but also to distinguish between contributions that are up to the standard, or that are on their way to the standard.",
    "story": "See [Culture, Behaviors, and InnerSource. A three-part blog series. 3 of 3](https://www.linkedin.com/pulse/culture-behaviors-innersource-three-part-blog-series-3-gil-yehuda/) for the conceptual inspiration for this pattern.",
    "context": "We find the pattern to be useful when there’s a team at a company that is responsible for creating code assets that other engineering teams at the company must consume. For example:\n\n1. the team that creates the centrally approved library of UI components,\n1. the team that builds the build pipelines and installation scripts,\n1. the team that builds microservice template code, etc.\n\nThese teams are held to meet certain standards (e.g., UI teams ensure all components comply with accessibility standards, can be themed and placed on the UI grid in a manner consistent with other components and company requirements; pipeline and install scripts might require certain boilerplate code for compliance logging or security controls, etc.).\n\nHowever, the shared code library team does not want engineers to “roll their own” solutions either. But the user-teams may have needs not met by the shared library team’s code. Since they are engineers, they’ll want to create or find their own solutions. Doing that threatens the shared library team and creates multiple solutions. Whereas that’s sometimes okay, in some cases companies want to use InnerSource to maintain consistency without stifling innovation.",
    "forces": "If the shared library team insists that they alone are the exclusive source of approved code, they limit the company output to the shared library team’s capacity. If the needs exceed the capacity, everyone suffers. However, if the shared library team cannot prevent other teams from creating their own solutions, they lose their role as a standards-setting team and simply become a team that provides technology that only some teams use.\n\nFor the customers of the shared library team’s code, they too face a challenge. The library provided may be insufficient. They’ll need some other solution. But breaking rank will cause downstream tension when it comes time to merge their rogue code with the approved code. They want to follow the company protocols, but they also need to deploy their products.",
    "sketch_(optional)": "None yet",
    "solutions": "The shared library team provides an incubator pipeline for their (internal engineering) customers to use. Customer teams who need to augment the shared library can do so by petitioning to enter the incubator pipeline. Additionally, central teams can request contributions into the incubator pipeline. The shared library team maintains an acceptance criterion to get into the pipeline. This may include some demonstration that at least one other team would find the contribution useful, that the contribution could (perhaps with some additional engineering work) be enhanced to conform to the shared library standard. **In other words, no code should enter the incubator pipeline that we know cannot exit it.**\n\nOnce in the incubator pipeline, the shared library team and contributing teams can select a support agreement that enables teams to use the incubating code, but to understand that its support is less than a top-level component in the library. It is a second-class citizen that is on the way to becoming a first-class citizen.\n\nExiting the incubator pipeline means the code is a first-class citizen and member of the shared library. In this case, the shared library team may not have created the code, and may not have enhanced the code. But they will be willing to support the code as if they created it because it meets the criteria they set for their own code. It is possible that a component fails to graduate the pipeline. In that case, the component would be retired out of the incubator pipeline.",
    "resulting_context": "When a customer-team needs code that the shared library team does not have, they have a path to success. They can create and propose a solution to be included in the incubator pipeline. (They might find an open source solution too.) This does not pose a threat to the shared library team. In fact, it allows the shared library team to grow their library at a faster rate while maintaining quality control by staging the contribution.\n\nMoreover, by defining an incubator process, the shared library team clarifies their criteria for inclusion into the library. This helps new members of their team too. In fact, this allows any engineer who can meet the criteria to become a \"member of their team\" even if only for a component or two.",
    "rationale": "Incubator pipelines allow participants to view code as potential and improving assets. Too often, people see code as being good enough or not good enough. In reality, code can become better. Formally putting code in an incubator status sends the message that the code is not yet good enough but is getting there.\n\nThis pattern was inspired by things like the Apache Software Foundation's incubator, as well as Linux Foundation's sandbox/incubator processes used in CNCF, CDF, and other open source foundations. Those help entire projects get into the foundation. They help raise the bar on projects that wanted to get more visibility by getting them into an incubator. Many of those projects graduated and are very successful today, in open source. This pattern here is like a smaller fractal of that pattern -- to help components get into an open source library.",
    "known_instances": "Being implemented at U.S. Bank.",
    "status": "Initial",
    "author(s)": "* Bryn Sharpe\n* Gil Yehuda",
    "acknowledgements": "* Kevin Bongers\n* Anton Fernando\n* Levi Geinert\n* Travis Killoren\n* Dave Lester\n* Mike Lupo\n* Logan Price\n* Joseph Ryan\n* Michael Schlies\n* Michael Schulz\n* John Sibo\n* Jennifer Skov\n* John Yopp",
    "slug": "incubator-pipeline"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/include-product-owners.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nInclude Product Owners\n\n## Patlet\n\nEngaging and educating Product Owners about InnerSource can help them modify their actions (e.g., in the space of KPIs) to help InnerSource collaboration work better.\n\n## Problem\n\nKey Performance Indicators (KPIs) for Product Owners are primarily product focused, and don't consider areas such as collaborative development. This results in a lower level of engagement with InnerSource projects.\n\n## Forces\n\n* KPIs discourage Developers from contributing to others via InnerSource.\n* Product Owners have different priorities that may not align directly with InnerSource priorities. Product Owners are focused on their ROI in alignment with Product Management.\n* Product Owners may not be as focused on the longer-term benefits of InnerSource because many of their own metrics and goals are shorter lived.\n* Product Owners may not be aware of the benefits of InnerSource\n* Employees desire to grow their own circle of influence, which leads them to limited sharing of their own resources.\n* Some people lack understanding of the up-front impact and cost of InnerSource in terms of resources, because they are more focused on the efficiencies that it can provide.\n* Product Owners might not use Development tools and may therefore lack the opportunity to find out about InnerSource offerings and opportunities for collaboration and reuse.\n* Fear of loss of control.\n* Resistance to allow people to join and contribute.\n* Motivation: For the receiving Product Owners, there are big benefits of external contributions.\n* Motivation: Some are motivated to contribute because it is the only way that their desired feature will make it into the codebase.\n* Lack of motivation: If Developers don't see what's in it for them to contribute, they might not be highly motivated to help.\n\n## Context\n\n* Teams and individuals are not rewarded for software component reuse.\n* Motivations of the product(s) are not aligned with the InnerSource initiative.\n* Every product area has their own limited resource/budget.\n* Delivery deadlines are not movable.\n* Product Owners rarely make compromises regarding technical items in their area.\n* InnerSource changes resource distribution and requires up-front discussions, which require time allocation.\n\n## Solution\n\n* Talk with the Product Owners to understand their priorities. Prepare for this discussion by understanding their user stories, backlog, and roadmap if possible.\n* Ensure that Product Owners are aware of the benefits of InnerSource that they might care about most, including:\n    - Reuse. Teams can avoid writing new software from scratch because they can leverage and/or existing code.\n    - Savings of time and money. It may cost more for a team other than the original team to write it, but it costs less than   writing it from scratch.\n    - Staff augmentation for the receiving team.\n* Change the collaboration model on the product side. Bring the impacted Product Owners together to discuss the InnerSource project and choices related to resource allocation. Technical collaboration will result in better quality decisions. Overall resources cost could be lowered for some areas. Having the conversation builds trust and may result in evolution of the software component.  \n* If possible, implement effective enterprise search.\n* Adjust KPIs to motivate people to collaborate and reuse. Work with leadership to get support.\n* Internally advertise opportunities for reuse and collaboration. This can be done with blogs, success stories, providing a searchable list of projects to work with, and other methods.\n* Create a champions program and have them identify project opportunities.\n\n## Resulting Context\n\n* Initial time investment is rewarded by the outcomes.\n* Product managers are now collaborating with one another.\n* Resulting development costs less overall.\n* Product owner KPIs might not change but reuse collaboration still occurs (a faster way to achieve them).\n* Product owners factor in InnerSource so they reach their KPIs more efficiently.\n\n## Known Instances\n\n* PayPal is looking into finding a search solution for their project Agora. They are collaborating with other teams pursuing a similar mission, eliminating redundancy and inefficiency regarding effort and tools.\n\n## Status\n\n* Initial\n* Created at the Spring Summit 2017 in Geneva, Switzerland\n\n## Authors\n\n* Silona Bonewald\n* Alex Bozic, Bloomberg\n* Erin Bank\n* Tim Yao\n",
    "title": "Include Product Owners",
    "patlet": "Engaging and educating Product Owners about InnerSource can help them modify their actions (e.g., in the space of KPIs) to help InnerSource collaboration work better.",
    "problem": "Key Performance Indicators (KPIs) for Product Owners are primarily product focused, and don't consider areas such as collaborative development. This results in a lower level of engagement with InnerSource projects.",
    "forces": "* KPIs discourage Developers from contributing to others via InnerSource.\n* Product Owners have different priorities that may not align directly with InnerSource priorities. Product Owners are focused on their ROI in alignment with Product Management.\n* Product Owners may not be as focused on the longer-term benefits of InnerSource because many of their own metrics and goals are shorter lived.\n* Product Owners may not be aware of the benefits of InnerSource\n* Employees desire to grow their own circle of influence, which leads them to limited sharing of their own resources.\n* Some people lack understanding of the up-front impact and cost of InnerSource in terms of resources, because they are more focused on the efficiencies that it can provide.\n* Product Owners might not use Development tools and may therefore lack the opportunity to find out about InnerSource offerings and opportunities for collaboration and reuse.\n* Fear of loss of control.\n* Resistance to allow people to join and contribute.\n* Motivation: For the receiving Product Owners, there are big benefits of external contributions.\n* Motivation: Some are motivated to contribute because it is the only way that their desired feature will make it into the codebase.\n* Lack of motivation: If Developers don't see what's in it for them to contribute, they might not be highly motivated to help.",
    "context": "* Teams and individuals are not rewarded for software component reuse.\n* Motivations of the product(s) are not aligned with the InnerSource initiative.\n* Every product area has their own limited resource/budget.\n* Delivery deadlines are not movable.\n* Product Owners rarely make compromises regarding technical items in their area.\n* InnerSource changes resource distribution and requires up-front discussions, which require time allocation.",
    "solution": "* Talk with the Product Owners to understand their priorities. Prepare for this discussion by understanding their user stories, backlog, and roadmap if possible.\n* Ensure that Product Owners are aware of the benefits of InnerSource that they might care about most, including:\n    - Reuse. Teams can avoid writing new software from scratch because they can leverage and/or existing code.\n    - Savings of time and money. It may cost more for a team other than the original team to write it, but it costs less than   writing it from scratch.\n    - Staff augmentation for the receiving team.\n* Change the collaboration model on the product side. Bring the impacted Product Owners together to discuss the InnerSource project and choices related to resource allocation. Technical collaboration will result in better quality decisions. Overall resources cost could be lowered for some areas. Having the conversation builds trust and may result in evolution of the software component.  \n* If possible, implement effective enterprise search.\n* Adjust KPIs to motivate people to collaborate and reuse. Work with leadership to get support.\n* Internally advertise opportunities for reuse and collaboration. This can be done with blogs, success stories, providing a searchable list of projects to work with, and other methods.\n* Create a champions program and have them identify project opportunities.",
    "resulting_context": "* Initial time investment is rewarded by the outcomes.\n* Product managers are now collaborating with one another.\n* Resulting development costs less overall.\n* Product owner KPIs might not change but reuse collaboration still occurs (a faster way to achieve them).\n* Product owners factor in InnerSource so they reach their KPIs more efficiently.",
    "known_instances": "* PayPal is looking into finding a search solution for their project Agora. They are collaborating with other teams pursuing a similar mission, eliminating redundancy and inefficiency regarding effort and tools.",
    "status": "* Initial\n* Created at the Spring Summit 2017 in Geneva, Switzerland",
    "authors": "* Silona Bonewald\n* Alex Bozic, Bloomberg\n* Erin Bank\n* Tim Yao",
    "slug": "include-product-owners"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/incentive-mechanisms-for-voluntary-contribution.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nIncentive mechanisms to foster voluntary contribution\n\n## Patlet\n\nTBD\n\n## Problem\n\nIn hierarchical and silo-organized organizations, getting voluntary contributions in InnerSource\nprojects can be challenging. It is crucial to create mechanisms to incentivize managers to foster\nvoluntary contributions. Consider the following story:\n\nCompany A has started an InnerSource initiative. Their InnerSource concept expected to have\nassociates voluntarily contributing to InnerSource projects, regardless of topic and regardless of\nhome-business-unit alignment.\n\nAfter some time in activity, the core team realizes that their InnerSource project is not getting\nvoluntary contributions. While engaging with potential individual contributors, the\ncore team (pattern link) has consistently learned that the contributors in question were\nnot allowed to contribute or have their participation in InnerSource projects rejected by\ntheir respective line managers. The reasons presented by management are:\n\n- the lack of strategic alignment between the InnerSource project goal and the business unit product/service portfolio,\n- managers have planned their developer's capacity 100% to the home business units projects.\n\nSo, the management is not motivated to provide their scarce developer capacity to the\nInnerSource project.\n\nAs a result, the total number of contributors remained restricted to the core team and the\nproject cannot build a community of developers. Furthermore, contributions mostly originated\nin the same business unit the [Dedicated Community Leader](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/dedicated-community-leader.md)\nbelonged to. Innovation did not happen in the expected scale. Top management is no longer\nconvinced that InnerSource yields the expected benefits and abandons the initiative altogether.\n\n## Context\n\n- The InnerSource initiative is sponsored (budget) by top level management.\n- The managers (middle-management) have their bonus directly depending\nonly on business units results under their responsibility\n- The capacity of every associate is usually planned by their superiors\nand 100% allocated to the home business unit projects\n- Cross organizational collaboration is not the norm.\n- Contributions to InnerSource projects are expected to be made during working\n  hours.\n\n## Forces\n\n- Managers of business units are held accountable for their results. Reducing\n  the capacity of an associate contributing to an InnerSource project rather\n  than the goals of the business unit will make it harder for them to reach or\n  exceed their goals.\n- The more time an associate spends on contributions to an InnerSource project\n  which does not benefit his day-to-day work, the more will the workload for\n  his teammates in his business unit increase.\n- The individual contributor would like to participate to enhance his\n  professional network within the company and gain knowledge and experience\n  with both the InnerSource method and the technical area he makes a\n  contribution to.\n\n## (Possible) Solution\n\n- The top management sets and communicates a corporate strategy where development\n  capacity are to be planned and committed to a maximum of 85% to home business units projects\n- A central funded formal contracting mechanisms, where line managers get\n  refunded by the percentage of associates work time in InnerSource is in place.\n- Managers (middle-management) have a percentage of their bonus associated to\n  contribution and the results of InnerSource projects not directly related/sponsored\n  by their business units.\n- Utilize any existing engineering-wide bonus that allots some percentage of each employee's\n  bonus to be aligned with Inner Source interactions. It could be # of commits, or commits +\n  issues + documentation + chat interaction, etc. Utilize some kind of personally-linked\n  statistic to fill, for example, 15% of each employees bonus. Note that this encourages\n  after-hours type work more-so than regular work-week hours, but if combined with other\n  solutions above, could hit the issue from multiple angles. (used partially @ RedHat)\n\n## Resulting Context\n\n- The top management communication of the strategic decision to plan and commit\n  85% of developers capacity and have 15% buffer for other company initiatives,\n  for instance InnerSource projects, shows their support and sets a clear sign\n  that InnerSource is part of the corporate goal and get executive air cover.\n- Allocation of corporate funds to business units for reimbursement of\n  development capacity makes easier for business units to contribute to InnerSource\n  projects without to commit their cost center budget.\n- Setting the bonus of middle-management partially depending on contributions and the success\n  of InnerSource projects, motivates managers to encourage their developers participate on those\n  projects\n- With a stable group of contributors, it is more likely that some of them will\n  eventually achieve trusted committer status and the InnerSource project will be able\n  to establish a healthy community around their project.\n\n## Status\n\n* Initial\n\n## Authors\n\n* Diogo Fregonese (Robert Bosch GmbH)\n* Georg Gruetter (Robert Bosch GmbH)\n* Robert Hansel (Robert Bosch GmbH)\n* Nick Yeates\n\n## Alias\n\nGet Contributions Despite Silo Thinking\n",
    "title": "Incentive mechanisms to foster voluntary contribution",
    "patlet": "TBD",
    "problem": "In hierarchical and silo-organized organizations, getting voluntary contributions in InnerSource\nprojects can be challenging. It is crucial to create mechanisms to incentivize managers to foster\nvoluntary contributions. Consider the following story:\n\nCompany A has started an InnerSource initiative. Their InnerSource concept expected to have\nassociates voluntarily contributing to InnerSource projects, regardless of topic and regardless of\nhome-business-unit alignment.\n\nAfter some time in activity, the core team realizes that their InnerSource project is not getting\nvoluntary contributions. While engaging with potential individual contributors, the\ncore team (pattern link) has consistently learned that the contributors in question were\nnot allowed to contribute or have their participation in InnerSource projects rejected by\ntheir respective line managers. The reasons presented by management are:\n\n- the lack of strategic alignment between the InnerSource project goal and the business unit product/service portfolio,\n- managers have planned their developer's capacity 100% to the home business units projects.\n\nSo, the management is not motivated to provide their scarce developer capacity to the\nInnerSource project.\n\nAs a result, the total number of contributors remained restricted to the core team and the\nproject cannot build a community of developers. Furthermore, contributions mostly originated\nin the same business unit the [Dedicated Community Leader](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/dedicated-community-leader.md)\nbelonged to. Innovation did not happen in the expected scale. Top management is no longer\nconvinced that InnerSource yields the expected benefits and abandons the initiative altogether.",
    "context": "- The InnerSource initiative is sponsored (budget) by top level management.\n- The managers (middle-management) have their bonus directly depending\nonly on business units results under their responsibility\n- The capacity of every associate is usually planned by their superiors\nand 100% allocated to the home business unit projects\n- Cross organizational collaboration is not the norm.\n- Contributions to InnerSource projects are expected to be made during working\n  hours.",
    "forces": "- Managers of business units are held accountable for their results. Reducing\n  the capacity of an associate contributing to an InnerSource project rather\n  than the goals of the business unit will make it harder for them to reach or\n  exceed their goals.\n- The more time an associate spends on contributions to an InnerSource project\n  which does not benefit his day-to-day work, the more will the workload for\n  his teammates in his business unit increase.\n- The individual contributor would like to participate to enhance his\n  professional network within the company and gain knowledge and experience\n  with both the InnerSource method and the technical area he makes a\n  contribution to.",
    "(possible)_solution": "- The top management sets and communicates a corporate strategy where development\n  capacity are to be planned and committed to a maximum of 85% to home business units projects\n- A central funded formal contracting mechanisms, where line managers get\n  refunded by the percentage of associates work time in InnerSource is in place.\n- Managers (middle-management) have a percentage of their bonus associated to\n  contribution and the results of InnerSource projects not directly related/sponsored\n  by their business units.\n- Utilize any existing engineering-wide bonus that allots some percentage of each employee's\n  bonus to be aligned with Inner Source interactions. It could be # of commits, or commits +\n  issues + documentation + chat interaction, etc. Utilize some kind of personally-linked\n  statistic to fill, for example, 15% of each employees bonus. Note that this encourages\n  after-hours type work more-so than regular work-week hours, but if combined with other\n  solutions above, could hit the issue from multiple angles. (used partially @ RedHat)",
    "resulting_context": "- The top management communication of the strategic decision to plan and commit\n  85% of developers capacity and have 15% buffer for other company initiatives,\n  for instance InnerSource projects, shows their support and sets a clear sign\n  that InnerSource is part of the corporate goal and get executive air cover.\n- Allocation of corporate funds to business units for reimbursement of\n  development capacity makes easier for business units to contribute to InnerSource\n  projects without to commit their cost center budget.\n- Setting the bonus of middle-management partially depending on contributions and the success\n  of InnerSource projects, motivates managers to encourage their developers participate on those\n  projects\n- With a stable group of contributors, it is more likely that some of them will\n  eventually achieve trusted committer status and the InnerSource project will be able\n  to establish a healthy community around their project.",
    "status": "* Initial",
    "authors": "* Diogo Fregonese (Robert Bosch GmbH)\n* Georg Gruetter (Robert Bosch GmbH)\n* Robert Hansel (Robert Bosch GmbH)\n* Nick Yeates",
    "alias": "Get Contributions Despite Silo Thinking",
    "slug": "incentive-mechanisms-for-voluntary-contribution"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/improve-findability.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nImprove Findability\n\n## Patlet\n\nPeople can't find the internally developed solutions that they need due to poor naming conventions. This causes frustration in finding InnerSource solutions and a reduction in code reuse.\n\n## Problem\n\nPeople can't find the internally developed solutions that they need due to poor naming conventions. This causes frustration in finding InnerSource solutions and a reduction in code reuse.\n\n## Context\n\nReusable software component(s) are available internally but users can't easily find them.\nThis problem is more likely to occur in large, federated companies where different organizational units operate as silos.\nHistorically, the company does not have a culture of sharing code across silos.\n\n## Forces\n\n- The volume of contributions to inner source is impacting the ability to find components.\n- The internal search engine is not robust, or is not connected to git repositories (it can be difficult to make this change happen)\n- Cryptic naming conventions for projects and lack of keywords contribute to reduced findability.\n- People may lose confidence in the integrity of inner source and become discouraged from engaging when they search and don't find what they need.\n\n## Solution\n\nTo help improve findability for inner source projects:\n\n- Provide guidelines for applying clear, meaningful naming conventions to projects, and reinforce the importance of avoiding cryptic code names.\n- Include keywords in project descriptions.\n- Apply tagging to repositories (validated).\n- Use labels where possible.\n- If possible, pull repository names, descriptions, and `README.md` files into the search engine (not the code itself).\n- Instate a concierge service (guide) to help product people find stuff. (This approach might not scale, but could be helpful at the beginning of a program.)\n\n<img alt=\"Poor naming conventions\" src=\"/assets/img/poornamingconventions.jpg\" width=\"70%\">\n\n## Known Instances\n\nNone known as of yet - this is a pattern idea until it is proven.\n\n## Desired Resulting Context\n\n- Internal components are visible.\n- Developers looking for code can search for it and find it quickly.\n- Developers are now looking internally for software components.\n- Increased reuse, faster time to market.\n- Increased collaboration.\n- Higher quality code.\n- Increased opportunities for innovation.\n\n## Status\n\n* Initial  \n* Brainstormed pattern idea reviewed 2017-03-11.\n\n## Authors\n\n- Georg Gruetter (Robert Bosch GmbH)\n- Diogo Fregonese (Robert Bosch GmbH)\n- Erin Bank (CA Technologies)\n- Padma Sudarsan (Nokia)\n- Tim Yao (Nokia)\n\n## Also Known As\n\n- Badly Named Piles\n- Poor Naming Conventions\n",
    "title": "Improve Findability",
    "patlet": "People can't find the internally developed solutions that they need due to poor naming conventions. This causes frustration in finding InnerSource solutions and a reduction in code reuse.",
    "problem": "People can't find the internally developed solutions that they need due to poor naming conventions. This causes frustration in finding InnerSource solutions and a reduction in code reuse.",
    "context": "Reusable software component(s) are available internally but users can't easily find them.\nThis problem is more likely to occur in large, federated companies where different organizational units operate as silos.\nHistorically, the company does not have a culture of sharing code across silos.",
    "forces": "- The volume of contributions to inner source is impacting the ability to find components.\n- The internal search engine is not robust, or is not connected to git repositories (it can be difficult to make this change happen)\n- Cryptic naming conventions for projects and lack of keywords contribute to reduced findability.\n- People may lose confidence in the integrity of inner source and become discouraged from engaging when they search and don't find what they need.",
    "solution": "To help improve findability for inner source projects:\n\n- Provide guidelines for applying clear, meaningful naming conventions to projects, and reinforce the importance of avoiding cryptic code names.\n- Include keywords in project descriptions.\n- Apply tagging to repositories (validated).\n- Use labels where possible.\n- If possible, pull repository names, descriptions, and `README.md` files into the search engine (not the code itself).\n- Instate a concierge service (guide) to help product people find stuff. (This approach might not scale, but could be helpful at the beginning of a program.)\n\n<img alt=\"Poor naming conventions\" src=\"/assets/img/poornamingconventions.jpg\" width=\"70%\">",
    "known_instances": "None known as of yet - this is a pattern idea until it is proven.",
    "desired_resulting_context": "- Internal components are visible.\n- Developers looking for code can search for it and find it quickly.\n- Developers are now looking internally for software components.\n- Increased reuse, faster time to market.\n- Increased collaboration.\n- Higher quality code.\n- Increased opportunities for innovation.",
    "status": "* Initial  \n* Brainstormed pattern idea reviewed 2017-03-11.",
    "authors": "- Georg Gruetter (Robert Bosch GmbH)\n- Diogo Fregonese (Robert Bosch GmbH)\n- Erin Bank (CA Technologies)\n- Padma Sudarsan (Nokia)\n- Tim Yao (Nokia)",
    "also_known_as": "- Badly Named Piles\n- Poor Naming Conventions",
    "slug": "improve-findability"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/governance-levels.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nTransparent Governance Levels\n\n## Patlet\n\nSeveral teams are using different InnerSource patterns and all calling it \"InnerSource\", so the term is not precise enough to usefully describe a set of working practices without confusion.\n\nEstabilishing a more accurate common language that is understood across all teams allows anyone to communicate intent or set expectations efficiently without ambiguity.\n\n## Problem\n\nSeveral teams are using InnerSource practices. However the degree to which they welcome contributions and give equal collaboration rights to contributors differ. Despite these differences, all teams refer to their way of working as \"InnerSource\" without any additional qualifiers.\n\nThe result is confusion and frustration when teams collaborate as the expectation of what InnerSource means in practice is different in each team. This confusion also affects strategy planning and decisions on future InnerSource intent as the term is too vague which leads to long discussions and time lost on clarifications.\n\n## Stories\n\n### Example of Confusion\n\nFor two projects InnerSource best practices have been adopted. Project A has a shared ownership model with [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) from multiple teams. Project B is fully owned by one team with contributions from other teams. New users of either project are regularly confused about the level of influence they can gain in the respective project. This leads to long discussions, escalations and time lost on clarifications.\n\n### Example of Delayed Decision\n\nProject C is currently closed source and used only by team 1. Team 2 want to use project C and the leadership of the two teams negotiates options which include InnerSource practices. Agreement takes longer than expected because the \"InnerSource\" term did not describe a target state that could be agreed without ambiguity, and the teams had to document bespoke options for their leadership to consider before a decision could be made.\n\n### Examples from Open Source\n\nLike \"InnerSource\", Open Source is also a broad term.\n\nThere are projects on GitHub, published purely for the pleasure of the author with no intention of long term maintenance, not intention to fix bugs submitted by users. This would be the equivalent of \"Bug Reports and Issues Welcome\" - you can report the bug, but its on the owner to find the time to fix it.\n\nThere are projects where the roadmap is created in-house, hidden from public view. Where commit rights come and go with the contract of the employees of one company (e.g. MongoDB, Elastic, Tensorflow). Users are welcome to submit patches, they will even be mentored through. All development happens in the open, but control and strategy is never shared. This would be the equivalent of stage \"Contributions Welcome\".\n\nThere are projects that share write access, but do not share the power to decide who gets write access next. This applies to everyone who is only a committer at an Apache project. There are projects that are fully shared across multiple independent organisations (e.g. k8s, any Apache project) - those would be \"Shared Ownership\".\n\nThe same levels make sense inside of organisations.\n\n## Context\n\n- InnerSource concepts are established within an organisation with multiple projects and teams adopting InnerSource.\n- Internal InnerSource practices are not prescribed in detail.\n- Teams/projects have the autonomy to optimise for their local circumstances.\n\n## Forces\n\n- Projects adopt different InnerSource patterns and practices to optimise for their context.\n- Users want clarity on the level of influence they can gain in an InnerSource project when deciding whether or how to use it.\n- Leaders want clarity on InnerSource project intentions to understand the expected cost and benefits.\n- Writing a detailed description of a set of InnerSource practices requires significant effort.\n\n## Solution\n\nThe solution is to create a universally understood language to describe the InnerSource operating models that are used in your organisation.\n\nWe define **InnerSource operating model** as a description of how much influence the core development team of a project ist willing to share with contributing teams. Or in other terms, the level of influence a contributing team can gain in the respective project.\n\nThe shared language for these InnerSource operating models can be established with these steps:\n\n1. Identify the common recurring InnerSource operating models that exist in your teams and projects.\n2. Document each model in detail, and give each a distinctive name.\n3. Promote the use of these names to describe projects until the name's meaning is understood across the whole organisation.\n\nExamples of common InnerSource operating models (1) are:\n\n- **Bug Reports and Issues Welcome**: People outside the core development team may use the code. They can submit feature requests and bug reports for things they would like to see changed.\n- **Contributions Welcome**: People outside the core development team may use the code. They can also make modifications and submit them to core team for inclusion.\n- **Shared Ownership**: Members of different teams collaborate on the project as equal peers. Everyone has the ability to merge code. Everyone has an equal say on the project direction. Everyone has an equal say in who else to add to this group.\n\nExamples of promoting the model names (3) are:\n\n- Using the names within project documentation and contributing guides (see also [Standard Base Documentation](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md)).\n- Labelling projects with the names in an [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md).\n- Presenting the names as a menu of adoption options for new InnerSource projects.\n- Including the names and models in any internal InnerSource training or promotion.\n\n## Resulting Context\n\n- Cross team communication occurs efficiently without confusion using terms that are universally understood and centrally documented.\n- Organisation leaders understand the nuances within practising InnerSource and make better informed and more precise decisions that are easier to communicate.\n- Increased standardisation of InnerSource practices within the organisation as the named and documented building blocks are used by teams as a menu for adoption.\n- Teams can adopt InnerSource best practices in a step-by-step way which makes adoption easier and less intimidating.\n\n## Known Instances\n\n![InnerSource Pyramid used by Flutter Entertainment](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/flutter-pyramid.svg)\n\nFlutter Entertainment define an [InnerSource Pyramid](https://innersource.flutter.com/how/) to describe 3 different InnerSource operating models: Readable Source, Guest Contributions and Maintainers in Multiple Teams. Each name is centrally documented. The use of these names is encouraged via repeated usage, direct training and categorisation of each InnerSource project.\n\n## Status\n\nStructured\n\n## Authors\n\n- Isabel Drost-Fromm\n- Rob Tuley\n",
    "title": "Transparent Governance Levels",
    "patlet": "Several teams are using different InnerSource patterns and all calling it \"InnerSource\", so the term is not precise enough to usefully describe a set of working practices without confusion.\n\nEstabilishing a more accurate common language that is understood across all teams allows anyone to communicate intent or set expectations efficiently without ambiguity.",
    "problem": "Several teams are using InnerSource practices. However the degree to which they welcome contributions and give equal collaboration rights to contributors differ. Despite these differences, all teams refer to their way of working as \"InnerSource\" without any additional qualifiers.\n\nThe result is confusion and frustration when teams collaborate as the expectation of what InnerSource means in practice is different in each team. This confusion also affects strategy planning and decisions on future InnerSource intent as the term is too vague which leads to long discussions and time lost on clarifications.",
    "stories": "",
    "context": "- InnerSource concepts are established within an organisation with multiple projects and teams adopting InnerSource.\n- Internal InnerSource practices are not prescribed in detail.\n- Teams/projects have the autonomy to optimise for their local circumstances.",
    "forces": "- Projects adopt different InnerSource patterns and practices to optimise for their context.\n- Users want clarity on the level of influence they can gain in an InnerSource project when deciding whether or how to use it.\n- Leaders want clarity on InnerSource project intentions to understand the expected cost and benefits.\n- Writing a detailed description of a set of InnerSource practices requires significant effort.",
    "solution": "The solution is to create a universally understood language to describe the InnerSource operating models that are used in your organisation.\n\nWe define **InnerSource operating model** as a description of how much influence the core development team of a project ist willing to share with contributing teams. Or in other terms, the level of influence a contributing team can gain in the respective project.\n\nThe shared language for these InnerSource operating models can be established with these steps:\n\n1. Identify the common recurring InnerSource operating models that exist in your teams and projects.\n2. Document each model in detail, and give each a distinctive name.\n3. Promote the use of these names to describe projects until the name's meaning is understood across the whole organisation.\n\nExamples of common InnerSource operating models (1) are:\n\n- **Bug Reports and Issues Welcome**: People outside the core development team may use the code. They can submit feature requests and bug reports for things they would like to see changed.\n- **Contributions Welcome**: People outside the core development team may use the code. They can also make modifications and submit them to core team for inclusion.\n- **Shared Ownership**: Members of different teams collaborate on the project as equal peers. Everyone has the ability to merge code. Everyone has an equal say on the project direction. Everyone has an equal say in who else to add to this group.\n\nExamples of promoting the model names (3) are:\n\n- Using the names within project documentation and contributing guides (see also [Standard Base Documentation](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md)).\n- Labelling projects with the names in an [InnerSource Portal](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/innersource-portal.md).\n- Presenting the names as a menu of adoption options for new InnerSource projects.\n- Including the names and models in any internal InnerSource training or promotion.",
    "resulting_context": "- Cross team communication occurs efficiently without confusion using terms that are universally understood and centrally documented.\n- Organisation leaders understand the nuances within practising InnerSource and make better informed and more precise decisions that are easier to communicate.\n- Increased standardisation of InnerSource practices within the organisation as the named and documented building blocks are used by teams as a menu for adoption.\n- Teams can adopt InnerSource best practices in a step-by-step way which makes adoption easier and less intimidating.",
    "known_instances": "![InnerSource Pyramid used by Flutter Entertainment](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/flutter-pyramid.svg)\n\nFlutter Entertainment define an [InnerSource Pyramid](https://innersource.flutter.com/how/) to describe 3 different InnerSource operating models: Readable Source, Guest Contributions and Maintainers in Multiple Teams. Each name is centrally documented. The use of these names is encouraged via repeated usage, direct training and categorisation of each InnerSource project.",
    "status": "Structured",
    "authors": "- Isabel Drost-Fromm\n- Rob Tuley",
    "slug": "governance-levels"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/good-first-project.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nGood First Project\n\n## Patlet\n\nAn InnerSource program has been launched at an organization, and to get off to a successful start it requires some good first projects that lend themselves to InnerSource-style development. Assessing the InnerSource-readiness (fitness) of the candidate projects can help in selecting projects that have the potential to help demonstrate the power of InnerSource.\n\n## Problem\n\nWhen launching an InnerSource program, it is essential to convince the skeptics about the utility of InnerSource (see the [Start as Experiment](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/start-as-experiment.md) pattern).\n\nWhile any project has the potential to benefit from being developed in InnerSource style, some are more suitable candidates than others. But how do you find the  projects that have the best chance to succeed as InnerSource projects?\n\nMoreover, while previous works focused on the criteria for readiness for InnerSource adoption at an organizational level, there seems to be no concise and actionable guideline for assessing the InnerSource-readiness for individual projects.\n\n## Context\n\n- An organization is starting or is in the early phase of InnerSource adoption, with a lot of skepticism about whether or not it'll work.\n- Selecting an inappropriate pilot project might lead to failure of the entire initiative (see the [Start as Experiment](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/start-as-experiment.md) pattern).\n- Otherwise, a team might be planning to start an InnerSource project but they do not know how prepared they are and if the project they are putting forward is appropriate or not.\n\n## Forces\n\n- Lack of knowledge about which projects stand to benefit the most from InnerSource development.\n- The team might think they are prepared for InnerSource, but might not have an idea about what challenges lie ahead and how prepared they actually are.\n- Unsure if the tools used by the project and the organizational processes are conducive to InnerSource style development.\n\n## Solutions\n\nThis pattern presents a framework (_Project-Process-People_ model) and an _accompanying tool_ as one specific implementation of the framework for identifying the _fitness_ of an InnerSource project. The framework is based on prior work by [Klaas-Jan Stol and Brian Fitzgerald](https://ulir.ul.ie/bitstream/handle/10344/4443/Stol_2014_inner.pdf) and [Silona Bonewald](https://innersourcecommons.org/learn/books/understanding-the-innersource-checklist/), and helps to find promising candidate InnerSource projects by assessing their InnerSource-readiness.\n\nWe hypothesize that the _fitness_ of a project can be measured by examining the characteristics of the project, the tools used and the organizational practices, and the readiness of the team in-charge, which we call the  _Project-Process-People model_. We suggest two sub-factors within each which overall provides __six__ dimensions to measure the fitness of candidate projects.\n\n### List of factors to assess InnerSource Fitness\n\n1. __Project Compatibility__\n    - _Seed Product_ -> Do the project characteristics make it suitable for InnerSource style development?\n    - _Multiple Potential Stakeholders_ -> Is the project likely to attract developers from different teams and build a community around the project?\n2. __Process Compatibility__\n    - _Appropriate Tools and Practices_ -> Do project practices facilitate contributions from outsiders and are the tools used in the project too specific and need to learned?\n    - _Ease of contribution_ -> Are the required ancillary resources set up and is the code modular enough to facilitate contribution?\n3. __People Compatibility__\n    - _Team Readiness for InnerSource_ -> Are the team members aware of and ready for the challenges of maintaining an InnerSource project?\n    - _Management Support_ -> Is the management willing to support the developers working on the project and the initiative in general?\n\n### Reference Implementation\n\nThe [InnerSource Project Fitness Tracker](https://github.com/tapjdey/InnerSource_Project_Fitness) is one specific implementation of this pattern. It helps estimating the _fitness_ of a candidate project along the six dimensions explained above, and presents an aggregate score which is the weighted sum of the scores for these dimensions. (As an side: Weights are determined by how many people considered a characteristic important in the [InnerSource Survey 2020](https://tapjdey.github.io/InnerSource_Survey_2020/index.html)).\n\nThis [demo video](https://imgur.com/a/wO4EyJj) shows the operation of the tool mentioned above.\n\n## Resulting Context\n\nUsing the framework helps to assess the InnerSource-readiness of individual projects.\n\nThe _fitness score_ of a project can be used as an indication about its suitability for InnerSource style development, which can help in selecting the most appropriate candidate projects. By choosing projects with higher chances of InnerSource success, you also increase the chances of the overall InnerSource program to be successful.\n\nThe questionnaire presented in the tool also serves as a de-facto guide as to which aspects need attention for making a project better suited for InnerSource style development.\n\n## Rationale\n\nThe two most important works in this context are by [Klaas-Jan Stol and Brian Fitzgerald](https://ulir.ul.ie/bitstream/handle/10344/4443/Stol_2014_inner.pdf) and [Silona Bonewald](https://innersourcecommons.org/learn/books/understanding-the-innersource-checklist/).\n\nIn their work, _Stol and Fitzgerald_ presented a set of nine key factors that are important for organizations to consider when adopting inner source. However, that model looked at an organization as a whole, and while a number of organizational characteristics are applicable to an individual project, some aspects are not, and some project characteristics are unaccounted for in the model. They presented three main factors: Software Product, Practices and Tools, People and Management, and three sub-factors on each of them.\n\n_Silona Bonewald_, on the other hand, presented a near-exhaustive checklist about different aspects to consider while adopting InnerSource at an organization. However, not all of them are applicable while considering an individual project. Ideas from the two works described earlier are combined in framing the pattern presented here.\n\n## Known Instances\n\nTBD\n\n## Status\n\n* Initial\n\n## Author(s)\n\n* Tapajit Dey\n* Brian Fitzgerald\n\n## Acknowledgements\n\nWillem Jiang from Huawei for the feedback on the tool and translation to Chinese.\n\n## Alias\n\n* InnerSource Project fitness\n* InnerSource-Readiness of a project\n",
    "title": "Good First Project",
    "patlet": "An InnerSource program has been launched at an organization, and to get off to a successful start it requires some good first projects that lend themselves to InnerSource-style development. Assessing the InnerSource-readiness (fitness) of the candidate projects can help in selecting projects that have the potential to help demonstrate the power of InnerSource.",
    "problem": "When launching an InnerSource program, it is essential to convince the skeptics about the utility of InnerSource (see the [Start as Experiment](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/start-as-experiment.md) pattern).\n\nWhile any project has the potential to benefit from being developed in InnerSource style, some are more suitable candidates than others. But how do you find the  projects that have the best chance to succeed as InnerSource projects?\n\nMoreover, while previous works focused on the criteria for readiness for InnerSource adoption at an organizational level, there seems to be no concise and actionable guideline for assessing the InnerSource-readiness for individual projects.",
    "context": "- An organization is starting or is in the early phase of InnerSource adoption, with a lot of skepticism about whether or not it'll work.\n- Selecting an inappropriate pilot project might lead to failure of the entire initiative (see the [Start as Experiment](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/start-as-experiment.md) pattern).\n- Otherwise, a team might be planning to start an InnerSource project but they do not know how prepared they are and if the project they are putting forward is appropriate or not.",
    "forces": "- Lack of knowledge about which projects stand to benefit the most from InnerSource development.\n- The team might think they are prepared for InnerSource, but might not have an idea about what challenges lie ahead and how prepared they actually are.\n- Unsure if the tools used by the project and the organizational processes are conducive to InnerSource style development.",
    "solutions": "This pattern presents a framework (_Project-Process-People_ model) and an _accompanying tool_ as one specific implementation of the framework for identifying the _fitness_ of an InnerSource project. The framework is based on prior work by [Klaas-Jan Stol and Brian Fitzgerald](https://ulir.ul.ie/bitstream/handle/10344/4443/Stol_2014_inner.pdf) and [Silona Bonewald](https://innersourcecommons.org/learn/books/understanding-the-innersource-checklist/), and helps to find promising candidate InnerSource projects by assessing their InnerSource-readiness.\n\nWe hypothesize that the _fitness_ of a project can be measured by examining the characteristics of the project, the tools used and the organizational practices, and the readiness of the team in-charge, which we call the  _Project-Process-People model_. We suggest two sub-factors within each which overall provides __six__ dimensions to measure the fitness of candidate projects.",
    "resulting_context": "Using the framework helps to assess the InnerSource-readiness of individual projects.\n\nThe _fitness score_ of a project can be used as an indication about its suitability for InnerSource style development, which can help in selecting the most appropriate candidate projects. By choosing projects with higher chances of InnerSource success, you also increase the chances of the overall InnerSource program to be successful.\n\nThe questionnaire presented in the tool also serves as a de-facto guide as to which aspects need attention for making a project better suited for InnerSource style development.",
    "rationale": "The two most important works in this context are by [Klaas-Jan Stol and Brian Fitzgerald](https://ulir.ul.ie/bitstream/handle/10344/4443/Stol_2014_inner.pdf) and [Silona Bonewald](https://innersourcecommons.org/learn/books/understanding-the-innersource-checklist/).\n\nIn their work, _Stol and Fitzgerald_ presented a set of nine key factors that are important for organizations to consider when adopting inner source. However, that model looked at an organization as a whole, and while a number of organizational characteristics are applicable to an individual project, some aspects are not, and some project characteristics are unaccounted for in the model. They presented three main factors: Software Product, Practices and Tools, People and Management, and three sub-factors on each of them.\n\n_Silona Bonewald_, on the other hand, presented a near-exhaustive checklist about different aspects to consider while adopting InnerSource at an organization. However, not all of them are applicable while considering an individual project. Ideas from the two works described earlier are combined in framing the pattern presented here.",
    "known_instances": "TBD",
    "status": "* Initial",
    "author(s)": "* Tapajit Dey\n* Brian Fitzgerald",
    "acknowledgements": "Willem Jiang from Huawei for the feedback on the tool and translation to Chinese.",
    "alias": "* InnerSource Project fitness\n* InnerSource-Readiness of a project",
    "slug": "good-first-project"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/explicit-shared-ownership.md",
    "stage": "1-initial",
    "markdown": "# Title\n\nExplicit Shared Ownership\n\n# Patlet\n\nA software component that several teams depend on has grown to the point where owners are no longer capable of taking full ownership. There is confusion who to involve for changes. Sharing ownership explicitly and making expected behaviour visible removes ambiguity. Writing a contributions document creates a natural way to evolve ownership.\n\n# Problem\n\nAn organisation is already using InnerSource best practices in several teams. The architecture of the software offered has grown organically.\n\nWhile talking about code ownership and accountability, teams notice that there is a component that is in a worrying state: Developed by an original team of authors it has grown it's userbase way beyond what the original team can handle. From time to time others step up to help out, however there is no formal process established. As a result, conflicts arise around who should do the work, and who should decide on project direction.\n\nSimply forking the component would lead to a lot of duplication and wasted effort. Therefore the involved teams are looking for a less intrusive solution to the issue.\n\n# Context\n\n- Teams are working independently but are providing one common platform as a service.\n\n- The software they are working on has been evolving for a long time. Engineers working on sub-modules have changed over time.\n\n- One component is in widespread use but ownership is unclear.\n\n# Forces\n\n- Ownership of one component is unclear.\n\n- There are too many teams dependent on the component to pull everyone into one single meeting to discuss ownership.\n\n- There may be people dependent on the module that are not yet known.\nThere often is fear around maintenance efforts arising from unwanted attribution to the project.\n\n# Solution\n\nUse the issue/ pull-request mechanics that work so well for code modifications to modify the way the component is developed:\n\nA volunteer creates an issue in the component's repository highlighting the apparent unclarity or even lack of ownership. Subsequently a volunteer (can be the same person) creates a suggestion for how the project should be developed going forward including a proposed list of initial [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md). This suggestion is posted to the project's documentation (e.g. it's `README.md` file) as a pull request. This pull request is left open and shared with all people affected by the change. Feedback can be given and integrated asynchronously. Development of the final state is transparent for everyone.\n\n# Resulting Context\n\nThere is an initial team of [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) committed to the component.\n\nExpectations related to collaboration are transparent for everyone involved going forward e.g. by creating [base documentation in CONTRIBUTING.md](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md).\n\nThe entire decision process backing the result is transparent and can be influenced by those affected, leading to higher buy-in for the final result. Also the argument leading to the final decisions are accessible for those new to the project.\n\nThere is a proven way to adjust the setup in the future.\n\n# Status\n\nInitial (early draft)\n\n## Authors\n\n* Isabel Drost-Fromm\n",
    "authors": "* Isabel Drost-Fromm",
    "title": "untitled",
    "slug": "explicit-shared-ownership"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/duplicated-projects.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nDuplicated Projects\n\n## Patlet\n\nTBD\n\n## Problem\n\n* Multiple teams are doing InnerSource, but they don't want to work together.\n* Multiple teams are working on the same product. How do they merge?\n\n## Story\n\ne.g. Splunk.\n\n* 4 unique products have significant overlap. Discovered after opening them up as InnerSource projects.\n* This could apply to more than just InnerSource situations\n\n## Context\n\n* Multiple teams (doing InnerSource or not) are trying to tackle the same problem.\n* Managers want to run the project in their way.\n* Manager B gets upset if something Manager A does breaks B's team.\n* It's easier to be mean when you're not face-to-face.\n\n## Forces\n\n* People don't want to lose their jobs (or reason for existence).\n* Managers can be territorial with their project.\n* People rewrite 100% rather than using the 80% that is already there (even though it would be better to InnerSource).\n* Related to the [Not Invented Here](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/64) pattern.\n* Related to the [Common Requirements](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/common-requirements.md) pattern.\n* It's like buying another company and having duplicate projects.\n\n## Solutions\n\n* We are lacking a solution of establishing a baseline (which of the 4 projects is the baseline for the merge)?\n* An open and transparent process CI/CD, requirements backlog, deployment, etc.\n* Anyone participates in the process in the same way.\n* Project lead is assisted by the former managers.\n* Move away from (benevolent) dictator (e.g. eng. manager?).  Could this be hard to achieve?\n* Experience has shown that if people are in the same room then things tend to go better.  Not so much by email/phone.  You are nicer if you see the people.\n\n## Resulting Context\n\n* Managers have been convinced to be a part of the solution.\n* Managers are bought in to a process where they have left some control but still retain influence.\n\n## Status\n\n* Initial\n",
    "title": "Duplicated Projects",
    "patlet": "TBD",
    "problem": "* Multiple teams are doing InnerSource, but they don't want to work together.\n* Multiple teams are working on the same product. How do they merge?",
    "story": "e.g. Splunk.\n\n* 4 unique products have significant overlap. Discovered after opening them up as InnerSource projects.\n* This could apply to more than just InnerSource situations",
    "context": "* Multiple teams (doing InnerSource or not) are trying to tackle the same problem.\n* Managers want to run the project in their way.\n* Manager B gets upset if something Manager A does breaks B's team.\n* It's easier to be mean when you're not face-to-face.",
    "forces": "* People don't want to lose their jobs (or reason for existence).\n* Managers can be territorial with their project.\n* People rewrite 100% rather than using the 80% that is already there (even though it would be better to InnerSource).\n* Related to the [Not Invented Here](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/64) pattern.\n* Related to the [Common Requirements](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/common-requirements.md) pattern.\n* It's like buying another company and having duplicate projects.",
    "solutions": "* We are lacking a solution of establishing a baseline (which of the 4 projects is the baseline for the merge)?\n* An open and transparent process CI/CD, requirements backlog, deployment, etc.\n* Anyone participates in the process in the same way.\n* Project lead is assisted by the former managers.\n* Move away from (benevolent) dictator (e.g. eng. manager?).  Could this be hard to achieve?\n* Experience has shown that if people are in the same room then things tend to go better.  Not so much by email/phone.  You are nicer if you see the people.",
    "resulting_context": "* Managers have been convinced to be a part of the solution.\n* Managers are bought in to a process where they have left some control but still retain influence.",
    "status": "* Initial",
    "slug": "duplicated-projects"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/discover-your-innersource.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nDiscover Your InnerSource\n\n## Patlet\n\nTBD\n\n## Also Known As\n\n* Not looking for stuff internally\n* Don't bother looking\n* Find it Inside\n\n## Context\n\n* Software component(s) are available internally but users can't easily find these.\n* This problem is more likely to occur in large, federated companies where different organizational units operate as silos.\n* Historically, the company does not have a culture of sharing code across silos.\n\n## Discussion on\n\n* Comments may appear in the timeline but not with the file once it is edited (github)?\n* https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/60\n* If only X knew what X knew; the internal search engine is bad. No one can find anything because it is difficult to add things  to the search index.\n* We have similar challenges getting data sources pulled into the search engine. PayPal is building a project called Agora to do this and they are planning to open source it.\n* Github Enterprise and npmjs have built-in searches on meta-data. Enterprise that opts into these tooling will get some of that functi\n* Software component(s) are available internally but users can't easily find these.\n* This problem is more likely to occur where there are silos in the company (e.g., larger companies; smaller companies may have fewer opportunities for reuse of internally developed software).\n* The company traditionally has been bad at sharing across silos (people don't have the culture of sharing).\n\n## Problem\n\nPeople don't bother looking for internally developed solutions - they might not find the repo at all or be aware of its existence.\n\n## Forces\n\n* No good internal search engine (or not connected to git repositories; and difficult to make this change happen)\n* Users may not know there are common places to find internally developed solutions.\n* People don't expect to find solutions internally.\n* Many silos in the company; difficult to reach the developer base across those silos (a communications problem).\n* People might not want to use internal SW because they don't believe it will be helpful\n    - might not be maintained\n    - might have poor reusability\n    - if someone put out a SW internally, the expectation is that they wouldn't have time to support it (vs. open source options)\n\n## Solution\n\nMake it easy to find the reusable code.\n\n* Pull in Repo names, descriptions and README.md files into the search engine assuming that a search engine exists. Note: a one-stop-shop kind of search engine for all relevant communication and documentation is difficult to attain. Even when using Github's enterprise offering, people often deploy additional systems like wikis to host content orthogonal to what is in the code repositories, slack channels (or IRC), mailing lists (or even nntp servers), some place to store stuff written down in office formats, search over personal e-mail etc. Several of these systems come with search built-in, but integrating this content in one search box or even just deploying a federated search engine across all sources often doesn't come off-the-shelf.\n* Implement process change to first check for internal solutions for this problem.\n* Tool with a central view (but people are more inclined to google externally than look internally)\n* Concierge service (guide) to help product people find stuff. Might not scale but could be helpful in the beginning.\n* Need some very visible lighthouse projects that start using inner source components and make positive statements about the inner source program.\n* Establish a common, asynchronous communication channel (e.g., like slack or metamorph or yammer) across team boundaries. This might not scale beyond a certain organisation size. It is possible people will start splitting this one channel into multiple channels by topic once traffic gets too high. Note: having one channel for many users of one tool might be considered an anti-pattern because they can't find it unless they already know about it.\n* Encourage (and reward) owners of reusable code to use the same search engine to continually search for products that are candidates for use and adoption of the reusable code but not currently doing so.\n* Consider creating a marketplace for marketing InnerSource programs (management can use this mechanism to know which InnerSource projects to fund, but seeing how the marketplace reacts).\n\n## Known Instances\n\nTBD\n\n## Resulting Context\n\n* Internal components are easily visible\n* Developers looking for code can search for it and find it quickly.\n* Developers are now looking internally for software components\n* Search results are combined (internal and external)\n* Process changes, establishing a common communications channel, and encouraging and rewarding owners of reusable code to use the same search engine can contribute to changing the corporate culture. Transformation begins from the grassroots but requires strategic involvement of thought leaders.\n* See [Improved Findability](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/improve-findability.md) (aka Poor Naming Conventions or Badly Named Piles) as a related pattern.\n\n## Status\n\n* Initial (brainstormed solution)\n\n## Authors\n\n* Georg Gruetter\n* Erin Bank\n* Padma Sudarsan\n* Tim Yao\n\n## Acknowledgements\n\n* Contributions from Russ Rutledge, Ofer Hermoni and Robert Hanmer\n",
    "title": "Discover Your InnerSource",
    "patlet": "TBD",
    "also_known_as": "* Not looking for stuff internally\n* Don't bother looking\n* Find it Inside",
    "context": "* Software component(s) are available internally but users can't easily find these.\n* This problem is more likely to occur in large, federated companies where different organizational units operate as silos.\n* Historically, the company does not have a culture of sharing code across silos.",
    "discussion_on": "* Comments may appear in the timeline but not with the file once it is edited (github)?\n* https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/60\n* If only X knew what X knew; the internal search engine is bad. No one can find anything because it is difficult to add things  to the search index.\n* We have similar challenges getting data sources pulled into the search engine. PayPal is building a project called Agora to do this and they are planning to open source it.\n* Github Enterprise and npmjs have built-in searches on meta-data. Enterprise that opts into these tooling will get some of that functi\n* Software component(s) are available internally but users can't easily find these.\n* This problem is more likely to occur where there are silos in the company (e.g., larger companies; smaller companies may have fewer opportunities for reuse of internally developed software).\n* The company traditionally has been bad at sharing across silos (people don't have the culture of sharing).",
    "problem": "People don't bother looking for internally developed solutions - they might not find the repo at all or be aware of its existence.",
    "forces": "* No good internal search engine (or not connected to git repositories; and difficult to make this change happen)\n* Users may not know there are common places to find internally developed solutions.\n* People don't expect to find solutions internally.\n* Many silos in the company; difficult to reach the developer base across those silos (a communications problem).\n* People might not want to use internal SW because they don't believe it will be helpful\n    - might not be maintained\n    - might have poor reusability\n    - if someone put out a SW internally, the expectation is that they wouldn't have time to support it (vs. open source options)",
    "solution": "Make it easy to find the reusable code.\n\n* Pull in Repo names, descriptions and README.md files into the search engine assuming that a search engine exists. Note: a one-stop-shop kind of search engine for all relevant communication and documentation is difficult to attain. Even when using Github's enterprise offering, people often deploy additional systems like wikis to host content orthogonal to what is in the code repositories, slack channels (or IRC), mailing lists (or even nntp servers), some place to store stuff written down in office formats, search over personal e-mail etc. Several of these systems come with search built-in, but integrating this content in one search box or even just deploying a federated search engine across all sources often doesn't come off-the-shelf.\n* Implement process change to first check for internal solutions for this problem.\n* Tool with a central view (but people are more inclined to google externally than look internally)\n* Concierge service (guide) to help product people find stuff. Might not scale but could be helpful in the beginning.\n* Need some very visible lighthouse projects that start using inner source components and make positive statements about the inner source program.\n* Establish a common, asynchronous communication channel (e.g., like slack or metamorph or yammer) across team boundaries. This might not scale beyond a certain organisation size. It is possible people will start splitting this one channel into multiple channels by topic once traffic gets too high. Note: having one channel for many users of one tool might be considered an anti-pattern because they can't find it unless they already know about it.\n* Encourage (and reward) owners of reusable code to use the same search engine to continually search for products that are candidates for use and adoption of the reusable code but not currently doing so.\n* Consider creating a marketplace for marketing InnerSource programs (management can use this mechanism to know which InnerSource projects to fund, but seeing how the marketplace reacts).",
    "known_instances": "TBD",
    "resulting_context": "* Internal components are easily visible\n* Developers looking for code can search for it and find it quickly.\n* Developers are now looking internally for software components\n* Search results are combined (internal and external)\n* Process changes, establishing a common communications channel, and encouraging and rewarding owners of reusable code to use the same search engine can contribute to changing the corporate culture. Transformation begins from the grassroots but requires strategic involvement of thought leaders.\n* See [Improved Findability](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/improve-findability.md) (aka Poor Naming Conventions or Badly Named Piles) as a related pattern.",
    "status": "* Initial (brainstormed solution)",
    "authors": "* Georg Gruetter\n* Erin Bank\n* Padma Sudarsan\n* Tim Yao",
    "acknowledgements": "* Contributions from Russ Rutledge, Ofer Hermoni and Robert Hanmer",
    "slug": "discover-your-innersource"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/developer-incentive-alignment-for-innersource-contribution.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nDeveloper Incentive Alignment for InnerSource Contribution\n\n## Patlet\n\nTBD\n\n## Problem\n\n* The organization needs to adopt a more collaborative, open source like workstyle, but its developers are not properly incentivized or extrinsically motivated to participate in the company’s InnerSource processes.\n* There is a prevailing attitude in the developer culture that helping or contributing to others' success and learning is a “time sink” or \"not my job.\"\n* Credit and kudos are not consistently shared with developers who help or contribute to others' success.\n* Prevailing developer culture is such that many believe the way up the organizational ladder - via increases in title or compensation - depends on one’s performance on quantitative metrics such as lines of code output, deadlines met, ownership of product releases or updates, and so forth.  \n* Developers aren’t moving up the ‘organizational ladder’ because it is perceived as a path toward people management and direct reports, rather than a path of deepened respect or capabilities in engineering.\n\n## Context  \n\n* There is a need to foster team-centric behaviour and limit instances of [ego-driven development](http://deliberate-software.com/ego-driven-development/) or idolizing a 'star developer.'\n* There are multiple developers within the organization or business unit with the same or related areas of expertise, such as front-end development, devops, testing, etc.\n* Mid-to-top level management either do not have a technical background or their technical backgrounds and experiences are many years out of date; organizational emphasis is therefore on quantitative output of development team.\n* The organization wants to create more alignment between work efforts and external motivation without relying directly on financial rewards or quotas.  \n* The organization is comfortable with a personnel management and/or professional development style that is organic or “bottom-up” as opposed to traditional training or development programs run through HR (even as task management or velocity is managed in a more top-down fashion).\n\n## Forces\n\n1. Existing attitudes and developer culture\n\n * Team-centric behaviour is not evident. Developers of all levels tend to focus mostly on their own contributions. When stories are assigned, work is often done ‘locally’ and not pushed up or checked in until the end of the sprint.\n * Asking developers to push code early and often is met with extreme resistance, accusations of micro-management, or claims that such a practice would slow velocity.\n * Existing practice commonly leads to duplicated work, missed requirements, or frequent gaps in the software or process.\n\n2. Need to retain developer talent\n\n * Managers focus heavily on tasks or velocity for developers rather than providing mentorship. Developers view helping or mentoring others as the job of Management, or something “I don’t get paid to do.” Career progression, or other ‘upward mobility paths’ (to receive a raise, for example) are not clearly identified in the organization.\n * Existing job descriptions, promotion tracks or compensation bands are opaque or hard to get from the organization’s HR department, resulting in a mixed understanding of job responsibilities. This puts additional pressure on performance review or improvement plans because HR, developers and managers don’t have shared a shared understanding of roles or expectations.\n * 'Home growing' developer talent - encouraging career growth within the company - is far cheaper for organizations in the long run than hiring from outside. Studies show employee retention increases as new opportunities, challenges, and paths for learning are introduced.\n\n3. Maintaining the product development lifecycle\n\n * Keeping the status quo is encouraged or reinforced with existing product/project management processes and expectations. Developers and managers are reticent to make changes for fear of putting deadlines or product/business unit goals at risk (note that these often have financial implications for the company and individual). Working on one’s own individual contributions is seen as doing one’s part to protect this lifecycle; efforts outside one’s own individual contributions is seen as disruptive.\n * Product/Business unit pressures\n * HR - existing resource allocation plans & patterns\n\n## Sketch (optional)  \n\n![Table of roles goes here]\n![or maybe the pyramid]\n\n## Solution  \n\n***Resolution to the problem***\n\n* Job Descriptions/Roles on the engineering title ladder are allocated mentorship and \"Open Source Time\" as fits their level (i.e. 0% expectation for jrs, 100% expectation for Principals)\n* Moving up the ladder requires taking on more responsibility for mentoring, reviewing code, and bringing in contributions\n* Developers may choose not to move up the ladder because of a preference for certain types of contributions (\"I like just writing code\" vs \"I want to have a bigger impact on the team\")\n* relevant Skills & experience are associated with advancing titles/roles - Moving up the ladder also requires developing the social skills necessary for mentorship\n* Job Descriptions/Roles can be easily associated/assimilated into employee review systems or other HR programs (comp/bonus structures, etc)\n\n## Resulting Context\n\n* culture has been shifted from contribution culture to learning culture\n* devs & pms believe time spent mentoring and reviewing is equally, if not more so, valuable to time spent coding\n* job descriptions include mentorship & contribution language to set expectations up front & make it easier to assess if candidates have requisite skills/experience required\n* org is retaining and better utilizing existing talent\n* devs take on professional mentorship responsibilities for their peers rather than leaving it to non-technical management\n* career progression clearly identified & understood by engs and management\n\n## Known Instances\n\nTBD\n\n## Status  \n\n* Initial (brainstormed solution)\n\n## Author\n\nJory Burson\n",
    "title": "Developer Incentive Alignment for InnerSource Contribution",
    "patlet": "TBD",
    "problem": "* The organization needs to adopt a more collaborative, open source like workstyle, but its developers are not properly incentivized or extrinsically motivated to participate in the company’s InnerSource processes.\n* There is a prevailing attitude in the developer culture that helping or contributing to others' success and learning is a “time sink” or \"not my job.\"\n* Credit and kudos are not consistently shared with developers who help or contribute to others' success.\n* Prevailing developer culture is such that many believe the way up the organizational ladder - via increases in title or compensation - depends on one’s performance on quantitative metrics such as lines of code output, deadlines met, ownership of product releases or updates, and so forth.  \n* Developers aren’t moving up the ‘organizational ladder’ because it is perceived as a path toward people management and direct reports, rather than a path of deepened respect or capabilities in engineering.",
    "context": "* There is a need to foster team-centric behaviour and limit instances of [ego-driven development](http://deliberate-software.com/ego-driven-development/) or idolizing a 'star developer.'\n* There are multiple developers within the organization or business unit with the same or related areas of expertise, such as front-end development, devops, testing, etc.\n* Mid-to-top level management either do not have a technical background or their technical backgrounds and experiences are many years out of date; organizational emphasis is therefore on quantitative output of development team.\n* The organization wants to create more alignment between work efforts and external motivation without relying directly on financial rewards or quotas.  \n* The organization is comfortable with a personnel management and/or professional development style that is organic or “bottom-up” as opposed to traditional training or development programs run through HR (even as task management or velocity is managed in a more top-down fashion).",
    "forces": "1. Existing attitudes and developer culture\n\n * Team-centric behaviour is not evident. Developers of all levels tend to focus mostly on their own contributions. When stories are assigned, work is often done ‘locally’ and not pushed up or checked in until the end of the sprint.\n * Asking developers to push code early and often is met with extreme resistance, accusations of micro-management, or claims that such a practice would slow velocity.\n * Existing practice commonly leads to duplicated work, missed requirements, or frequent gaps in the software or process.\n\n2. Need to retain developer talent\n\n * Managers focus heavily on tasks or velocity for developers rather than providing mentorship. Developers view helping or mentoring others as the job of Management, or something “I don’t get paid to do.” Career progression, or other ‘upward mobility paths’ (to receive a raise, for example) are not clearly identified in the organization.\n * Existing job descriptions, promotion tracks or compensation bands are opaque or hard to get from the organization’s HR department, resulting in a mixed understanding of job responsibilities. This puts additional pressure on performance review or improvement plans because HR, developers and managers don’t have shared a shared understanding of roles or expectations.\n * 'Home growing' developer talent - encouraging career growth within the company - is far cheaper for organizations in the long run than hiring from outside. Studies show employee retention increases as new opportunities, challenges, and paths for learning are introduced.\n\n3. Maintaining the product development lifecycle\n\n * Keeping the status quo is encouraged or reinforced with existing product/project management processes and expectations. Developers and managers are reticent to make changes for fear of putting deadlines or product/business unit goals at risk (note that these often have financial implications for the company and individual). Working on one’s own individual contributions is seen as doing one’s part to protect this lifecycle; efforts outside one’s own individual contributions is seen as disruptive.\n * Product/Business unit pressures\n * HR - existing resource allocation plans & patterns",
    "sketch_(optional)": "![Table of roles goes here]\n![or maybe the pyramid]",
    "solution": "***Resolution to the problem***\n\n* Job Descriptions/Roles on the engineering title ladder are allocated mentorship and \"Open Source Time\" as fits their level (i.e. 0% expectation for jrs, 100% expectation for Principals)\n* Moving up the ladder requires taking on more responsibility for mentoring, reviewing code, and bringing in contributions\n* Developers may choose not to move up the ladder because of a preference for certain types of contributions (\"I like just writing code\" vs \"I want to have a bigger impact on the team\")\n* relevant Skills & experience are associated with advancing titles/roles - Moving up the ladder also requires developing the social skills necessary for mentorship\n* Job Descriptions/Roles can be easily associated/assimilated into employee review systems or other HR programs (comp/bonus structures, etc)",
    "resulting_context": "* culture has been shifted from contribution culture to learning culture\n* devs & pms believe time spent mentoring and reviewing is equally, if not more so, valuable to time spent coding\n* job descriptions include mentorship & contribution language to set expectations up front & make it easier to assess if candidates have requisite skills/experience required\n* org is retaining and better utilizing existing talent\n* devs take on professional mentorship responsibilities for their peers rather than leaving it to non-technical management\n* career progression clearly identified & understood by engs and management",
    "known_instances": "TBD",
    "status": "* Initial (brainstormed solution)",
    "author": "Jory Burson",
    "slug": "developer-incentive-alignment-for-innersource-contribution"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/defeat-hierarchical-constraints.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nDefeat Hierarchical Constraints\n\n## Patlet\n\nTBD\n\n## Problem\n\nCorporate culture constrains people to hierarchical goals.  \n\n## Context\n\nIn strongly hierarchical organizations, developers want to please their managers. Their managers may not support their people spending time on inner sourcing even if someone higher up does. In some countries, there is a strong cultural force to respect and obey authority.  \n\n## Forces\n\nTo make inner sourcing work, you need to allow some developers outside your org to participate in your development.\nManagers have deadlines and they don’t see how having their people will help them achieve *their* goals and objectives. They may feel it slows them down.\nEven if there is nominal higher support for the goals, developers may still feel afraid to take that step.  \n\n## Solutions\n\nTBD\n\n## Resulting Context\n\nDevelopers feel empowered to spend at least 20% of their time on inner sourcing  \n\n## Status\n\n* Initial (Donut)\n\n## Author(s)\n",
    "title": "Defeat Hierarchical Constraints",
    "patlet": "TBD",
    "problem": "Corporate culture constrains people to hierarchical goals.",
    "context": "In strongly hierarchical organizations, developers want to please their managers. Their managers may not support their people spending time on inner sourcing even if someone higher up does. In some countries, there is a strong cultural force to respect and obey authority.",
    "forces": "To make inner sourcing work, you need to allow some developers outside your org to participate in your development.\nManagers have deadlines and they don’t see how having their people will help them achieve *their* goals and objectives. They may feel it slows them down.\nEven if there is nominal higher support for the goals, developers may still feel afraid to take that step.",
    "solutions": "TBD",
    "resulting_context": "Developers feel empowered to spend at least 20% of their time on inner sourcing",
    "status": "* Initial (Donut)",
    "author(s)": "",
    "slug": "defeat-hierarchical-constraints"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/cultural-change-through-hiring.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nCulture Change through Hiring\n\n## Patlet\n\nTBD\n\n## Problem\n\nGetting any sort of ground swell behind an InnerSource project or program is hard when very few people in the company have experienced and internalized the InnerSource ways of working.\n\nWhile training existing staff is often part of an InnerSource program, it does take a long time to get to a critical mass of people with hands-own experience in InnerSource.\n\nThe problem is made harder by a lack of collaboration between Engineering and the Recruitment team (HR), as InnerSource or Open Source skills aren't part of the interview process nor the personal development process of the employees.\n\n## Context\n\n> Where does the problem exist? What are the pre-conditions? **Unchangeable** before the solution goes into place. The content here is often tied to the applicability of the pattern for other readers: \"Do I have this same particular situation?\"\n\n* Engineering and HR collaborate when hiring new engineers\n* Work done on InnerSource was not part of official performance review because HR was not on board.\n* some InnerSource projects are already happening but HR is not aware of those projects or considering the required InnerSource skills while recruiting.\n\n## Forces\n\n> What makes the problem difficult? What are the trade-offs? These are constraints that **can be changed** at a cost. The solution might change one or more of these forces in order to solve the problem, while also in-turn changing the context.\n\n* InnerSource projects have a hard time finding employees who already know InnerSource or Open Source methodologies.\n* InnerSource as a concept is not well known\n\n## Solutions\n\n* Engineering and HR make a concerted effort to identify the skills that they want to recruit for in new employees and train the existing staff in\n* A handful of key-hires need to be identified, to act as evangelists for the InnerSource way of working\n\n## Resulting Context\n\n* InnerSource intentionally looped in during all HR interactions.\n* Engineering is looping in HR both in recruiting and retention phase of employee engagement.\n\n## Status\n\nInitial (Extracted from [this issue](https://github.com/InnerSourceCommons/InnerSourcePatterns/issues/37) and associated PR)\n\n## Appendix\n\nThese are notes from the old pattern that we can work into the pattern structure above, if possible. Otherwise we will delete these when the PR gets merged.\n\n### Benefits\n\n* InnerSource can be a selling point for a company\n* InnerSource is going, but we are not intentionally leveraging in HR strategy.\n* 10% time is not taken up and used; sometimes culture is only taken up by hiring the right people\n\n### Notes\n\n* Ramping up InnerSource; semi-existent\n* On-boarding guidelines\n* HR is affected by InnerSource\n  * Problem: How to sustain the InnerSource culture, even once new hires come in. How to keep existing employees who support and encourage InnerSource? Filling the ranks with new InnerSource-friendly and InnerSource-excited hires can be difficult.\n* Company perception is drab and boring engineering culture; large company\n  * Company is not attractive, or people are leaving, or hiring is difficult.\n  * Company has trouble attracting developers who are interested in open source and InnerSource.\n* Keep everyone updated on how the communities work, both from culture and technology perspective.\n",
    "title": "Culture Change through Hiring",
    "patlet": "TBD",
    "problem": "Getting any sort of ground swell behind an InnerSource project or program is hard when very few people in the company have experienced and internalized the InnerSource ways of working.\n\nWhile training existing staff is often part of an InnerSource program, it does take a long time to get to a critical mass of people with hands-own experience in InnerSource.\n\nThe problem is made harder by a lack of collaboration between Engineering and the Recruitment team (HR), as InnerSource or Open Source skills aren't part of the interview process nor the personal development process of the employees.",
    "context": "> Where does the problem exist? What are the pre-conditions? **Unchangeable** before the solution goes into place. The content here is often tied to the applicability of the pattern for other readers: \"Do I have this same particular situation?\"\n\n* Engineering and HR collaborate when hiring new engineers\n* Work done on InnerSource was not part of official performance review because HR was not on board.\n* some InnerSource projects are already happening but HR is not aware of those projects or considering the required InnerSource skills while recruiting.",
    "forces": "> What makes the problem difficult? What are the trade-offs? These are constraints that **can be changed** at a cost. The solution might change one or more of these forces in order to solve the problem, while also in-turn changing the context.\n\n* InnerSource projects have a hard time finding employees who already know InnerSource or Open Source methodologies.\n* InnerSource as a concept is not well known",
    "solutions": "* Engineering and HR make a concerted effort to identify the skills that they want to recruit for in new employees and train the existing staff in\n* A handful of key-hires need to be identified, to act as evangelists for the InnerSource way of working",
    "resulting_context": "* InnerSource intentionally looped in during all HR interactions.\n* Engineering is looping in HR both in recruiting and retention phase of employee engagement.",
    "status": "Initial (Extracted from [this issue](https://github.com/InnerSourceCommons/InnerSourcePatterns/issues/37) and associated PR)",
    "appendix": "These are notes from the old pattern that we can work into the pattern structure above, if possible. Otherwise we will delete these when the PR gets merged.",
    "slug": "cultural-change-through-hiring"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/crossing-chasm.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nCrossing the InnerSource Chasm\n\n## Patlet\n\nEarly InnerSource experiments have been successful. Methods that were successful\nconvincing early teams stop working though when scaling the initiative. This\nchasm can be crossed by using different methods to reach people at different\nstages of the innovation curve.\n\n## Problem\n\nOften InnerSource programs [start as experiments](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/start-as-experiment.md). From there\nreaching early adopters and visionaries typically is easy. However the methods\nused to reach these innovation friendly associates typically stop working when\ntrying to scale the initiative to pragmatists, conservatives or even sceptics.\nAs a result scaling stalls and the entire initiative cannot live up to its\npotential.\n\n## Context\n\nA corporation with teams on a wide spectrum of innovation friendliness has\nstared an InnerSource initiative. Goals are set, early experiments were\nsuccessful, some teams are successfully using the new collaboration best\npractices.\n\nHowever there are teams which are less innovation friendly. Maybe they are more\nrisk averse than others. Maybe they prefer stable processes so they can focus on\ntheir daily engineering challenges. Maybe they prefer to follow a proven path\ninstead of running into all of the hurdles that early adopters run into.\n\n## Forces\n\n- The goal is to increase collaboration, reduce duplication, increase knowledge\n  sharing.\n- Some teams already adopted a lot of InnerSource best practices, often when\n  doing so they had to fix hurdles within the organisation when adopting a more\ncollaborative way of working.\n- Some associates refuse to invest time in experimenting with new ways of\n  working, preferring a stable environment.\n- There is too much time to get everyone on board individually.\n- Depending on where associates are on the innovation curve they are willing to\n  invest different amounts of time to master a new way of working.\n\n## Solution\n\nThe [InnerSource guidance group](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/innersource-guidance-group.md) should make different offers for\nmastering InnerSource depending on where on the innovation scale employees are:\n\n### Steps for reaching innovators\n\n* Meet with people in person, in 1-on-1 settings, choose those in favour and\nthose against and those interested in the topic to create a first network.\n* Start with InnerSource pilots.\n* Create a community of practice that operates according to the principles that\nyou want to establish.\n* Bring innovators together so they can support each other.\n* Write down everything that you discuss in person or in calls so others that\nlack the time to join those calls can follow along, provide their input and you\nhave a document that you can share with individuals following your trail.\n\nWrite down solutions to any problems you find along the way and share those\nwritten solutions with people following your trail.\n\n### Steps for reaching early adopters/ visionaries\n\n* Share results and learnings form retrospectives of InnerSource pilots.\n* Share external material (bonus points if that is material that colleagues\ncreated earlier: talks, blog articles, book chapters, magazine articles, videos\netc.)\n* Co-create a document of shared [InnerSource Principles](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/document-your-guiding-principles.md).\n\n### Steps for pragmatists\n\n* Offer in-house and online training.\n* Establish local experts on topics in the teams you want to reach.\n* Provide an InnerSource strategy that is backed by higher level management.\n* Provide InnerSource cheat sheet in particular for those new to the company.\n* Provide teams with a self check to scale the initiative (see [Maturity Model](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/maturity-model.md).\n\n### Steps for reaching conservatives\n\n* Include InnerSource training material in mandatory training courses for new\nhires.\n* Integrate any tooling and any experiments you have run into established\ncompany structures (e.g. GitHub/ GitLab instances are under a regular plan,\naccounts are easy to create and integrated with e.g. corporate single sign-on\nsolutions, in-house support can provide help for these tools).\n* Provide low effort opportunities for learning (e.g. put little riddles in your\ncoffee kitchen or whatever the digital alternative is for your company.)\n* Ship bite sized learning pieces to inboxes.\n* Pull in external expertise - sometimes in-house expertise counts much less\nthan external statements.\n\n### Steps for laggards\n\n* Incorporate InnerSource into career competencies description.\n\n## Resulting Context\n\n* The InnerSource initiative can reach teams with various innovation\npreferences.\n* Overall InnerSource adoption improves.\n* Friction between teams decreases due to a common understanding.\n\n## Known Instances\n\nTBD\n\n## Status\n\nInitial\n\n## References\n\n- Book: [Crossing the Chasm](https://www.goodreads.com/book/show/61329.Crossing_the_Chasm) - Geoffrey A. Moore, Regis McKenna\n- [Making InnerSource & Developer Experience Real at one of Canada's Top 5 Banks](https://youtu.be/QbJ4VFk8DwA?t=549) - GitHub Universe 2021 - Anthony Vacca\n",
    "title": "Crossing the InnerSource Chasm",
    "patlet": "Early InnerSource experiments have been successful. Methods that were successful\nconvincing early teams stop working though when scaling the initiative. This\nchasm can be crossed by using different methods to reach people at different\nstages of the innovation curve.",
    "problem": "Often InnerSource programs [start as experiments](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/start-as-experiment.md). From there\nreaching early adopters and visionaries typically is easy. However the methods\nused to reach these innovation friendly associates typically stop working when\ntrying to scale the initiative to pragmatists, conservatives or even sceptics.\nAs a result scaling stalls and the entire initiative cannot live up to its\npotential.",
    "context": "A corporation with teams on a wide spectrum of innovation friendliness has\nstared an InnerSource initiative. Goals are set, early experiments were\nsuccessful, some teams are successfully using the new collaboration best\npractices.\n\nHowever there are teams which are less innovation friendly. Maybe they are more\nrisk averse than others. Maybe they prefer stable processes so they can focus on\ntheir daily engineering challenges. Maybe they prefer to follow a proven path\ninstead of running into all of the hurdles that early adopters run into.",
    "forces": "- The goal is to increase collaboration, reduce duplication, increase knowledge\n  sharing.\n- Some teams already adopted a lot of InnerSource best practices, often when\n  doing so they had to fix hurdles within the organisation when adopting a more\ncollaborative way of working.\n- Some associates refuse to invest time in experimenting with new ways of\n  working, preferring a stable environment.\n- There is too much time to get everyone on board individually.\n- Depending on where associates are on the innovation curve they are willing to\n  invest different amounts of time to master a new way of working.",
    "solution": "The [InnerSource guidance group](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/innersource-guidance-group.md) should make different offers for\nmastering InnerSource depending on where on the innovation scale employees are:",
    "resulting_context": "* The InnerSource initiative can reach teams with various innovation\npreferences.\n* Overall InnerSource adoption improves.\n* Friction between teams decreases due to a common understanding.",
    "known_instances": "TBD",
    "status": "Initial",
    "references": "- Book: [Crossing the Chasm](https://www.goodreads.com/book/show/61329.Crossing_the_Chasm) - Geoffrey A. Moore, Regis McKenna\n- [Making InnerSource & Developer Experience Real at one of Canada's Top 5 Banks](https://youtu.be/QbJ4VFk8DwA?t=549) - GitHub Universe 2021 - Anthony Vacca",
    "slug": "crossing-chasm"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/contained-innersource.md",
    "stage": "1-initial",
    "markdown": "## Title  \n\nContained InnerSource\n\n## Patlet\n\nApply InnerSource methods to facilitate collaboration in a cross divisional project but don't invest in soliciting contributions from outside of that project.\n\n## Problem  \n\nTraditional development practices do not work as effectively for cross divisional projects as do InnerSource style practices. However, Management does not support adopting InnerSource practices because it regards efforts for soliciting and facilitating contributions from outside of the project as detrimental for the required efficiency.\n\n## Context\n\n* The company plans to develop a new software-intensive product; multiple business units (BUs) are involved in the development of this product\n* There is not one single BU which has the required resources or knowledge to do the development on its own.\n* An InnerSource program and required tools exist.\n* The InnerSource program advocates using the full spectrum of InnerSource practices (we call this _Full Scale InnerSource_ for the purposes of this pattern).\n\n## Forces  \n\n* The product's importance to company revenue and the committed feature content and dates require a development paradigm that provides known, stable development resources (headcount).\n* _Full Scale InnerSource_ includes substantial effort for soliciting and managing contributions as well as onboarding new contributors, which is hard to plan for and may have some effect on the ability to control the timeline for completion and deployment.\n\n## Solution\n\nThe BUs involved in the development of the new product each dedicate development resources to develop the new product, apply the InnerSource working model and adopt InnerSource tooling to facilitate collaborative development but limit the scope of InnerSource practices to the project. No effort will be spent on facilitating and managing contributions from outside of the project.\n\nThe application of InnerSource is _contained_ to the project. The project may share the developed artifacts outside the project but is not required to do so.\n\n## Resulting Context\n\n_Contained InnerSource_ effectively allows and facilitates the\ndevelopment collaboration of multiple BUs where existing traditional development infrastructure and processes would not have worked efficiently.\n\nProduct development can be successfully completed. Even though _Full Scale InnerSource_ was not implemented and the full benefits from InnerSource practices, such as exemplary documentation which facilitates reuse beyond the project context, are not realized, the project's success still achieves several benefits that wouldn't have been possible through traditional development. In addition, it lends credibility to the concept of InnerSource.\n\n## Known Instances\n\n* Large Company\n\n## Status  \n\n* Initial\n\n## Author\n\n* Tim Yao\n* Georg Grütter\n",
    "title": "Contained InnerSource",
    "patlet": "Apply InnerSource methods to facilitate collaboration in a cross divisional project but don't invest in soliciting contributions from outside of that project.",
    "problem": "Traditional development practices do not work as effectively for cross divisional projects as do InnerSource style practices. However, Management does not support adopting InnerSource practices because it regards efforts for soliciting and facilitating contributions from outside of the project as detrimental for the required efficiency.",
    "context": "* The company plans to develop a new software-intensive product; multiple business units (BUs) are involved in the development of this product\n* There is not one single BU which has the required resources or knowledge to do the development on its own.\n* An InnerSource program and required tools exist.\n* The InnerSource program advocates using the full spectrum of InnerSource practices (we call this _Full Scale InnerSource_ for the purposes of this pattern).",
    "forces": "* The product's importance to company revenue and the committed feature content and dates require a development paradigm that provides known, stable development resources (headcount).\n* _Full Scale InnerSource_ includes substantial effort for soliciting and managing contributions as well as onboarding new contributors, which is hard to plan for and may have some effect on the ability to control the timeline for completion and deployment.",
    "solution": "The BUs involved in the development of the new product each dedicate development resources to develop the new product, apply the InnerSource working model and adopt InnerSource tooling to facilitate collaborative development but limit the scope of InnerSource practices to the project. No effort will be spent on facilitating and managing contributions from outside of the project.\n\nThe application of InnerSource is _contained_ to the project. The project may share the developed artifacts outside the project but is not required to do so.",
    "resulting_context": "_Contained InnerSource_ effectively allows and facilitates the\ndevelopment collaboration of multiple BUs where existing traditional development infrastructure and processes would not have worked efficiently.\n\nProduct development can be successfully completed. Even though _Full Scale InnerSource_ was not implemented and the full benefits from InnerSource practices, such as exemplary documentation which facilitates reuse beyond the project context, are not realized, the project's success still achieves several benefits that wouldn't have been possible through traditional development. In addition, it lends credibility to the concept of InnerSource.",
    "known_instances": "* Large Company",
    "status": "* Initial",
    "author": "* Tim Yao\n* Georg Grütter",
    "slug": "contained-innersource"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/concept-anchor.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nConcept Anchor\n\n## Alias\n\nExplaining InnerSource to Management by anchoring it to Agile / DevOps / Lean\n\n## Patlet\n\nThose wanting to bring InnerSource to organizations have difficulty starting a discussion with management. This can sometimes be made easier by anchoring InnerSource to more well known concepts such as Agile / DevOps / Lean.\n\n## Problem\n\nOften InnerSource is a term that's novel to organizations, making it often difficult to start a conversation with management about adopting InnerSource.\n\n## Context\n\nAn individual sees an opportunity for InnerSource to make an impact within an organization. They would like to discuss InnerSource with management. Being a relatively traditional and bureaucratic company, it is difficult to broach the subject of InnerSource with management as they are reluctant to engage on a topic that they've neither heard of nor know anything about.\n\nThese organizations might have an existing strategy, such as Agile, Lean, or DevOps transformation. To gain mindshare, it might be useful to start with these existing, well known concepts and build InnerSource on top of these concepts.\n\n## Forces\n\n* Management are reluctant to talk to you unless you can tie projects in to an existing corporate strategy.\n* Starting to explain InnerSource may be difficult unless one starts with a point decision makers are familiar with.\n* Agile/DevOps/Lean have already been heavily marketed and are commonly discussed terms in corporations, conferences, magazines etc.\n\n## Solutions\n\n### Agile\n\nThere are several approaches that can be taken in the context of Agile depending on who's listening. The following main concepts are from [Wikipedia](https://en.wikipedia.org/wiki/Agile_software_development)\n\n* _Incremental and evolutionary processes_ - Submitting pull requests for early feedback, or creating an issue for early stakeholder discussion aids this process, allowing ideas to be shaped and defined in the very early conceptual stages, thus being able to nourish good ideas and filter out unfeasible ideas before there are any significant costs associated with them.\n* _Efficient and face-to-face communication_ - Many enterprises still implement collaboration models centered around face to face collaboration with teams being colocated. It is possible that management may view the \"If it isn't written down and announced on the mailing list, it didn't happen\" cultural norm of IS as unnecessary. For IS to work, having communications written down is crucial.\nOne can highlight benefits to corporations from implementing IS practices.\na) Business continuity in managing \"Key man risk\"\nWhen key people depart, the knowledge does not go out of the door with them. Robust documentation including decision records/RFCs and the like capture the rationale for important project design decisions and are key to continued productivity of new employees within the scrum team.\nb) Fostering productivity\nWhile the corporation's strategy may involve colocating employees who collaborate with each other regularly, it may still be a global corporation. Robust CI/CD and documentation facilitates collaboration and productivity across time zones and geographical locations. It eliminates barriers between teams and the production environment.\n* _Quality Focus_ this is a major point for IS. Because of the expected submission by a variety of teams and individuals, extra care is taken to make sure that the submitted code is screened to be production quality. Comprehensive documentation for submitters, test coverage, CI/CD, static code analysis and other techniques are often used to screen code from strangers in the open source world, these techniques have great benefits for internal teams.\n\n#### [Modern Agile](https://modernagile.org/)\n\nThe four principles of \"Modern Agile\" can be connected easily to the goals of InnerSource practices.\n\nFor example:\n\n* **Make People Awesome**: A significant advantage of InnerSource is to promote team collaboration. The collaboration process positively exposes people, allowing everyone to know their contributions, thus encouraging them to contribute more and get recognized for it.\n* **Make Safety A Prerequisite**: Open and transparent collaboration promoted by InnerSource is a great way to encourage and demonstrate that collaboration is discussed respectfully and aimed at promoting learning.\n* **Experiment & Learn Rapidly**: Experimentation and learning are in the essence of the open source model and naturally are a fundamental part of the InnerSource. Fast development, good documentation, code reuse, and team collaboration promote experimentation and quick learning.\n* **Deliver Value Continuously**: This is a consequence of the three previous principles, and all the InnerSource work philosophy supports it.\n\n_Note: The above is just an illustration of how to explain this connection. It is by no means the only way to tie these two concepts together._\n\n#### [SCRUM](https://en.wikipedia.org/wiki/Scrum_%28software_development%29)\n\nTo shorten the example and make it more concrete for SCRUM, a popular Agile methodology, one could cite the following scenario:\nTeam A depends on Team B's code. Team A has a pressing priority for delivery, Team B has their own priorities, none of which is Team A, what to do? Using InnerSource, Team A can put the required code changes in to their own backlog and submit it to Team B, essentially removing block making things more \"Agile\".\n\n### DevOps\n\nThere is no fixed definition of DevOps but much of it is focused around integrating Software Development and other dependencies such as Operations (auxiliary support such as servers, security etc.) and other business to reduce time required to deliver value. So where Agile focuses on the actual software development, DevOps is seen to incorporate all the other areas involving delivery.\n\nOne major concept with DevOps is not to fear change, to be able to remove the risks so that experiments on the system can be comfortably performed.\n\nInnerSource helps in this process by its emphasis on a CI/CD workflow as well as a culture to automate much of the risk management and checks as possible. The more contributors there are, the more eyeballs there are. The more eye balls there are, the more diverse perspectives there are on managing risk. These diverse perspectives help the operations team design for the lowest and broadest common denominator thus improving the overall quality and experience for all.\n\n## Resulting Context\n\nManagement and newcomers to InnerSource engage in conversations around InnerSource, perceived benefits, expected difficulties, etc.\nThey are usually comparing InnerSource to previous experiences around the anchored concepts.\n\n## Status\n\n* Initial\n\nThe above are ideas for solutions to the problem that have not been tested yet.\nThis pattern does not have any Known Instances yet.\n\n## Author(s)\n\n* Mishari A. Muqbil (Zymple)\n\n## Acknowledgements\n\n* Fei Wan\n* Sebastian Spier\n* Danese Cooper\n* Johannes Tigges\n",
    "title": "Concept Anchor",
    "alias": "Explaining InnerSource to Management by anchoring it to Agile / DevOps / Lean",
    "patlet": "Those wanting to bring InnerSource to organizations have difficulty starting a discussion with management. This can sometimes be made easier by anchoring InnerSource to more well known concepts such as Agile / DevOps / Lean.",
    "problem": "Often InnerSource is a term that's novel to organizations, making it often difficult to start a conversation with management about adopting InnerSource.",
    "context": "An individual sees an opportunity for InnerSource to make an impact within an organization. They would like to discuss InnerSource with management. Being a relatively traditional and bureaucratic company, it is difficult to broach the subject of InnerSource with management as they are reluctant to engage on a topic that they've neither heard of nor know anything about.\n\nThese organizations might have an existing strategy, such as Agile, Lean, or DevOps transformation. To gain mindshare, it might be useful to start with these existing, well known concepts and build InnerSource on top of these concepts.",
    "forces": "* Management are reluctant to talk to you unless you can tie projects in to an existing corporate strategy.\n* Starting to explain InnerSource may be difficult unless one starts with a point decision makers are familiar with.\n* Agile/DevOps/Lean have already been heavily marketed and are commonly discussed terms in corporations, conferences, magazines etc.",
    "solutions": "",
    "resulting_context": "Management and newcomers to InnerSource engage in conversations around InnerSource, perceived benefits, expected difficulties, etc.\nThey are usually comparing InnerSource to previous experiences around the anchored concepts.",
    "status": "* Initial\n\nThe above are ideas for solutions to the problem that have not been tested yet.\nThis pattern does not have any Known Instances yet.",
    "author(s)": "* Mishari A. Muqbil (Zymple)",
    "acknowledgements": "* Fei Wan\n* Sebastian Spier\n* Danese Cooper\n* Johannes Tigges",
    "slug": "concept-anchor"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/code-consumers.md",
    "stage": "1-initial",
    "markdown": "# Title\n\nCode Consumers\n\n# Patlet\n\nTBD\n\n# Problem\n\nThere's several reasons why we might want to know who's using (consuming) our code. We can't do the following:\n\n* notify downstream users/projects of found (fixed?) vulnerabilities\n* audit flow of IP\n* kill off code - knowing where (or if) it is used\n* encourage others to use a project - by showing how many users there already are\n* survey users for feedback\n\n# Context\n\nThis is a general issue that affects potentially all InnerSource (and open source!) projects.\nThe act of opening code allows people to use it without letting you know.\n\n# Forces\n\n* The harder it is to download/integrate the project, the less it will be adopted (forcing people to give information when they use it adds barriers)\n* Not all projects may want you to know what they're using (tightly closed source/top secret downstream project)\n* Putting in callback/call home routines into projects may introduce distrust in downstream projects and users\n\n# Solutions\n\nThe following are potential solutions that have been proposed to this problem:\n\n* Scan all output artifacts for known signatures (manifests/npm/includes etc)\n* Voluntary disclosure/signup upon installation/using\n* Search for identifiers/markers in source control\n* Audit code clones/artifact downloads\n* Incentivise/Offer users a mailing list/update stream to which they can subscribe\n\n# Resulting Context\n\nTBD\n\n# Known Instances\n\nTBD\n\n# Authors\n\n* Georg Grütter (Robert Bosch GmbH)\n* Raimund Hook (EXFO Inc)\n* Katrina Novakovic (RedHat)\n\n# Status\n\n* Initial\n* Drafted at the 2019 Spring InnerSource Commons Summit in Galway - 10 April 2019\n",
    "title": "untitled",
    "slug": "code-consumers"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/change-the-middle-management-mindset.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nChange the Middle-Management Mindset\n\n## Patlet\n\nTBD\n\n## Problem\n\nThe InnerSource program does not live up to its expectations because middle management is reluctant to allocate resources to it. Expectations of the program are faster go-to-market, increased quality, reduced duplicative development, better integration capabilities, and increased developer satisfaction.\n\n## Context\n\n* Top down InnerSource support. Embedded in their objectives? Trickling down? Top level management has determined a new KPI around InnerSource and it is cascaded down to middle-management? No.\n    - a vacuum between top down support and the objectives for developers\n    - top down support but no one knows what that means\n* Developer wants to stand up and be a part of InnerSource projects\n* There is no incentive that fits into the middle-management objectives\n* Difficult for middle-management to understand how to enable InnerSource; how to work for controlling the direct output of one team to trying to embrace and let evolve an InnerSource community?\n* Developers contribute and PO/PM or Scrum Master finds out and puts a wall between developers and the InnerSource project\n* Middle-management to support the InnerSource program but higher-priority items keep getting in the way\n* Middle-management would rather duplicate than reuse and collaborate; rewriting the fast and easy way is prioritized over participating in a reusable collaboration.\n\n## Forces\n\n* Embedded accountability problem: middle managers cannot account for the time they spend and put it in their objectives. Need some metric to make it clear it is worthwhile. Has to become a KPI for them.\n* Organizational goals rarely happen with Middle-Management; they write their own goals (or their bosses do); otherwise incentivization happens through budget. Centralized incentivization is very difficult (their other goals will suffer). KPIs tied to people's bottom line can be effective.\n* Educational component: propensity is to blame evil middle-management; they may not know how it works and need to understand it. What benefit they will have for having their people involved in InnerSource?\n* Managers are afraid of having people stolen from them, of having priorities that aren't theirs, of becoming irrelevant.\n* Managers might fear that this will become the wild west (we're the only ones who really care)\n* How to manage priorities in such a bazaar?\n* Middle-management lacks understanding of what InnerSource implies\n* Middle-management has the ability to learn about InnerSource (formalized training)\n* Middle-management has a perceived loss of control, as with InnerSource it is less clear to them what the developers are working on.\n\n## Sketch\n\n![How to help Middle Managers actively support InnerSource projects involving their people](http://teiru.net/images/middle_management_sketch_img_2257.jpg)\n\n## Solution\n\n* [Objectives and key results (OKR)](https://en.wikipedia.org/wiki/OKR) - bigger picture. The best tool ever to get serious traction across business organizations. We are one team; creating durable teams horizontally across Business Units (BUs). Tie middle-management into the OKRs; they can tie these into the quarterly goal (L2s) they write.\n  * *Editor note: Unclear sentence here* => (WAgile: quarterly we do big planning sessions, L2s are a quarterly goal).  Epic for a year, L2 for a quarter.\n* Similarly we have goals cascaded down from management levels. Really high level goals have no bearing on daily work of low level developers, but they have traceability to the highest. If you can have InnerSource high level goals cascaded down, you could justify the time. For this to work it is essential that those InnerSource goals don't conflict with existing goals but rather supplement and at best support them.\n* Can't get the buzz for InnerSource, but can get buzz for reuse and collaboration (and can measure and show these). Defining the EOL processes. Have incorporated these into the End of Life processes. Majority of the EOLs are due to redundancy. Can counter Middle-Management fear. Fear that they will go away; we clearly define what pieces are theirs to see if there are ways to put competing solutions together. We can EOL something and reuse/collaborate and stop wasting resources. Plays really well to management.\n\n* Find Trusted Evangelists\n* Performance measurement needs to include InnerSource\n* OKR/cascading KPIs (proven solution, known to work)\n    - OKR are bigger picture than KPIs (defined measurement)\n    - need accountability that transcends from top level goals\n    - existing goals don't have a cross-BU aspect the way InnerSource does. If we get that, then I can honestly speak to what I'm doing as an individual developer\n    - shows actual proof of top down support\n* Events like three day hackathons where the top down people tell middle-managers that their developers have three free days (middle-managers can't say they don't have support)\n    - ShipIt Day has a competitive nature (people choose the one idea that is best; everyone else walks away with nothing). Shows an appetite, but not extended out to everybody perpetually. A bit self-defeating.\n    - We have innovation days (10% time set aside on calendars, broadcast, you can participate). Choose amongst a few and you get three days to form a new team, work on things together. Hackathon for customer-facing or internal projects (prototypes). Could have an InnerSource day where the metric is: Did you work on someone else's code base? Stand it up and then it becomes available for others to use. Come over to collaborate. Opening an issue=1 point; filing a PR= 5 points; 20 points for merging a PR. Then have an award (two weeks off at Hawaii, all paid with your family; or 3-6 months off to work on your own innovative products; or 6 months part time). Every year could have 1-10 people for InnerSource awards--recognition from the CEO.\n* Fellows program if you can achieve guest [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md); you get one day a week to do cross-platform work (they report on it as a measurement of success rather than a measurement of loss). Planning is good as a part of resource allocation (might have to change expectations; we're one team, a whole group).\n* Champions program recruited from any group: could be a Middle-Management champion who has gone through the process before. See who are the new believers. Could put badges on people's names in the directory. Could do cardboard cut-outs of the champion with an InnerSource t-shirt ;-)\n\n* Built-into the whole design of InnerSource process. Delivery teams don't own any code themselves; they change code amongst the product teams. Middle Management for product teams know that requests will come in for their code to be changed. They need to have their developers provide mentorship to the delivery team developers. We have different BLs; each is represented by a delivery team. Product teams focus on larger architectural decisions, ensure that the delivery teams don't mess too much with the Products.\n    - We had globalization teams responsible for countries; had constraints (compliance) for each country. Those teams are always good about InnerSource. But for some reason they went away (restructuring).\n\n* Architectural solutions\n    - Microservices architecture: creates incentive organizationally for people to collaborate. If a bug occurs, then it creates a problem for the users.\n        - but it might be violating an SLA if the bug isn't being fixed\n        - the problem comes with feature requests or affects design (going beyond bug fixes)\n    - Developing platforms is an ideal InnerSource use case (hackathon to build applications on top)\n    - SW Architects have to have an InnerSource mentality and work together.\n        - newer companies with open source developers have that mindset\n\n* Empowering Middle Management - InnerSource readiness checklist; Middle Management should partner with their developers. What are the opportunities out there. Can we come up with justification for you to spend any time on this (how does this tie together with our KPIs)\n\n* If the organzation is doing Agile development, during release planning, time and resources for InnerSource practices should be built into sprints.\n\n* **1 step back, 3 steps forward** (aka \"the tax\"): If my team contributes, what's the tax (in terms of time/resources)?\n  * Finding opportunities for contribution\n  * Making the component reusable (if applicable)\n  * Supporting your contribution (if applicable)\n  * Aligning on engagement between teams\n  * Code submission, reviews & revision\n  * Documented communication w/consumers or host\n  * Learning new practices and tools/skills (if applicable)\n\n## Resulting Context\n\n* **Support for InnerSource is automatic, standard and expected from Middle Management.**\n* More measurement is required; measurement becomes more sophisticated (easier to measure your own stuff; harder to measure others). Keeping track of time spent in projects.\n* Better training for Middle Management in negotiation and facilitation will be needed.\n* Engineering cost vs. benefit - you will support others; other teams will allow you to make PRs and this will save you time (a balance in the long run.)\n\n## Known Instances\n\nTBD\n\n## Status\n\nInitial\n\n## Authors\n\n* Silona Bonewald\n* Max Capraro, FAU\n* Sarah Doire, CH Robinson\n* Eric Knudtson, Intuit\n* Christopher Litsinger, Comcast\n* Don McBride, Nokia\n* Stephen McCall, Fidelity Investments\n* Andrea Peruffo, Nokia\n* Tim Yao, Nokia\n",
    "title": "Change the Middle-Management Mindset",
    "patlet": "TBD",
    "problem": "The InnerSource program does not live up to its expectations because middle management is reluctant to allocate resources to it. Expectations of the program are faster go-to-market, increased quality, reduced duplicative development, better integration capabilities, and increased developer satisfaction.",
    "context": "* Top down InnerSource support. Embedded in their objectives? Trickling down? Top level management has determined a new KPI around InnerSource and it is cascaded down to middle-management? No.\n    - a vacuum between top down support and the objectives for developers\n    - top down support but no one knows what that means\n* Developer wants to stand up and be a part of InnerSource projects\n* There is no incentive that fits into the middle-management objectives\n* Difficult for middle-management to understand how to enable InnerSource; how to work for controlling the direct output of one team to trying to embrace and let evolve an InnerSource community?\n* Developers contribute and PO/PM or Scrum Master finds out and puts a wall between developers and the InnerSource project\n* Middle-management to support the InnerSource program but higher-priority items keep getting in the way\n* Middle-management would rather duplicate than reuse and collaborate; rewriting the fast and easy way is prioritized over participating in a reusable collaboration.",
    "forces": "* Embedded accountability problem: middle managers cannot account for the time they spend and put it in their objectives. Need some metric to make it clear it is worthwhile. Has to become a KPI for them.\n* Organizational goals rarely happen with Middle-Management; they write their own goals (or their bosses do); otherwise incentivization happens through budget. Centralized incentivization is very difficult (their other goals will suffer). KPIs tied to people's bottom line can be effective.\n* Educational component: propensity is to blame evil middle-management; they may not know how it works and need to understand it. What benefit they will have for having their people involved in InnerSource?\n* Managers are afraid of having people stolen from them, of having priorities that aren't theirs, of becoming irrelevant.\n* Managers might fear that this will become the wild west (we're the only ones who really care)\n* How to manage priorities in such a bazaar?\n* Middle-management lacks understanding of what InnerSource implies\n* Middle-management has the ability to learn about InnerSource (formalized training)\n* Middle-management has a perceived loss of control, as with InnerSource it is less clear to them what the developers are working on.",
    "sketch": "![How to help Middle Managers actively support InnerSource projects involving their people](http://teiru.net/images/middle_management_sketch_img_2257.jpg)",
    "solution": "* [Objectives and key results (OKR)](https://en.wikipedia.org/wiki/OKR) - bigger picture. The best tool ever to get serious traction across business organizations. We are one team; creating durable teams horizontally across Business Units (BUs). Tie middle-management into the OKRs; they can tie these into the quarterly goal (L2s) they write.\n  * *Editor note: Unclear sentence here* => (WAgile: quarterly we do big planning sessions, L2s are a quarterly goal).  Epic for a year, L2 for a quarter.\n* Similarly we have goals cascaded down from management levels. Really high level goals have no bearing on daily work of low level developers, but they have traceability to the highest. If you can have InnerSource high level goals cascaded down, you could justify the time. For this to work it is essential that those InnerSource goals don't conflict with existing goals but rather supplement and at best support them.\n* Can't get the buzz for InnerSource, but can get buzz for reuse and collaboration (and can measure and show these). Defining the EOL processes. Have incorporated these into the End of Life processes. Majority of the EOLs are due to redundancy. Can counter Middle-Management fear. Fear that they will go away; we clearly define what pieces are theirs to see if there are ways to put competing solutions together. We can EOL something and reuse/collaborate and stop wasting resources. Plays really well to management.\n\n* Find Trusted Evangelists\n* Performance measurement needs to include InnerSource\n* OKR/cascading KPIs (proven solution, known to work)\n    - OKR are bigger picture than KPIs (defined measurement)\n    - need accountability that transcends from top level goals\n    - existing goals don't have a cross-BU aspect the way InnerSource does. If we get that, then I can honestly speak to what I'm doing as an individual developer\n    - shows actual proof of top down support\n* Events like three day hackathons where the top down people tell middle-managers that their developers have three free days (middle-managers can't say they don't have support)\n    - ShipIt Day has a competitive nature (people choose the one idea that is best; everyone else walks away with nothing). Shows an appetite, but not extended out to everybody perpetually. A bit self-defeating.\n    - We have innovation days (10% time set aside on calendars, broadcast, you can participate). Choose amongst a few and you get three days to form a new team, work on things together. Hackathon for customer-facing or internal projects (prototypes). Could have an InnerSource day where the metric is: Did you work on someone else's code base? Stand it up and then it becomes available for others to use. Come over to collaborate. Opening an issue=1 point; filing a PR= 5 points; 20 points for merging a PR. Then have an award (two weeks off at Hawaii, all paid with your family; or 3-6 months off to work on your own innovative products; or 6 months part time). Every year could have 1-10 people for InnerSource awards--recognition from the CEO.\n* Fellows program if you can achieve guest [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md); you get one day a week to do cross-platform work (they report on it as a measurement of success rather than a measurement of loss). Planning is good as a part of resource allocation (might have to change expectations; we're one team, a whole group).\n* Champions program recruited from any group: could be a Middle-Management champion who has gone through the process before. See who are the new believers. Could put badges on people's names in the directory. Could do cardboard cut-outs of the champion with an InnerSource t-shirt ;-)\n\n* Built-into the whole design of InnerSource process. Delivery teams don't own any code themselves; they change code amongst the product teams. Middle Management for product teams know that requests will come in for their code to be changed. They need to have their developers provide mentorship to the delivery team developers. We have different BLs; each is represented by a delivery team. Product teams focus on larger architectural decisions, ensure that the delivery teams don't mess too much with the Products.\n    - We had globalization teams responsible for countries; had constraints (compliance) for each country. Those teams are always good about InnerSource. But for some reason they went away (restructuring).\n\n* Architectural solutions\n    - Microservices architecture: creates incentive organizationally for people to collaborate. If a bug occurs, then it creates a problem for the users.\n        - but it might be violating an SLA if the bug isn't being fixed\n        - the problem comes with feature requests or affects design (going beyond bug fixes)\n    - Developing platforms is an ideal InnerSource use case (hackathon to build applications on top)\n    - SW Architects have to have an InnerSource mentality and work together.\n        - newer companies with open source developers have that mindset\n\n* Empowering Middle Management - InnerSource readiness checklist; Middle Management should partner with their developers. What are the opportunities out there. Can we come up with justification for you to spend any time on this (how does this tie together with our KPIs)\n\n* If the organzation is doing Agile development, during release planning, time and resources for InnerSource practices should be built into sprints.\n\n* **1 step back, 3 steps forward** (aka \"the tax\"): If my team contributes, what's the tax (in terms of time/resources)?\n  * Finding opportunities for contribution\n  * Making the component reusable (if applicable)\n  * Supporting your contribution (if applicable)\n  * Aligning on engagement between teams\n  * Code submission, reviews & revision\n  * Documented communication w/consumers or host\n  * Learning new practices and tools/skills (if applicable)",
    "resulting_context": "* **Support for InnerSource is automatic, standard and expected from Middle Management.**\n* More measurement is required; measurement becomes more sophisticated (easier to measure your own stuff; harder to measure others). Keeping track of time spent in projects.\n* Better training for Middle Management in negotiation and facilitation will be needed.\n* Engineering cost vs. benefit - you will support others; other teams will allow you to make PRs and this will save you time (a balance in the long run.)",
    "known_instances": "TBD",
    "status": "Initial",
    "authors": "* Silona Bonewald\n* Max Capraro, FAU\n* Sarah Doire, CH Robinson\n* Eric Knudtson, Intuit\n* Christopher Litsinger, Comcast\n* Don McBride, Nokia\n* Stephen McCall, Fidelity Investments\n* Andrea Peruffo, Nokia\n* Tim Yao, Nokia",
    "slug": "change-the-middle-management-mindset"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/change-the-developers-mindset.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nChange the developers mindset\n\n## Patlet\n\nTBD\n\n## Problem  \n\n* How do you change developer mindset? It's difficult to push developers to do things.\n* Developers are resisting the change, they are in their comfort zone and it's hard to get them to go out of it.\n* Developer organization's maturity is high, so people are used to being in some hierarchy/rules.\n* Developers are formed in Agile, the shift from Agile is difficult.\n\n## Context\n\n* Top-down InnerSource support exists.\n* 3k population of developers.\n* Middle management is not supporting InnerSource.\n* There is already a successful InnerSource group in the early stages.\n* Code visibility is product dependent.\n\n## Forces  \n\n* Managers are previous developers, so they like the way they were promoted and they want to proceed in similar ways.\n* Managers restrict what developers can spend time on, perhaps because of KPIs they have to meet and their belief in the best way to meet those.\n* The approach to the InnerSource initiative is top down - it is supported by top management.\n* Different teams within the company decide whether and how to proceed with InnerSource.\n* No formal training exists.\n* Processes are not clearly defined.\n\n## Solution  \n\n* Show reward/recognition of the developer team that is engaged in InnerSource.\n* Formalize training.\n* Clarify more processes.\n* Give middle management specific objectives to make InnerSource successful.\n* Listen to manager complaints and fears and counter them.\n\n## Resulting Context\n\n* Software from several InnerSource projects is used across the several development teams.\n* There is improved collaboration within the same developer team (mentorship and so on).\n\n## Known Instances\n\nTBD\n\n## Status  \n\n* Initial\n\n## See Also\n\n* For improving this pattern even further, please also review these [comments from the ISC Fall Summit 2017](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/63#pullrequestreview-67393334).\n",
    "title": "Change the developers mindset",
    "patlet": "TBD",
    "problem": "* How do you change developer mindset? It's difficult to push developers to do things.\n* Developers are resisting the change, they are in their comfort zone and it's hard to get them to go out of it.\n* Developer organization's maturity is high, so people are used to being in some hierarchy/rules.\n* Developers are formed in Agile, the shift from Agile is difficult.",
    "context": "* Top-down InnerSource support exists.\n* 3k population of developers.\n* Middle management is not supporting InnerSource.\n* There is already a successful InnerSource group in the early stages.\n* Code visibility is product dependent.",
    "forces": "* Managers are previous developers, so they like the way they were promoted and they want to proceed in similar ways.\n* Managers restrict what developers can spend time on, perhaps because of KPIs they have to meet and their belief in the best way to meet those.\n* The approach to the InnerSource initiative is top down - it is supported by top management.\n* Different teams within the company decide whether and how to proceed with InnerSource.\n* No formal training exists.\n* Processes are not clearly defined.",
    "solution": "* Show reward/recognition of the developer team that is engaged in InnerSource.\n* Formalize training.\n* Clarify more processes.\n* Give middle management specific objectives to make InnerSource successful.\n* Listen to manager complaints and fears and counter them.",
    "resulting_context": "* Software from several InnerSource projects is used across the several development teams.\n* There is improved collaboration within the same developer team (mentorship and so on).",
    "known_instances": "TBD",
    "status": "* Initial",
    "see_also": "* For improving this pattern even further, please also review these [comments from the ISC Fall Summit 2017](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/63#pullrequestreview-67393334).",
    "slug": "change-the-developers-mindset"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/balancing-openness-and-security.md",
    "stage": "1-initial",
    "markdown": "# Title\n\nBalancing Openness and Security\n\n# Patlet\n\nWhile InnerSource flourishes in environments with a high degree of shared code, Security/Legal prefers the limitation of source code access to only those that need it.\nBy making Security/Legal part of the team, introducing explicit sharing levels and security policies for shared repositories, as well as defining what qualifies as sensitive information, code sharing can be facilitated while minimizing the associated risks.\n\n# Problem\n\nA successful InnerSource program needs openness and transparency (e.g. access to code, issues, documentation, and roadmap), while good security practice is to minimize access, following the [principle of least privilege][principle-of-least-privilege]. How to balance and address these seemingly contradicting requirements?\n\n# Story\n\nMost organizations developing proprietary software will have source code that they do not want to leave the organization, as this may harm their business. Think what would happen when the major competitors would have access to their latest features and would know what they are working on next.\n\nEven when the source code management system is not compromised from the outside, malicious employees or interns could leak code to the competition. Or think about gaining access to sensitive systems and services using credentials that are hard-coded in source code. Or injection of malicious code into a product’s codebase.\n\nRestricting access typically reduces the risk of these things from happening, but at the same time hampers collaboration and re-use.\n\n# Context\n\n- The organization has an InnerSource Program Office (ISPO), or a similar group, steering the success of the InnerSource initiative in the organization. One of their goals is to stimulate maximum openness and transparency in the organization.\n- The organization has a Security Team constraining unnecessary data access to prevent the organization from data-leakage and malicious code injection.\n- The Security Team, ISPO, and Engineering teams are not regularly talking with each other.\n- \"Closed Source\" is the default in the organization when creating new repositories, i.e. only the team owning/maintaining the code has access to the given repo.\n- \"Shared Source\" within the organization isn’t common practice. Organizational teams aren’t familiar with what code or information should or shouldn’t be placed in shared repositories.\n\n# Forces\n\n- A successful InnerSource program needs openness and transparency (e.g. access to code, issues, documentation, and roadmap)\n- Good security practice is to minimize access, following the [principle of least privilege][principle-of-least-privilege].\n- The Security Team is more familiar with security principles at conceptual level than security practices at operation level. Some of the security policy is good at concept but hard to execute at operation level.\n- Engineering Teams focus more on service/product development or knowledge sharing than on measures for data protection. While it is easy for Engineering Teams to decide to close or open the repository, they are usually not willing to spend time on judging how to reach a balance between both. Or to refactor their code in order to be able to share more.\n- No one-fit-all guideline or rules to judge what data or process is to be secured or not. That much depends on data sensitivity and overall security policy/infrastructure.\n\n# Solutions\n\nTo reduce the misalignment and possible misunderstanding between the teams involved, it is key to bring everybody together so that they can express their goals and concerns, and develop shared language together.\n\nAfter that they can decide as a group how to drive the execution of the specific goals, and what to do to reduce the risks that were identified.\n\n## Setup\n\nStart by bringing (representatives from) Engineering, Security, Legal, and the ISPO together, to discuss the goals of the InnerSource initiative, as well as any security concerns.\n\nSome helpful practices are:\n\n- Form an InnerSource task force with representatives from Security, Legal, Engineering, and the ISPO to align on the goals of InnerSource adoption.\n- Start with a limited scope to lower the potential security impact caused by the adoption.\n- List the security concerns and figure out mitigation plans together within the task force.\n- Clearly define the different sharing levels of repositories that you want to use in your organization *(Note: A more elaborate model is described under **Extension: An Additional Sharing Level**)*:\n    - **PUBLIC** - open source: accessible for all software developers in the world\n    - **SHARED** - inner source: accessible for all software developers in the organization\n    - **CLOSED** - closed source: only accessible to named individuals in the organization\n\n## Execution\n\nHow to allow for a greater amount of SHARED code in the organizations depends a lot on the specific business domain, related regulations, and concerns identified in the initial meetings of the InnerSource task force as mentioned above.\n\nFollowing are some practices that have proven to be helpful in reducing security concerns and allowing for a greater amount of SHARED code.\n\n### Security Training and SCM Setup\n\n- Employee training about security awareness and individual responsibility\n- Enhanced security measures or policies on source code management (SCM) system to prevent malicious access to shared repositories and reduce the impact of the same:\n    - Eliminate anonymous access to source code (all users must be logged in to your Source Code Management tool), log the access to repositories\n    - regular review by organization owners on created repositories and granted permission to organization members.\n    - Set up [Single Sign-On][single-sign-on] against your organization’s identity provider. This will automatically revoke access in case somebody leaves the organization.\n    - regular rotation of access token\n    - 2FA authentication enforced\n    - encourage the use of signed commits\n- Monitoring the source code management system for suspicious access, e.g.:\n    - access from new accounts or new devices\n    - downloading source code from new devices\n    - downloading a great amount of source code in the monitoring period.\n\n### Split out the 'secret sauce' into separate repos\n\nSeparate highly specific, differentiating code (the 'secret sauce') from code that is considered commodity in the organization (e.g. infrastructure, platform, and UI components).\nBy placing them in separate repositories, you increase your chances of offering the commodity code as SHARED repos, while the 'secret sauce' may stay CLOSED.\n\n### Prevent sensitive information in shared repositories\n\nBuild up agreed security requirement of InnerSource, such as:\n\n- No hard-coded usernames, passwords or other access/security tokens in a repository.\n- No client information in a repository.\n- Business critical algorithms may not be placed in SHARED repositories.\n- Code from SHARED repositories will not be distributed directly to Production.\n- Leverage secrets scanning tools to scan the target repositories (including code, test cases, and helper scripts) for confidential data such as accounts, passwords, access tokens, keys, and other sensitive data.\n- Keep repositories CLOSED, but expose metadata about the projects (i.e. through an [InnerSource Portal][innersource-portal]), and create some kind of access request workflow. This way you could still give people access to the code, but not open it to everyone by default. *(Note: The full model is described under **Extension: An Additional Sharing Level**)*\n\n### Extension: An Additional Sharing Level\n\nIn some cases, introducing additional sharing levels might be appropriate. Use cases include:\n\n- semi-sensitive code that can be shared with larger groups of people, but for example not with all interns and contractors.\n- Or not with people with certain nationalities or working in a specific country, in order to comply with [export control][export-control] regulations.\n- Or legacy repositories that are not (yet) ready to be made available as SHARED.\n\nWithout the additional sharing levels, (too) many repositories will end up as CLOSED in an existing organization, as all businesses will considering their code 'special', requiring extra protection and/or 'not ready' for opening up organization-wide yet (e.g. hard-coded secrets, but also technical debt, lacking documentation).\n\nAnd given discoverability is also important, adding the additional level that facilitates discoverability, but still provides a light-weight access gate could be an appropriate way to prevent too many CLOSED repositories.\n\nAs a concrete example, which allows repositories to be discovered, even though there is no organization-wide access, consider the following sharing levels:\n\n- **PUBLIC** - open source: findable and accessible for all software developers in the world\n- **INTERNAL** - inner source: findable and accessible for all software developers in the organization\n- **RESTRICTED** - restricted source: findable for all software developers in the organization, low-friction process to gain full access.\n- **CLOSED** - closed source: only accessible to named individuals and not findable via the search engine for other software developers in the organization.\n\nRepositories with RESTRICTED sharing level are included in the [central catalog][innersource-portal] and/or fed into the central search mechanism, together with their `README.md` and some meta information. Their full content however, is not accessible without following a light-weight access request process. This can for example be contacting one of the code owners or some other request mechanism described in the `README.md` file.\n\n*Notes:*\n\n- RESTRICTED repos will likely get fewer contributions due to the additional step to access the code. Where possible, INTERNAL repos should be preferred.\n- It is possible to use a tool that automatically adds the `README.md` and some other metadata to an internal repository in GitHub, allowing the GitHub search feature to include this data in the search results.\n\n# Sketch\n\n```\nExample Repository Sharing Levels\n\n\n┌──────┐\n│PUBLIC│  ───►  open source: accessible for all software developers in the world\n└──────┘\n\n┌──────┐\n│SHARED│  ───►  inner source: accessible for all software developers in the organization\n└──────┘\n\n┌──────┐\n│CLOSED│  ───►  closed source: only accessible to named individuals in the organization\n└──────┘\n```\n\n# Resulting Context\n\nInnerSource adoption in an organization will often [start as an experiment][start-as-an-experiment], with a small number of SHARED repositories.\n\nIf the task force (and with that Security and Legal) collaborate in this early phase already, they can make joint experiences with how security-related issues can be identified and addressed. This also allows the Security Teams to build up more confidence on InnerSource from a security angle.\n\nThe defined sharing levels for repositories provide guidance on what sharing level to use for what type of repository content. The increased security awareness of the engineers and more secure setup of the source code management systems increases overall software development security.\n\nWith the increased confidence and lessons learned from this experiment, the task force faces less pushback when rolling out InnerSource to more repositories.\n\nMost importantly, the changes implemented through this pattern lead to more code being shared between teams, and closed source will no longer be the obvious default.\n\n# Known Instances\n\n* Philips\n* Verizon\n\n# Status\n\n- Initial\n\n# Authors\n\n- Bart Golsteijn\n- Jack Yang\n- Sebastian Spier\n\n# Acknowledgements\n\n- Conley Rogers\n\n# Alias\n\n- Secure Discoverability\n- Secure Code Sharing\n- Secure InnerSource\n\n# Notes (internal)\n\n*These notes are meant for internal use within the InnerSource Commons Patterns Working Group only.*\n\nTo level up this pattern to a higher maturity level, please consider the following modifications:\n\n- adding short descriptions of the way that the orgs in the Known Instances are using this pattern\n- identify further Known Instances\n    - e.g. RBC - for reference see [Making InnerSource & Developer Experience Real at one of Canada's Top 5 Banks](https://www.youtube.com/watch?v=QbJ4VFk8DwA) - by Anthony Vacca\n- creating a Sketch that supports the main focus of this pattern (the current ASCII Diagram with the \"Example Repository Sharing Levels\" is mostly a placeholder)\n- The current Story section isn't really a story. Consider working this into the Problem section, and using a story that some of the Known Instances (orgs) can share.\n- Possibly renaming the pattern, if the extended content of this pattern makes that a new title more suitable.\n\n[principle-of-least-privilege]: https://en.wikipedia.org/wiki/Principle_of_least_privilege\n[single-sign-on]: https://en.wikipedia.org/wiki/Single_sign-on\n[export-control]: https://en.wikipedia.org/wiki/Export_control\n[innersource-portal]: ../2-structured/innersource-portal.md\n[start-as-an-experiment]: ../2-structured/start-as-experiment.md\n",
    "setup": "Start by bringing (representatives from) Engineering, Security, Legal, and the ISPO together, to discuss the goals of the InnerSource initiative, as well as any security concerns.\n\nSome helpful practices are:\n\n- Form an InnerSource task force with representatives from Security, Legal, Engineering, and the ISPO to align on the goals of InnerSource adoption.\n- Start with a limited scope to lower the potential security impact caused by the adoption.\n- List the security concerns and figure out mitigation plans together within the task force.\n- Clearly define the different sharing levels of repositories that you want to use in your organization *(Note: A more elaborate model is described under **Extension: An Additional Sharing Level**)*:\n    - **PUBLIC** - open source: accessible for all software developers in the world\n    - **SHARED** - inner source: accessible for all software developers in the organization\n    - **CLOSED** - closed source: only accessible to named individuals in the organization",
    "execution": "How to allow for a greater amount of SHARED code in the organizations depends a lot on the specific business domain, related regulations, and concerns identified in the initial meetings of the InnerSource task force as mentioned above.\n\nFollowing are some practices that have proven to be helpful in reducing security concerns and allowing for a greater amount of SHARED code.",
    "title": "untitled",
    "slug": "balancing-openness-and-security"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/bad-weather-for-liftoff.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nBad weather for liftoff\n\n## Patlet\n\nTBD\n\n## Problem\n\n- The team is not able to demonstrate any increases in quality or speed, because they did not adopt any of the principles of OSS development.\n- As a result, the InnerSource approach is discredited.\n\n## Context\n\n- Company A would like to start an InnerSource initiative in order to increase development speed and quality of software artifacts.\n- There are not many developers in company A, which are experienced in OSS development practices.\n- The company was not able to contract or hire an experienced InnerSourcerer.\n- Company A has put together a small team of software developers to work on a single project InnerSource style. The project has tight deadlines to meet.\n\n## Forces\n\n- By default, humans will be resistant to change if they have no compelling reason to change.\n- Pressure (in this case induced by the project being a pilot and also induced by the deadline) reduces the ability to change and explore new ways of working.\n- There is a natural tendency to pick low hanging fruits (e. g. tooling) and stop there.\n- For InnerSource to blossom, a critical mass of experienced developers which can walk the talk is required.\n\n## Solution\n\nTBD\n\n## Resulting Context\n\nTBD\n\n## Known Instances\n\nTBD\n\n## Status\n\n* Initial (Donut)\n\n## Author(s)  \n\n* Georg Grütter\n* Wyane DuPont\n* Michael Dorner\n",
    "title": "Bad weather for liftoff",
    "patlet": "TBD",
    "problem": "- The team is not able to demonstrate any increases in quality or speed, because they did not adopt any of the principles of OSS development.\n- As a result, the InnerSource approach is discredited.",
    "context": "- Company A would like to start an InnerSource initiative in order to increase development speed and quality of software artifacts.\n- There are not many developers in company A, which are experienced in OSS development practices.\n- The company was not able to contract or hire an experienced InnerSourcerer.\n- Company A has put together a small team of software developers to work on a single project InnerSource style. The project has tight deadlines to meet.",
    "forces": "- By default, humans will be resistant to change if they have no compelling reason to change.\n- Pressure (in this case induced by the project being a pilot and also induced by the deadline) reduces the ability to change and explore new ways of working.\n- There is a natural tendency to pick low hanging fruits (e. g. tooling) and stop there.\n- For InnerSource to blossom, a critical mass of experienced developers which can walk the talk is required.",
    "solution": "TBD",
    "resulting_context": "TBD",
    "known_instances": "TBD",
    "status": "* Initial (Donut)",
    "author(s)": "* Georg Grütter\n* Wyane DuPont\n* Michael Dorner",
    "slug": "bad-weather-for-liftoff"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/1-initial/assisted_compliance.md",
    "stage": "1-initial",
    "markdown": "## Title\n\nAssisted Compliance\n\n## Patlet\n\nTBD\n\n## Problem\n\nThe team that owns the repository doesn't have a `CONTRIBUTING.md`; the task force needs them to have this to submit bug fixes.\n\n## Context\n\n* Teams owning the repository are not complying with mandates for having a `CONTRIBUTING.md`\n* Compliance guys have to do a job; this is made difficult by teams resisting this.\n* Teams owning the repository resist compliance-related mandates for having a `CONTRIBUTING.md`. Having this file is mandated in support of the InnerSource program, to ensure that there is a known and stated process for submitting PRs and having them be appropriately checked and accepted.\n* Special task force for security and compliance: developers responsible for fixing these bugs across the company.\n* Negotiations are being held but they are slow and little progress is made.\n* The task force is discovering the needed information for a `CONTRIBUTING.md` as they investigate the problem.\n* There is a checklist for being InnerSource compliant.\n* There is a need to be Security compliant.\n* There may be export control compliance and legal compliance requirements; a template is provided to repository owners\n\n## Forces\n\n* Teams have been resisting this; this ends up wasting time.\n* Making documents part of the repo skeleton might be \"rubber stamping\"; better to have teams own this. So too much automation in this case is bad.\n\n## Solution\n\n* Rather than asking the resisting team to do the changes, the policing task force that discovers the lack of compliance create the documentation (in addition to negotiations)\n* Taking the contributor perspective (contributors are motivated). They are writing the `CONTRIBUTING.md` documentation for those teams resistant to doing the fixes, doing this as pull requests. The discussion is then documented in the pull request. The resisting development teams then just correct mistakes.\n* \"Let us help you be compliant\"\n* You could do an audit to assess the state of compliance. Bots could be used to check compliance; and the state of compliance could show up in an internal portal.\n\n## Resulting Context\n\n* Contributors become InnerSource champions; they both teach and guide those through the process in a gentler fashion than it would have been done before.\n* Many projects pop up without governance; the first chance to interact with them is to help them setup their `README.md` and be compliant.\n* We increase the overall compliance and the chance of getting more contributions from the outside. This ultimately helps the team in question to get more work done.\n\n## Known Instances\n\nTBD\n\n## Status\n\nInitial\n\n## Alias\n\n* Helping repo owners be compliant by writing their CONTRIBUTING.md for them as a pull request\n* Let us help you be compliant\n\n## Authors\n\n* Silona Bonewald\n* Georg Gruetter\n\n## Acknowledgements\n\n* Erin Bank\n* Tim Yao\n\n## References\n\nFor anyone starting further work on this pattern, e.g. to level it up to the next maturity, there are some interesting discussions from the time when this pattern was created.\n\n* Idea to generalize this pattern to include files such as `SUPPORT.md` and `CODE_OF_CONDUCT.md` - see [conversation](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/74#issuecomment-715498921)\n* Idea for tooling to automatically generate files such as `CONTRIBUTING.md` - see [conversation](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/74#discussion_r168596722).\n",
    "title": "Assisted Compliance",
    "patlet": "TBD",
    "problem": "The team that owns the repository doesn't have a `CONTRIBUTING.md`; the task force needs them to have this to submit bug fixes.",
    "context": "* Teams owning the repository are not complying with mandates for having a `CONTRIBUTING.md`\n* Compliance guys have to do a job; this is made difficult by teams resisting this.\n* Teams owning the repository resist compliance-related mandates for having a `CONTRIBUTING.md`. Having this file is mandated in support of the InnerSource program, to ensure that there is a known and stated process for submitting PRs and having them be appropriately checked and accepted.\n* Special task force for security and compliance: developers responsible for fixing these bugs across the company.\n* Negotiations are being held but they are slow and little progress is made.\n* The task force is discovering the needed information for a `CONTRIBUTING.md` as they investigate the problem.\n* There is a checklist for being InnerSource compliant.\n* There is a need to be Security compliant.\n* There may be export control compliance and legal compliance requirements; a template is provided to repository owners",
    "forces": "* Teams have been resisting this; this ends up wasting time.\n* Making documents part of the repo skeleton might be \"rubber stamping\"; better to have teams own this. So too much automation in this case is bad.",
    "solution": "* Rather than asking the resisting team to do the changes, the policing task force that discovers the lack of compliance create the documentation (in addition to negotiations)\n* Taking the contributor perspective (contributors are motivated). They are writing the `CONTRIBUTING.md` documentation for those teams resistant to doing the fixes, doing this as pull requests. The discussion is then documented in the pull request. The resisting development teams then just correct mistakes.\n* \"Let us help you be compliant\"\n* You could do an audit to assess the state of compliance. Bots could be used to check compliance; and the state of compliance could show up in an internal portal.",
    "resulting_context": "* Contributors become InnerSource champions; they both teach and guide those through the process in a gentler fashion than it would have been done before.\n* Many projects pop up without governance; the first chance to interact with them is to help them setup their `README.md` and be compliant.\n* We increase the overall compliance and the chance of getting more contributions from the outside. This ultimately helps the team in question to get more work done.",
    "known_instances": "TBD",
    "status": "Initial",
    "alias": "* Helping repo owners be compliant by writing their CONTRIBUTING.md for them as a pull request\n* Let us help you be compliant",
    "authors": "* Silona Bonewald\n* Georg Gruetter",
    "acknowledgements": "* Erin Bank\n* Tim Yao",
    "references": "For anyone starting further work on this pattern, e.g. to level it up to the next maturity, there are some interesting discussions from the time when this pattern was created.\n\n* Idea to generalize this pattern to include files such as `SUPPORT.md` and `CODE_OF_CONDUCT.md` - see [conversation](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/74#issuecomment-715498921)\n* Idea for tooling to automatically generate files such as `CONTRIBUTING.md` - see [conversation](https://github.com/InnerSourceCommons/InnerSourcePatterns/pull/74#discussion_r168596722).",
    "slug": "assisted_compliance"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/issue-tracker.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nIssue Tracker Use Cases\n\n## Patlet\n\nThe InnerSource host team fails to make not only plans and progress but also context for changes transparent. This is solved by increasing the use cases for the project issue tracker to also serve brainstorming, implementation discussion, and feature design.\n\n## Problem\n\nA team develops a component that many teams in the organization depend on. It\nuses a standard issue tracker for tracking open bugs and feature requests.\nHowever, the context in each entry is very limited. As a result potential\ncontributors have no way of knowing what change exactly each issue is talking\nabout.\n\n## Context\n\nThe InnerSource project tooling is all setup. However, the project issue tracker\nis mainly used for sharing progress. In InnerSource projects there are many more\nuse cases that an issue tracker can be used for that make remote, asynchronous\ncommunication easier.\n\n## Forces\n\n- Contributors would like to understand whether the feature that they are missing is already on the roadmap. With a lot of context missing in issues though it is impossible to decide whether existing issues match the contributing team's needs.\n- As a result a lot of duplicate issues are being opened that the host team has to deal with.\n- As context in open issues is so limited contributors are unable to help the host team by implementing some easier issues that are open already. As a result a lot of work remains in the hands of the host team.\n- With a strong focus on verbal communication it is impossible to discern after a couple months or years why a certain feature was being chosen for implementation. As a result refactorings, in particular simplifying the component becomes an exercise in project archaeology and brain picking of people who remember what was discussed.\n\n## Solution\n\nEmbrace the \"written over verbal\" philosophy not only for pure software\ndevelopment but also during the planning phase of new features:\n\n- For bugs, planned features and feature ideas create separate issues. In each of those include as much information as possible so that potential external contributors are able to understand the context. Ideally, in particular for easier changes, include enough information for external contributors to support the host team by implementing the functionality in question.\n- Potentially use the issue tracker as a channel to ask questions. This is in particular helpful if you are lacking other communication sources to tackle user questions.\n- Make use of tags and categories in order to distinguish issues used for different purposes.\n- For starting a brainstorming session asynchronously, open an issue for gathering ideas. When discussion is starting to calm down, summarize the points identified in this issue in a separate document. Post that for review as a pull request to drill deeper into individual points that still need clarification. The resulting document can be used to publish the results in other appropriate channels as well as for future reference.\n- Most issue tracker implementations allow for issue templates. Make use of those not only to collect commonly needed information for bug reports but also include hints about what kind of information is needed for the other usage types.\n\n## Resulting Context\n\n- Making more use of the project's issue tracker for communication enables external contributors to follow along and make better decisions on what to contribute.\n- A focus on structured written communication enables host team members to participate remotely.\n- Consistently communicating in writing means that passive documentation on project decisions accumulates as a by-product instead of needing added attention.\n- Consistently using public communication channels leads to more humans following a discussion. This means that there are more knowledgeable humans that can answer questions, chime in on open issues, or point out flaws in planned features that would otherwise be found only much later.\n- Moving discussions to a public discussion medium creates an opportunity for potential future contributors to lurk, follow along, get comfortable and learn the ways of the project long before they have the first need to get involved.\n\n## Known Instances\n\n* Europace AG - See blog post [Issue Use Cases](https://tech.europace.de/post/using-issues-for-asking-questions-and-tracking-work/)\n\n## Authors\n\nIsabel Drost-Fromm\n\n## Status\n\nStructured\n",
    "title": "Issue Tracker Use Cases",
    "patlet": "The InnerSource host team fails to make not only plans and progress but also context for changes transparent. This is solved by increasing the use cases for the project issue tracker to also serve brainstorming, implementation discussion, and feature design.",
    "problem": "A team develops a component that many teams in the organization depend on. It\nuses a standard issue tracker for tracking open bugs and feature requests.\nHowever, the context in each entry is very limited. As a result potential\ncontributors have no way of knowing what change exactly each issue is talking\nabout.",
    "context": "The InnerSource project tooling is all setup. However, the project issue tracker\nis mainly used for sharing progress. In InnerSource projects there are many more\nuse cases that an issue tracker can be used for that make remote, asynchronous\ncommunication easier.",
    "forces": "- Contributors would like to understand whether the feature that they are missing is already on the roadmap. With a lot of context missing in issues though it is impossible to decide whether existing issues match the contributing team's needs.\n- As a result a lot of duplicate issues are being opened that the host team has to deal with.\n- As context in open issues is so limited contributors are unable to help the host team by implementing some easier issues that are open already. As a result a lot of work remains in the hands of the host team.\n- With a strong focus on verbal communication it is impossible to discern after a couple months or years why a certain feature was being chosen for implementation. As a result refactorings, in particular simplifying the component becomes an exercise in project archaeology and brain picking of people who remember what was discussed.",
    "solution": "Embrace the \"written over verbal\" philosophy not only for pure software\ndevelopment but also during the planning phase of new features:\n\n- For bugs, planned features and feature ideas create separate issues. In each of those include as much information as possible so that potential external contributors are able to understand the context. Ideally, in particular for easier changes, include enough information for external contributors to support the host team by implementing the functionality in question.\n- Potentially use the issue tracker as a channel to ask questions. This is in particular helpful if you are lacking other communication sources to tackle user questions.\n- Make use of tags and categories in order to distinguish issues used for different purposes.\n- For starting a brainstorming session asynchronously, open an issue for gathering ideas. When discussion is starting to calm down, summarize the points identified in this issue in a separate document. Post that for review as a pull request to drill deeper into individual points that still need clarification. The resulting document can be used to publish the results in other appropriate channels as well as for future reference.\n- Most issue tracker implementations allow for issue templates. Make use of those not only to collect commonly needed information for bug reports but also include hints about what kind of information is needed for the other usage types.",
    "resulting_context": "- Making more use of the project's issue tracker for communication enables external contributors to follow along and make better decisions on what to contribute.\n- A focus on structured written communication enables host team members to participate remotely.\n- Consistently communicating in writing means that passive documentation on project decisions accumulates as a by-product instead of needing added attention.\n- Consistently using public communication channels leads to more humans following a discussion. This means that there are more knowledgeable humans that can answer questions, chime in on open issues, or point out flaws in planned features that would otherwise be found only much later.\n- Moving discussions to a public discussion medium creates an opportunity for potential future contributors to lurk, follow along, get comfortable and learn the ways of the project long before they have the first need to get involved.",
    "known_instances": "* Europace AG - See blog post [Issue Use Cases](https://tech.europace.de/post/using-issues-for-asking-questions-and-tracking-work/)",
    "authors": "Isabel Drost-Fromm",
    "status": "Structured",
    "slug": "issue-tracker"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/communication-tooling.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nCommunication Tooling\n\n## Patlet\n\nThe users of an InnerSource project have trouble getting help and getting in touch with the host team.\nBy consistently using asynchronous communication tooling, the project makes discussions visible, archived and searchable, leading to an improved level of support for users.\n\n## Problem\n\nA team is open to receiving contributions from downstream users of their\ncomponent. Coordination and communication happens in an ad-hoc fashion though\nleading to incoherent information being shared, delays in answers received,\ncontributors pinging multiple host team members before receiving a definitive\nanswer.\n\n## Context\n\n- A team depends on another team's component.\n- It would like to make contributions to that component.\n- Even when it happens in writing, communication happens in a 1-on-1 fashion.\n\n## Forces\n\n- The host team is interested in receiving contributions and willing to mentor contributors.\n- Teams have a strong verbal communication culture and are inexperienced with setting up project specific asynchronous communication channels.\n- Communication channels may be aligned with specific groups that should be reached but not by communication purpose.\n\n## Solution\n\nThe host team should provide company-public, archived, searchable, linkable communication channels that anyone in the company can subscribe to, as there are measurable benefits to supporting open, written communications channels.\n\nThe goal when streamlining communication channels for InnerSource projects\nshould be to align communication around topics, not around certain sets of\npeople.\n\nA project should set up the following communication tooling:\n\n1. **a dedicated issue tracker** where structured communication, decision-making and progress tracking can happen transparently for all host team members but also for downstream users and contributors to follow. For further applications of the issue tracker see [Issue Tracker Use Cases](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/issue-tracker.md).\n2. **public discussion channel(s)** that come with less rigid a structure. Typically, this will be mailing lists, online forums, Q&A systems or even archived chat channels. Usually it is enough to start with just one channel for the project. If traffic increases too much it is helpful to split discussions about project usage from discussions about project development.\n3. **a private channel** where communication about sensitive topics can happen between [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) - e.g. adding further Trusted Committers to the host team. This channel should be used with great care such that communication defaults to open and is kept private only under very rare circumstances.\n\nWhile communication can happen outside of those written channels, as much information as possible should be brought back to the asynchronous channels.\n\nAll communication channels should be documented in the project `README.md`. For more details on the use of this file see [Standard Base Documentation](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md).\n\nThe host team members need to make an effort to direct questions that they receive personally (e.g. via email or private chat messages) back to official communication channels.\n\n![Recommended Communication Tooling for an InnerSource Project](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/communication-tooling/communication-tooling.png)\n\n## Resulting Context\n\nSetting up and consistently using official asynchronous communication channels\nhelps create a base level of [passive documentation](https://www.oreilly.com/library/view/understanding-the-innersource/9781491986899/ch04.html) that can be referenced again when similar questions come up again.\n\nWith communication happening in the open others can easily follow project\nprogress and get active contributing. Others lurking and reading lowers the\nbarrier to get involved raising the likelihood of receiving contributions.\n\nWith questions being answered in public more people can add their perspective\nleading to a complete picture - this includes not only host team members,\nbut also users of the project.\n\nKeeping communication in asynchronous channels allows for participants on\ndifferent schedules - either due to different time zones or due to different\nroutines, meeting schedules, team routines - to meaningfully contribute to\nthe project.\n\nAnswering questions in those channels means that not only other team members\ncan listen in and provide additional information, it also means that other\nusers with the same question see (or later find) the previous answer leading\nto a lower need to repeat explanations.\n\n## Known Instances\n\n* Europace AG\n* Paypal Inc.\n* Mercado Libre\n\n## Authors\n\nIsabel Drost-Fromm\n\n## Acknowledgement\n\nSebastian Spier (for the visual)\n\n## Status\n\n* Structured\n* Drafted in December 2019.\n\n## Credits\n\n[People](https://storyset.com/people) illustrations by Storyset\n",
    "title": "Communication Tooling",
    "patlet": "The users of an InnerSource project have trouble getting help and getting in touch with the host team.\nBy consistently using asynchronous communication tooling, the project makes discussions visible, archived and searchable, leading to an improved level of support for users.",
    "problem": "A team is open to receiving contributions from downstream users of their\ncomponent. Coordination and communication happens in an ad-hoc fashion though\nleading to incoherent information being shared, delays in answers received,\ncontributors pinging multiple host team members before receiving a definitive\nanswer.",
    "context": "- A team depends on another team's component.\n- It would like to make contributions to that component.\n- Even when it happens in writing, communication happens in a 1-on-1 fashion.",
    "forces": "- The host team is interested in receiving contributions and willing to mentor contributors.\n- Teams have a strong verbal communication culture and are inexperienced with setting up project specific asynchronous communication channels.\n- Communication channels may be aligned with specific groups that should be reached but not by communication purpose.",
    "solution": "The host team should provide company-public, archived, searchable, linkable communication channels that anyone in the company can subscribe to, as there are measurable benefits to supporting open, written communications channels.\n\nThe goal when streamlining communication channels for InnerSource projects\nshould be to align communication around topics, not around certain sets of\npeople.\n\nA project should set up the following communication tooling:\n\n1. **a dedicated issue tracker** where structured communication, decision-making and progress tracking can happen transparently for all host team members but also for downstream users and contributors to follow. For further applications of the issue tracker see [Issue Tracker Use Cases](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/issue-tracker.md).\n2. **public discussion channel(s)** that come with less rigid a structure. Typically, this will be mailing lists, online forums, Q&A systems or even archived chat channels. Usually it is enough to start with just one channel for the project. If traffic increases too much it is helpful to split discussions about project usage from discussions about project development.\n3. **a private channel** where communication about sensitive topics can happen between [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) - e.g. adding further Trusted Committers to the host team. This channel should be used with great care such that communication defaults to open and is kept private only under very rare circumstances.\n\nWhile communication can happen outside of those written channels, as much information as possible should be brought back to the asynchronous channels.\n\nAll communication channels should be documented in the project `README.md`. For more details on the use of this file see [Standard Base Documentation](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md).\n\nThe host team members need to make an effort to direct questions that they receive personally (e.g. via email or private chat messages) back to official communication channels.\n\n![Recommended Communication Tooling for an InnerSource Project](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/communication-tooling/communication-tooling.png)",
    "resulting_context": "Setting up and consistently using official asynchronous communication channels\nhelps create a base level of [passive documentation](https://www.oreilly.com/library/view/understanding-the-innersource/9781491986899/ch04.html) that can be referenced again when similar questions come up again.\n\nWith communication happening in the open others can easily follow project\nprogress and get active contributing. Others lurking and reading lowers the\nbarrier to get involved raising the likelihood of receiving contributions.\n\nWith questions being answered in public more people can add their perspective\nleading to a complete picture - this includes not only host team members,\nbut also users of the project.\n\nKeeping communication in asynchronous channels allows for participants on\ndifferent schedules - either due to different time zones or due to different\nroutines, meeting schedules, team routines - to meaningfully contribute to\nthe project.\n\nAnswering questions in those channels means that not only other team members\ncan listen in and provide additional information, it also means that other\nusers with the same question see (or later find) the previous answer leading\nto a lower need to repeat explanations.",
    "known_instances": "* Europace AG\n* Paypal Inc.\n* Mercado Libre",
    "authors": "Isabel Drost-Fromm",
    "acknowledgement": "Sebastian Spier (for the visual)",
    "status": "* Structured\n* Drafted in December 2019.",
    "credits": "[People](https://storyset.com/people) illustrations by Storyset",
    "slug": "communication-tooling"
  },
  {
    "url": "https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/base-documentation.md",
    "stage": "2-structured",
    "markdown": "## Title\n\nStandard Base Documentation\n\n## Patlet\n\nNew contributors to an InnerSource project have a hard time figuring out who\nmaintains the project, what to work on, and how to contribute. Providing\ndocumentation in standard files like `README.md`/`CONTRIBUTING.md` enables a\nself service process for new contributors, so that they can find the answers to\nthe most common questions on their own.\n\n## Problem\n\nA team wants to share either a freshly started or a pre-existing project with\nthe wider organization and receive contributions to it. Potential contributors\noften are lost: They are failing to identify the team's preferred communication\nchannels. They have trouble quickly making a judgment about whether a new\nfeature makes sense to be added or not. They have a hard time understanding\nexactly which colleagues are currently actively maintaining the project.\n\n## Context\n\nA project is to be shared with others as an InnerSource project. In order for\nothers to be able to understand what the project is about as well as how to\ncontribute, the project needs to provide some base level documentation. So far\nthe project is lacking either all documentation or some aspects needed for users\nto try it out in a self-service manner as well as for contributors to get up to\nspeed quickly.\n\n## Forces\n\n- The project was converted into an InnerSource project only recently. Before, users were either only internal or on-boarded in personal face-to-face sessions. Equally, people working on the project went through personal on-boarding sessions which do not scale with growing numbers of contributors or remote contributors. As a result, self service documentation is lacking.\n- The project was newly created as an InnerSource project. However the host team lacks experience with InnerSource. As a result they need guidance on which information to include in their documentation, where to put that documentation so others can find it and which types of readers to address in their documentation.\n- The project was converted into an InnerSource project only recently, the host team has limited experience with InnerSource. As a result, existing documentation addresses a lot of technical aspects. It does not cover communication, coordination, information needed to facilitate transparent planning.\n- The project was converted into an InnerSource project only recently. As a result, a lot of implicit knowledge that exists within the team is neither written down nor obvious to contributors.\n- A lack of documentation leads to potential contributors taking a long time to get setup and get started. Producing documentation (and keeping it up to date) requires a time investment. Even if the host team relies on contributors to help with lacking documentation, those contributions still need time to review.\n- Project members are spending a lot of time answering getting started questions. Maintaining a comprehensive database of what could be considered support questions requires a lot of time and effort though.\n- Different teams within the organization have diverging standards for how to format source code and which software patterns to use. As a result contributions often end up getting re-written to a large part or even entirely. Standardizing all of that and enforcing the standard often would require a lot of time and work.\n- The added work for repeated explanations and re-writes diminishes the usefulness of the InnerSource approach.\n- Frequent escalations due to extra work and delays due to re-writes lead to a big cheese situation.\n\n## Solution\n\nAddress the need for clearer documentation for new contributors. The goal when\ncreating this documentation should be to make getting started as much a self\nservice process as possible with frequently asked questions answered in standard\ndocumentation format.\n\n### README.md\n\nIf it does not yet exist, create a `README.md` for your project. It should\ncontain:\n\n* The [mission of the project](https://producingoss.com/en/producingoss.html#mission-statement) in as a concise format as possible. It should answer what the project's purpose is and enable contributors to make a good first guess whether a suggested feature will likely be in scope for the project, or not.\n* A \"Getting Started\" section for downstream users of the project. It should explain how to setup/ integrate the project artifacts as well as an explanation of some of the first typical steps for first time users.\n* Deeper documentation for project users - or a link to that.\n* Documentation needed for making modifications to the project - or a link to that.\n* Documentation on how to contribute to the project - or a link to that.\n* A \"Getting involved\" section that explains which public, archived, linkable communication channels the project uses. This should include a link to the project issue tracker, but also to any further discussion media used.\n* A \"Who we are\" section explaining who the [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) behind the project are - with an explanation that instead of contacting these people privately the public communication channels above should be used for communication.\n* An explanation of what the criteria are for the project to turn contributors into Trusted Committers - if that path exists.\n\n![README.md](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/standard-base-documentation/README-for-users.png)\n\n### CONTRIBUTING.md\n\nIf the explanation of the steps to make a contribution are too involved, create\na separate `CONTRIBUTING.md` document. This document should answer frequently\nasked questions that contributors have asked in the past. There is no need to\nprovide a comprehensive book up front. Rather, share information that has proven\nneeded by contributors. Likely it will touch upon one or more of the following\ntopics:\n\n* How to checkout the project source code from version control.\n* How to make modifications to the project (potentially including information on coding guidelines).\n* How to build the project.\n* How to run tests to make sure the above modifications aren't introducing new bugs.\n* How to submit your modifications back to the project.\n* Some information on which turnaround time to expect for modifications made.\n\n![CONTRIBUTING.md](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/assets/img/standard-base-documentation/CONTRIBUTING-for-contributors.png)\n\nThere are many of good examples for how to write a `README.md` and what kind\nof information to include in a `CONTRIBUTING.md` file in various open source projects.\nPages like [how to write a readme that rocks](https://m.dotdev.co/how-to-write-a-readme-that-rocks-bc29f279611a),\n[Open Source Guide from GitHub](https://opensource.guide/) as well as\nthe book [Producing Open Source](https://producingoss.com/en/producingoss.html)\nall have valuable information on what kind of information to provide. While\nProducing Open Source does not have a chapter on writing a good README per se,\nthe [Getting Started\nchapter](https://producingoss.com/en/producingoss.html#starting-from-what-you-have)\ndoes provide a fairly extensive list of things that fellow host team members,\nusers and contributors will need. InnerSource projects likely will not cover all\nof those aspects right from the start, the list itself is helpful for\ninspiration for what one could cover.\n\nIn addition to that, this pattern comes with two very basic templates to get you\nstarted right away: [README-template.md](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/templates/README-template.md) and\n[CONTRIBUTING-template.md](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/templates/CONTRIBUTING-template.md)\n\n## Resulting Context\n\n* The time for contributors to get up to speed is significantly reduced.\n* Time spent on answering initial questions for [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) is significantly reduced, leaving them more time to work on other tasks.\n* Escalations due to misunderstandings and misalignment are significantly reduced.\n\n## Known Instances\n\n* Europace AG - See blog post [InnerSource: Adding base documentation](https://tech.europace.de/post/innersource-base-documentation/)\n* Paypal Inc.\n* Mercado Libre - create a documentation site that contains how to get started with InnerSource and also define the basic artifacts that a repository must have to be InnerSource (README, CONTRIBNUTING, CODING_GUIDELINES, etc).\n\n## Authors\n\n* Isabel Drost-Fromm\n\n## Alias\n\nProvide standard base documentation through a README\n\n## Status\n\n* Structured\n* Drafted in December 2019.\n\n## References\n\n* [README-template.md](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/templates/README-template.md) and\n* [CONTRIBUTING-template.md](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/templates/CONTRIBUTING-template.md)\n\n## Credits\n\n[Web](https://storyset.com/web) and [People](https://storyset.com/people) illustrations by Storyset\n",
    "title": "Standard Base Documentation",
    "patlet": "New contributors to an InnerSource project have a hard time figuring out who\nmaintains the project, what to work on, and how to contribute. Providing\ndocumentation in standard files like `README.md`/`CONTRIBUTING.md` enables a\nself service process for new contributors, so that they can find the answers to\nthe most common questions on their own.",
    "problem": "A team wants to share either a freshly started or a pre-existing project with\nthe wider organization and receive contributions to it. Potential contributors\noften are lost: They are failing to identify the team's preferred communication\nchannels. They have trouble quickly making a judgment about whether a new\nfeature makes sense to be added or not. They have a hard time understanding\nexactly which colleagues are currently actively maintaining the project.",
    "context": "A project is to be shared with others as an InnerSource project. In order for\nothers to be able to understand what the project is about as well as how to\ncontribute, the project needs to provide some base level documentation. So far\nthe project is lacking either all documentation or some aspects needed for users\nto try it out in a self-service manner as well as for contributors to get up to\nspeed quickly.",
    "forces": "- The project was converted into an InnerSource project only recently. Before, users were either only internal or on-boarded in personal face-to-face sessions. Equally, people working on the project went through personal on-boarding sessions which do not scale with growing numbers of contributors or remote contributors. As a result, self service documentation is lacking.\n- The project was newly created as an InnerSource project. However the host team lacks experience with InnerSource. As a result they need guidance on which information to include in their documentation, where to put that documentation so others can find it and which types of readers to address in their documentation.\n- The project was converted into an InnerSource project only recently, the host team has limited experience with InnerSource. As a result, existing documentation addresses a lot of technical aspects. It does not cover communication, coordination, information needed to facilitate transparent planning.\n- The project was converted into an InnerSource project only recently. As a result, a lot of implicit knowledge that exists within the team is neither written down nor obvious to contributors.\n- A lack of documentation leads to potential contributors taking a long time to get setup and get started. Producing documentation (and keeping it up to date) requires a time investment. Even if the host team relies on contributors to help with lacking documentation, those contributions still need time to review.\n- Project members are spending a lot of time answering getting started questions. Maintaining a comprehensive database of what could be considered support questions requires a lot of time and effort though.\n- Different teams within the organization have diverging standards for how to format source code and which software patterns to use. As a result contributions often end up getting re-written to a large part or even entirely. Standardizing all of that and enforcing the standard often would require a lot of time and work.\n- The added work for repeated explanations and re-writes diminishes the usefulness of the InnerSource approach.\n- Frequent escalations due to extra work and delays due to re-writes lead to a big cheese situation.",
    "solution": "Address the need for clearer documentation for new contributors. The goal when\ncreating this documentation should be to make getting started as much a self\nservice process as possible with frequently asked questions answered in standard\ndocumentation format.",
    "resulting_context": "* The time for contributors to get up to speed is significantly reduced.\n* Time spent on answering initial questions for [Trusted Committers](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/trusted-committer.md) is significantly reduced, leaving them more time to work on other tasks.\n* Escalations due to misunderstandings and misalignment are significantly reduced.",
    "known_instances": "* Europace AG - See blog post [InnerSource: Adding base documentation](https://tech.europace.de/post/innersource-base-documentation/)\n* Paypal Inc.\n* Mercado Libre - create a documentation site that contains how to get started with InnerSource and also define the basic artifacts that a repository must have to be InnerSource (README, CONTRIBNUTING, CODING_GUIDELINES, etc).",
    "authors": "* Isabel Drost-Fromm",
    "alias": "Provide standard base documentation through a README",
    "status": "* Structured\n* Drafted in December 2019.",
    "references": "* [README-template.md](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/templates/README-template.md) and\n* [CONTRIBUTING-template.md](https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/main/patterns/2-structured/project-setup/templates/CONTRIBUTING-template.md)",
    "credits": "[Web](https://storyset.com/web) and [People](https://storyset.com/people) illustrations by Storyset",
    "slug": "base-documentation"
  }
]